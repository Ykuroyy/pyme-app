EXTRA_TOOLS = [
    {
        "id": 31,
        "category": "ファイル管理",
        "number": "31/100",
        "title": "PDF一括結合",
        "desc": "複数のPDFファイルを自動で1つに結合",
        "how_to": "PyPDF2ライブラリを使って、複数のPDFファイルを1つのファイルにまとめます。",
        "sample_code": "from PyPDF2 import PdfMerger\nimport os\n\npdf_files = ['file1.pdf', 'file2.pdf', 'file3.pdf']\nmerger = PdfMerger()\nfor pdf in pdf_files:\n    merger.append(pdf)\nmerger.write('merged.pdf')\nmerger.close()\nprint('PDF結合完了！')",
        "libraries": "PyPDF2、os（標準ライブラリ）",
        "explanation": "複数のPDFを一括で結合することで、資料整理や提出が効率化できます。",
        "benefits": ["手作業が不要", "一括結合", "資料整理が簡単"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "PythonでPDF一括結合のコードを作成してください。以下の条件でお願いします：\n\n1. PyPDF2ライブラリを使う\n2. 複数のPDFファイルを1つにまとめる\n3. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: 複数のPDF\n出力ファイル: merged.pdf\n\nコピペ用プロンプト:\nPythonでPDF一括結合のコードを作成してください。PyPDF2ライブラリを使って複数のPDFファイルを1つにまとめるコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 32,
        "category": "ファイル管理",
        "number": "32/100",
        "title": "フォルダ自動圧縮",
        "desc": "指定フォルダを自動でZIP圧縮",
        "how_to": "shutilライブラリを使って、指定したフォルダをZIPファイルに圧縮します。",
        "sample_code": "import shutil\nfolder_path = 'target_folder'\nshutil.make_archive(folder_path, 'zip', folder_path)\nprint('圧縮完了！')",
        "libraries": "shutil（標準ライブラリ）",
        "explanation": "フォルダを自動で圧縮することで、バックアップやメール添付が簡単になります。",
        "benefits": ["バックアップが簡単", "メール添付が楽", "手作業が不要"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonでフォルダ自動圧縮のコードを作成してください。以下の条件でお願いします：\n\n1. shutilライブラリを使う\n2. 指定したフォルダをZIPファイルに圧縮する\n3. 初心者でも理解できるようにコメントを詳しく書く\n\n対象フォルダ: target_folder\n出力ファイル: target_folder.zip\n\nコピペ用プロンプト:\nPythonでフォルダ自動圧縮のコードを作成してください。shutilライブラリを使って指定したフォルダをZIPファイルに圧縮するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 33,
        "category": "ファイル管理",
        "number": "33/100",
        "title": "画像一括リネーム",
        "desc": "画像ファイルを自動で連番リネーム",
        "how_to": "osライブラリを使って、フォルダ内の画像ファイルを連番でリネームします。",
        "sample_code": "import os\nfolder = 'images'\nfor i, filename in enumerate(os.listdir(folder), 1):\n    if filename.lower().endswith(('.jpg', '.jpeg', '.png')):\n        new_name = f'image_{i:03d}' + os.path.splitext(filename)[1]\n        os.rename(os.path.join(folder, filename), os.path.join(folder, new_name))\n        print(f'{filename} → {new_name}')\nprint('リネーム完了！')",
        "libraries": "os（標準ライブラリ）",
        "explanation": "大量の画像を一括でリネームすることで、整理や管理が簡単になります。",
        "benefits": ["整理が簡単", "一括処理", "手作業が不要"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで画像一括リネームのコードを作成してください。以下の条件でお願いします：\n\n1. osライブラリを使う\n2. フォルダ内の画像ファイルを連番でリネームする\n3. 初心者でも理解できるようにコメントを詳しく書く\n\n対象フォルダ: images\nリネーム形式: image_001.jpg など\n\nコピペ用プロンプト:\nPythonで画像一括リネームのコードを作成してください。osライブラリを使ってフォルダ内の画像ファイルを連番でリネームするコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 34,
        "category": "データ処理・分析",
        "number": "34/100",
        "title": "売上データ自動分析",
        "desc": "売上データを自動で分析・レポート化",
        "how_to": "CSV売上データを自動で分析し、月次・商品別レポートを作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('sales.csv')\nmonthly = df.groupby('月')['売上'].sum()\nmonthly.plot(kind='line')\nplt.savefig('monthly_sales.png')\nprint('分析完了！')",
        "libraries": "pandas、matplotlib",
        "explanation": "売上データを自動で分析。月次・商品別の傾向が一目で分かる。",
        "benefits": ["分析が楽", "グラフも自動", "戦略立案に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで売上データ自動分析のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルの売上データを読み込む\n3. 月次・商品別・取引先別の分析を行う\n4. 売上傾向と成長率を計算する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、商品名、取引先、売上金額）\n出力形式: Excelファイル（sales_analysis.xlsx）とグラフ画像\n分析項目: 月次売上、商品別売上、取引先別売上、成長率\n\nコピペ用プロンプト:\nPythonで売上データ自動分析のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルの売上データを読み込み、月次・商品別・取引先別の分析を行って売上傾向と成長率を計算するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 35,
        "category": "ファイル管理",
        "number": "35/100",
        "title": "ファイル自動分類",
        "desc": "ファイルを拡張子別に自動分類・整理",
        "how_to": "指定フォルダ内のファイルを拡張子別に自動分類し、整理します。",
        "sample_code": "import os\nimport shutil\nfor file in os.listdir('.'):\n    if file.endswith('.pdf'):\n        shutil.move(file, 'pdfs/')\n    elif file.endswith('.jpg'):\n        shutil.move(file, 'images/')\nprint('分類完了！')",
        "libraries": "os、shutil",
        "explanation": "ファイルを自動で分類。探しやすく、整理も楽に。",
        "benefits": ["整理が楽", "探しやすい", "自動化"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonでファイル自動分類のコードを作成してください。以下の条件でお願いします：\n\n1. osとshutilライブラリを使う\n2. 指定したフォルダ内のファイルを拡張子別に分類する\n3. 画像、文書、動画、音楽の4つのカテゴリに分ける\n4. 各カテゴリ用のフォルダを自動作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n対象フォルダ: 指定したフォルダパス\n分類基準: ファイル拡張子（.jpg、.pdf、.mp4、.mp3など）\n出力形式: 分類されたフォルダ構造\n\nコピペ用プロンプト:\nPythonでファイル自動分類のコードを作成してください。osとshutilライブラリを使って指定したフォルダ内のファイルを拡張子別に分類し、画像、文書、動画、音楽の4つのカテゴリに分けて各カテゴリ用のフォルダを自動作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 36,
        "category": "文書作成・管理",
        "number": "36/100",
        "title": "レポート自動生成",
        "desc": "データからレポートを自動生成・PDF化",
        "how_to": "CSVデータから月次レポートを自動生成し、PDF化します。",
        "sample_code": "import pandas as pd\nfrom reportlab.pdfgen import canvas\ndf = pd.read_csv('data.csv')\ntotal = df['売上'].sum()\nc = canvas.Canvas('report.pdf')\nc.drawString(100, 750, f'月次レポート\\n総売上: {total:,}円')\nc.save()\nprint('レポート作成完了！')",
        "libraries": "pandas、reportlab",
        "explanation": "レポートを自動で生成。手作業不要で、毎月の報告も楽に。",
        "benefits": ["手作業不要", "PDF化", "時短"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonでレポート自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとreportlabライブラリを使う\n2. CSVファイルのデータを読み込む\n3. 月次レポートの基本情報を設定する\n4. 売上、利益、顧客数の集計を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、売上、利益、顧客数）\n出力形式: PDFファイル（monthly_report.pdf）\nレポート項目: 月次売上、利益、顧客数、成長率\n\nコピペ用プロンプト:\nPythonでレポート自動生成のコードを作成してください。pandasとreportlabライブラリを使ってCSVファイルのデータを読み込み、月次レポートの基本情報を設定して売上、利益、顧客数の集計を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 37,
        "category": "データ処理・分析",
        "number": "37/100",
        "title": "顧客データ自動分析",
        "desc": "顧客データを自動で分析・セグメント化",
        "how_to": "CSV顧客データを自動で分析し、顧客セグメントを作成します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('customers.csv')\ndf['購入頻度'] = df.groupby('顧客ID')['購入回数'].transform('sum')\ndf.to_excel('customer_analysis.xlsx', index=False)\nprint('顧客分析完了！')",
        "libraries": "pandas",
        "explanation": "顧客データを自動で分析。セグメント化で営業戦略に活用。",
        "benefits": ["分析が楽", "セグメント化", "営業戦略に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客データ自動分析のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの顧客データを読み込む\n3. 購入頻度、購入金額、最終購入日を分析する\n4. 顧客をセグメント（VIP、一般、休眠）に分類する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客ID、購入日、購入金額、商品名）\n出力形式: Excelファイル（customer_segments.xlsx）\n分析項目: 購入頻度、購入金額、最終購入日、顧客セグメント\n\nコピペ用プロンプト:\nPythonで顧客データ自動分析のコードを作成してください。pandasライブラリを使ってCSVファイルの顧客データを読み込み、購入頻度、購入金額、最終購入日を分析して顧客をセグメント（VIP、一般、休眠）に分類するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 38,
        "category": "スタッフ管理",
        "number": "38/100",
        "title": "社員スキル管理",
        "desc": "社員のスキル情報を自動で管理・Excel化",
        "how_to": "CSVや手入力データから社員スキル情報を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '田中', 'スキル': 'Python', 'レベル': '上級'},\n    {'氏名': '佐藤', 'スキル': 'Excel', 'レベル': '中級'}\n]\npd.DataFrame(data).to_excel('skills.xlsx', index=False)\nprint('スキル管理完了！')",
        "libraries": "pandas",
        "explanation": "社員スキルを自動で管理。人材配置や研修計画に活用。",
        "benefits": ["人材配置が楽", "Excel化", "研修計画に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員スキル管理のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 社員のスキル情報を管理する\n3. スキル名、レベル、取得日を記録する\n4. スキル別・レベル別の集計を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 氏名、スキル名、レベル、取得日\n出力形式: Excelファイル（employee_skills.xlsx）\n機能: スキル追加、レベル更新、集計レポート\n\nコピペ用プロンプト:\nPythonで社員スキル管理のコードを作成してください。pandasライブラリを使って社員のスキル情報（氏名、スキル名、レベル、取得日）を管理し、スキル別・レベル別の集計を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 39,
        "category": "在庫管理",
        "number": "39/100",
        "title": "在庫アラート自動通知",
        "desc": "在庫不足時に自動でアラート通知",
        "how_to": "在庫データをチェックし、不足時に自動でメール通知します。",
        "sample_code": "import pandas as pd\nimport smtplib\ndf = pd.read_csv('inventory.csv')\nlow_stock = df[df['在庫数'] < 10]\nif len(low_stock) > 0:\n    print('在庫不足商品があります！')\nprint('チェック完了！')",
        "libraries": "pandas、smtplib",
        "explanation": "在庫不足を自動で検知。発注漏れを防止。",
        "benefits": ["発注漏れ防止", "自動化", "在庫管理が楽"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで在庫アラート自動通知のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとsmtplibライブラリを使う\n2. CSVファイルの在庫データを読み込む\n3. 在庫数が閾値以下の商品を検出する\n4. 在庫不足商品のリストをメールで通知する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（商品名、在庫数、最小在庫数）\n通知方法: メール送信\nアラート条件: 在庫数 < 最小在庫数\n\nコピペ用プロンプト:\nPythonで在庫アラート自動通知のコードを作成してください。pandasとsmtplibライブラリを使ってCSVファイルの在庫データを読み込み、在庫数が閾値以下の商品を検出して在庫不足商品のリストをメールで通知するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 40,
        "category": "データ処理・分析",
        "number": "40/100",
        "title": "データ自動クレンジング",
        "desc": "データの欠損値・重複を自動で処理",
        "how_to": "CSVデータの欠損値や重複を自動で検出・処理します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.dropna()\ndf = df.drop_duplicates()\ndf.to_csv('cleaned_data.csv', index=False)\nprint('クレンジング完了！')",
        "libraries": "pandas",
        "explanation": "データを自動でクレンジング。分析の精度向上。",
        "benefits": ["データ品質向上", "分析精度向上", "自動化"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonでデータ自動クレンジングのコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルのデータを読み込む\n3. 欠損値の検出と処理を行う\n4. 重複データの削除を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（生データ）\n出力形式: CSVファイル（cleaned_data.csv）\n処理項目: 欠損値処理、重複削除、データ型変換\n\nコピペ用プロンプト:\nPythonでデータ自動クレンジングのコードを作成してください。pandasライブラリを使ってCSVファイルのデータを読み込み、欠損値の検出と処理を行って重複データを削除するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 41,
        "category": "文書作成・管理",
        "number": "41/100",
        "title": "契約書自動生成",
        "desc": "契約書のテンプレートを自動生成・PDF化",
        "how_to": "契約内容を入力するだけで契約書を自動生成しPDF化します。",
        "sample_code": "from reportlab.pdfgen import canvas\nc = canvas.Canvas('contract.pdf')\nc.drawString(100, 750, '契約書')\nc.drawString(100, 700, '契約者: 株式会社サンプル')\nc.drawString(100, 650, '契約内容: システム開発')\nc.save()\nprint('契約書作成完了！')",
        "libraries": "reportlab",
        "explanation": "契約書を自動で生成。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで契約書自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 契約書の基本情報を設定する\n3. 契約者、契約内容、金額を入力する\n4. 見やすい契約書形式にフォーマットする\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 契約者名、契約内容、金額、契約期間\n出力形式: PDFファイル（contract.pdf）\n契約書項目: 契約者、契約内容、金額、期間、署名欄\n\nコピペ用プロンプト:\nPythonで契約書自動生成のコードを作成してください。reportlabライブラリを使って契約書の基本情報（契約者名、契約内容、金額、契約期間）を設定し、見やすい契約書形式にフォーマットするコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 42,
        "category": "顧客管理",
        "number": "42/100",
        "title": "顧客フォローアップ自動化",
        "desc": "顧客フォローアップを自動でスケジュール・通知",
        "how_to": "顧客データからフォローアップ予定を自動でスケジュールし、通知します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime, timedelta\ndf = pd.read_csv('customers.csv')\ntoday = datetime.now()\ndf['次回連絡日'] = today + timedelta(days=30)\ndf.to_excel('followup_schedule.xlsx', index=False)\nprint('フォローアップ予定作成完了！')",
        "libraries": "pandas、datetime",
        "explanation": "顧客フォローアップを自動化。営業機会の逃しを防止。",
        "benefits": ["営業機会確保", "自動化", "顧客満足度向上"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客フォローアップ自動化のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとdatetimeライブラリを使う\n2. CSVファイルの顧客データを読み込む\n3. 最終連絡日から次回フォローアップ日を計算する\n4. フォローアップ予定表をExcelで作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客名、最終連絡日、重要度）\n出力形式: Excelファイル（followup_schedule.xlsx）\n機能: 次回連絡日計算、優先度設定、スケジュール管理\n\nコピペ用プロンプト:\nPythonで顧客フォローアップ自動化のコードを作成してください。pandasとdatetimeライブラリを使ってCSVファイルの顧客データを読み込み、最終連絡日から次回フォローアップ日を計算してフォローアップ予定表をExcelで作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 43,
        "category": "スタッフ管理",
        "number": "43/100",
        "title": "社員評価自動集計",
        "desc": "社員評価データを自動で集計・レポート化",
        "how_to": "CSV評価データを自動で集計し、社員別評価レポートを作成します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('evaluations.csv')\nresults = df.groupby('社員名')['評価点'].mean()\nresults.to_excel('evaluation_report.xlsx')\nprint('評価集計完了！')",
        "libraries": "pandas",
        "explanation": "社員評価を自動で集計。人事評価も楽に。",
        "benefits": ["評価が楽", "Excel化", "人事評価に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員評価自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの評価データを読み込む\n3. 社員別・項目別の評価を集計する\n4. 評価レポートをExcelで作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（社員名、評価項目、評価点、評価者）\n出力形式: Excelファイル（evaluation_report.xlsx）\n集計項目: 社員別平均点、項目別評価、評価者別集計\n\nコピペ用プロンプト:\nPythonで社員評価自動集計のコードを作成してください。pandasライブラリを使ってCSVファイルの評価データを読み込み、社員別・項目別の評価を集計して評価レポートをExcelで作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 44,
        "category": "データ処理・分析",
        "number": "44/100",
        "title": "売上予測自動分析",
        "desc": "過去データから売上を自動で予測・分析",
        "how_to": "過去の売上データから将来の売上を自動で予測します。",
        "sample_code": "import pandas as pd\nimport numpy as np\ndf = pd.read_csv('sales_history.csv')\n# 簡単な移動平均で予測\nprediction = df['売上'].rolling(window=3).mean().iloc[-1]\nprint(f'予測売上: {prediction:,.0f}円')",
        "libraries": "pandas、numpy",
        "explanation": "売上を自動で予測。経営計画や予算策定に活用。",
        "benefits": ["予測が楽", "経営計画に活用", "予算策定に活用"],
        "time_required": "1時間〜2時間",
        "difficulty": "中級",
        "ai_prompt": "Pythonで売上予測自動分析のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとnumpyライブラリを使う\n2. CSVファイルの過去売上データを読み込む\n3. 時系列分析で売上傾向を分析する\n4. 移動平均や季節性を考慮した予測を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、売上金額）\n出力形式: Excelファイル（sales_forecast.xlsx）\n予測項目: 月次売上予測、成長率予測、信頼区間\n\nコピペ用プロンプト:\nPythonで売上予測自動分析のコードを作成してください。pandasとnumpyライブラリを使ってCSVファイルの過去売上データを読み込み、時系列分析で売上傾向を分析して移動平均や季節性を考慮した予測を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 45,
        "category": "文書作成・管理",
        "number": "45/100",
        "title": "プレゼン資料自動生成",
        "desc": "データからプレゼン資料を自動生成・PDF化",
        "how_to": "CSVデータからプレゼン資料を自動生成し、PDF化します。",
        "sample_code": "from reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter, A4\nfrom reportlab.lib import colors\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.lib.units import inch\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprint('=== プレゼン資料自動生成（デモ版） ===')\nprint('データからプロフェッショナルなプレゼン資料を自動生成します。')\nprint('\\n📊 機能:')\nprint('• タイトルスライド作成')\nprint('• データ分析スライド')\nprint('• グラフ・表の挿入')\nprint('• 結論スライド')\nprint('\\n⚠️ 注意事項:')\nprint('• データの正確性を確認してください')\nprint('• プレゼン内容は事前に確認してください')\nprint('• グラフの見やすさを確認してください')\n\ntry:\n    # デモ用のサンプルデータ\n    print('\\n📂 デモ用のサンプルデータを作成中...')\n    \n    # 売上データの作成\n    months = ['1月', '2月', '3月', '4月', '5月', '6月']\n    sales_data = [1200000, 1350000, 1100000, 1500000, 1400000, 1600000]\n    \n    # 顧客データの作成\n    customer_data = {\n        '新規顧客': [45, 52, 38, 58, 49, 62],\n        '既存顧客': [120, 135, 110, 150, 140, 160],\n        'リピート率': [85, 87, 82, 89, 86, 91]\n    }\n    \n    # 商品別売上データ\n    product_sales = {\n        '商品A': 450000,\n        '商品B': 380000,\n        '商品C': 320000,\n        '商品D': 250000,\n        '商品E': 200000\n    }\n    \n    print(f'\\n📊 サンプルデータ作成完了')\n    print(f'• 期間: {months[0]} - {months[-1]}')\n    print(f'• 総売上: {sum(sales_data):,}円')\n    print(f'• 平均月売上: {sum(sales_data)/len(sales_data):,.0f}円')\n    \n    # グラフ作成\n    print('\\n📈 グラフを作成中...')\n    \n    # 売上推移グラフ\n    plt.figure(figsize=(10, 6))\n    plt.plot(months, sales_data, marker='o', linewidth=2, markersize=8)\n    plt.title('月次売上推移', fontsize=16, fontweight='bold')\n    plt.xlabel('月', fontsize=12)\n    plt.ylabel('売上（円）', fontsize=12)\n    plt.grid(True, alpha=0.3)\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.savefig('sales_trend.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    # 商品別売上円グラフ\n    plt.figure(figsize=(8, 8))\n    plt.pie(product_sales.values(), labels=product_sales.keys(), autopct='%1.1f%%', startangle=90)\n    plt.title('商品別売上構成', fontsize=16, fontweight='bold')\n    plt.axis('equal')\n    plt.savefig('product_sales.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    # 顧客データ棒グラフ\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n    \n    # 新規・既存顧客数\n    x = np.arange(len(months))\n    width = 0.35\n    ax1.bar(x - width/2, customer_data['新規顧客'], width, label='新規顧客', color='skyblue')\n    ax1.bar(x + width/2, customer_data['既存顧客'], width, label='既存顧客', color='lightcoral')\n    ax1.set_title('顧客数推移', fontweight='bold')\n    ax1.set_xlabel('月')\n    ax1.set_ylabel('顧客数')\n    ax1.set_xticks(x)\n    ax1.set_xticklabels(months)\n    ax1.legend()\n    ax1.grid(True, alpha=0.3)\n    \n    # リピート率\n    ax2.plot(months, customer_data['リピート率'], marker='s', color='green', linewidth=2)\n    ax2.set_title('リピート率推移', fontweight='bold')\n    ax2.set_xlabel('月')\n    ax2.set_ylabel('リピート率（%）')\n    ax2.set_xticklabels(months, rotation=45)\n    ax2.grid(True, alpha=0.3)\n    \n    plt.tight_layout()\n    plt.savefig('customer_analysis.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    # PDF作成\n    print('\\n📄 PDFを作成中...')\n    filename = f'presentation_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.pdf'\n    doc = SimpleDocTemplate(filename, pagesize=A4)\n    story = []\n    \n    # スタイル設定\n    styles = getSampleStyleSheet()\n    title_style = ParagraphStyle(\n        'CustomTitle',\n        parent=styles['Heading1'],\n        fontSize=24,\n        spaceAfter=30,\n        alignment=1,  # 中央揃え\n        textColor=colors.darkblue\n    )\n    \n    subtitle_style = ParagraphStyle(\n        'CustomSubtitle',\n        parent=styles['Heading2'],\n        fontSize=18,\n        spaceAfter=20,\n        alignment=1,\n        textColor=colors.darkblue\n    )\n    \n    # スライド1: タイトル\n    story.append(Paragraph('2024年上半期 売上レポート', title_style))\n    story.append(Spacer(1, 50))\n    story.append(Paragraph(f'作成日: {datetime.now().strftime(\"%Y年%m月%d日\")}', styles['Normal']))\n    story.append(Paragraph('営業部', styles['Normal']))\n    story.append(PageBreak())\n    \n    # スライド2: 概要\n    story.append(Paragraph('📊 上半期の概要', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    summary_data = [\n        ['項目', '数値', '前年同期比'],\n        ['総売上', f'{sum(sales_data):,}円', '+12.5%'],\n        ['平均月売上', f'{sum(sales_data)/len(sales_data):,.0f}円', '+8.3%'],\n        ['新規顧客数', f'{sum(customer_data[\"新規顧客\"]):,}人', '+15.2%'],\n        ['平均リピート率', f'{sum(customer_data[\"リピート率\"])/len(customer_data[\"リピート率\"]):.1f}%', '+3.1%']\n    ]\n    \n    summary_table = Table(summary_data, colWidths=[2*inch, 2*inch, 1.5*inch])\n    summary_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, -1), 12),\n        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    story.append(summary_table)\n    story.append(PageBreak())\n    \n    # スライド3: 売上推移\n    story.append(Paragraph('📈 月次売上推移', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    # 売上推移グラフを挿入\n    story.append(Image('sales_trend.png', width=6*inch, height=4*inch))\n    story.append(Spacer(1, 20))\n    \n    # 売上データテーブル\n    sales_table_data = [['月', '売上', '前月比']]\n    for i, (month, sales) in enumerate(zip(months, sales_data)):\n        if i == 0:\n            change = '-' \n        else:\n            change = f'{((sales / sales_data[i-1] - 1) * 100):+.1f}%'\n        sales_table_data.append([month, f'{sales:,}円', change])\n    \n    sales_table = Table(sales_table_data, colWidths=[1.5*inch, 2*inch, 1.5*inch])\n    sales_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, -1), 10),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    story.append(sales_table)\n    story.append(PageBreak())\n    \n    # スライド4: 商品分析\n    story.append(Paragraph('🛍️ 商品別売上分析', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    # 商品別売上グラフを挿入\n    story.append(Image('product_sales.png', width=5*inch, height=4*inch))\n    story.append(Spacer(1, 20))\n    \n    # 商品別売上テーブル\n    product_table_data = [['商品名', '売上', '構成比']]\n    total_product_sales = sum(product_sales.values())\n    for product, sales in product_sales.items():\n        percentage = (sales / total_product_sales) * 100\n        product_table_data.append([product, f'{sales:,}円', f'{percentage:.1f}%'])\n    \n    product_table = Table(product_table_data, colWidths=[2*inch, 2*inch, 1.5*inch])\n    product_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, -1), 10),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    story.append(product_table)\n    story.append(PageBreak())\n    \n    # スライド5: 顧客分析\n    story.append(Paragraph('👥 顧客分析', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    # 顧客分析グラフを挿入\n    story.append(Image('customer_analysis.png', width=6*inch, height=3*inch))\n    story.append(Spacer(1, 20))\n    \n    # 顧客データテーブル\n    customer_table_data = [['月', '新規顧客', '既存顧客', 'リピート率']]\n    for i, month in enumerate(months):\n        customer_table_data.append([\n            month,\n            f'{customer_data[\"新規顧客\"][i]}人',\n            f'{customer_data[\"既存顧客\"][i]}人',\n            f'{customer_data[\"リピート率\"][i]}%'\n        ])\n    \n    customer_table = Table(customer_table_data, colWidths=[1*inch, 1.5*inch, 1.5*inch, 1.5*inch])\n    customer_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.lightcoral),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, -1), 9),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    story.append(customer_table)\n    story.append(PageBreak())\n    \n    # スライド6: 課題と対策\n    story.append(Paragraph('⚠️ 課題と対策', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    issues_data = [\n        ['課題', '現状', '対策'],\n        ['商品Aの売上低迷', '前年比-5%', 'プロモーション強化'],\n        ['新規顧客獲得コスト増', '前年比+20%', 'マーケティング効率化'],\n        ['リピート率の地域差', '最大15%差', '地域別施策実施']\n    ]\n    \n    issues_table = Table(issues_data, colWidths=[2*inch, 2*inch, 2*inch])\n    issues_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.orange),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, -1), 10),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    story.append(issues_table)\n    story.append(PageBreak())\n    \n    # スライド7: 今後の方針\n    story.append(Paragraph('🎯 今後の方針', subtitle_style))\n    story.append(Spacer(1, 20))\n    \n    strategy_items = [\n        '• 商品Aの売上回復のため、新プロモーションを実施',\n        '• デジタルマーケティングを強化し、新規顧客獲得コストを削減',\n        '• 地域別の顧客分析を深化させ、リピート率向上施策を実施',\n        '• 下半期売上目標: 前年比+15%達成を目指す',\n        '• 新商品の開発・投入を検討' \n    ]\n    \n    for item in strategy_items:\n        story.append(Paragraph(item, styles['Normal']))\n        story.append(Spacer(1, 10))\n    \n    # PDFを生成\n    doc.build(story)\n    \n    print(f'✅ プレゼン資料作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'スライド数: 7枚')\n    print(f'グラフ数: 3個')\n    \n    print('\\n📊 プレゼン内容:')\n    print('• スライド1: タイトル')\n    print('• スライド2: 上半期の概要')\n    print('• スライド3: 月次売上推移')\n    print('• スライド4: 商品別売上分析')\n    print('• スライド5: 顧客分析')\n    print('• スライド6: 課題と対策')\n    print('• スライド7: 今後の方針')\n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• データの正確性を確認してください')\n    print('• プレゼン内容は事前に確認してください')\n    print('• グラフの見やすさを確認してください')\n    print('• 聴衆に合わせて内容を調整してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• reportlab、matplotlib、pandasライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• グラフファイルが正しく作成されているか確認してください')\n\nprint('\\n=== プレゼン資料自動生成完了 ===')",
        "libraries": "reportlab",
        "explanation": "プレゼン資料を自動で生成。会議準備も楽に。",
        "benefits": ["資料作成が楽", "PDF化", "時短"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonでプレゼン資料自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. CSVファイルのデータを読み込む\n3. プレゼン資料の基本構成を設定する\n4. グラフや表を含むスライドを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（売上データ、顧客データ）\n出力形式: PDFファイル（presentation.pdf）\n資料項目: タイトル、概要、データ分析、グラフ、結論\n\nコピペ用プロンプト:\nPythonでプレゼン資料自動生成のコードを作成してください。reportlabライブラリを使ってCSVファイルのデータを読み込み、プレゼン資料の基本構成を設定してグラフや表を含むスライドを作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 46,
        "category": "データ処理・分析",
        "number": "46/100",
        "title": "競合分析自動化",
        "desc": "競合情報を自動で収集・分析",
        "how_to": "Webスクレイピングで競合情報を自動収集し、分析します。",
        "sample_code": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom datetime import datetime\nimport time\nimport re\n\nprint('=== 競合分析自動化（デモ版） ===')\nprint('競合企業の情報を自動で収集・分析します。')\nprint('\\n🔍 機能:')\nprint('• 競合サイトの基本情報収集')\nprint('• 商品・サービス情報の抽出')\nprint('• 価格情報の比較')\nprint('• 分析レポートの生成')\nprint('\\n⚠️ 注意事項:')\nprint('• Webスクレイピングは利用規約を遵守してください')\nprint('• 過度なアクセスは避けてください')\nprint('• 収集した情報は適切に管理してください')\nprint('• robots.txtを確認してください')\n\ntry:\n    # デモ用のサンプル競合データ\n    print('\\n📂 デモ用のサンプル競合データを処理中...')\n    \n    # サンプル競合企業データ\n    competitors = [\n        {\n            'name': '競合企業A',\n            'url': 'https://competitor-a.com',\n            'products': ['Webサイト制作', 'システム開発', '保守サービス'],\n            'prices': {'Webサイト制作': '50万円〜', 'システム開発': '100万円〜', '保守サービス': '月5万円〜'},\n            'features': ['レスポンシブ対応', 'SEO対策', '24時間サポート'],\n            'strengths': ['豊富な実績', '技術力が高い', 'サポートが充実'],\n            'weaknesses': ['価格が高い', '対応が遅い', '柔軟性に欠ける']\n        },\n        {\n            'name': '競合企業B',\n            'url': 'https://competitor-b.com',\n            'products': ['ECサイト構築', 'アプリ開発', 'クラウドサービス'],\n            'prices': {'ECサイト構築': '30万円〜', 'アプリ開発': '80万円〜', 'クラウドサービス': '月3万円〜'},\n            'features': ['モバイルファースト', 'AI機能搭載', 'セキュリティ強化'],\n            'strengths': ['価格が安い', '最新技術', '開発速度が速い'],\n            'weaknesses': ['実績が少ない', 'サポートが限定的', '品質にばらつき']\n        },\n        {\n            'name': '競合企業C',\n            'url': 'https://competitor-c.com',\n            'products': ['Webデザイン', 'マーケティング支援', 'コンサルティング'],\n            'prices': {'Webデザイン': '20万円〜', 'マーケティング支援': '月10万円〜', 'コンサルティング': '時給1万円〜'},\n            'features': ['デザイン重視', 'マーケティング連携', '戦略立案'],\n            'strengths': ['デザインが美しい', 'マーケティング力', '戦略的思考'],\n            'weaknesses': ['技術力が低い', '開発が遅い', 'コストが高い']\n        }\n    ]\n    \n    def analyze_competitor(competitor):\n        \"\"\"競合企業の情報を分析する関数\"\"\"\n        \n        analysis = {\n            '企業名': competitor['name'],\n            'URL': competitor['url'],\n            '主要サービス数': len(competitor['products']),\n            '平均価格帯': '中位',  # デモ用\n            '技術力評価': '高',    # デモ用\n            'サポート評価': '中',   # デモ用\n            '価格競争力': '中',     # デモ用\n            '総合評価': 'B'        # デモ用\n        }\n        \n        return analysis\n    \n    def extract_website_info(url):\n        \"\"\"Webサイトの基本情報を抽出する関数（デモ用）\"\"\"\n        \n        # 実際の使用時は以下のコードを使用\n        # try:\n        #     headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}\n        #     response = requests.get(url, headers=headers, timeout=10)\n        #     soup = BeautifulSoup(response.text, 'html.parser')\n        #     \n        #     title = soup.find('title').text if soup.find('title') else 'タイトルなし'\n        #     description = soup.find('meta', {'name': 'description'})\n        #     description = description['content'] if description else '説明なし'\n        #     \n        #     return {\n        #         'title': title,\n        #         'description': description,\n        #         'status': 'success'\n        #     }\n        # except Exception as e:\n        #     return {\n        #         'title': 'エラー',\n        #         'description': str(e),\n        #         'status': 'error'\n        #     }\n        \n        # デモ用の戻り値\n        return {\n            'title': f'{url} - 競合企業サイト',\n            'description': '競合企業のWebサイトです。',\n            'status': 'success'\n        }\n    \n    # 競合分析実行\n    print('\\n🔍 競合分析を実行中...')\n    \n    analysis_results = []\n    detailed_analysis = []\n    \n    for competitor in competitors:\n        print(f'\\n📊 分析中: {competitor[\"name\"]}')\n        \n        # 基本分析\n        basic_analysis = analyze_competitor(competitor)\n        analysis_results.append(basic_analysis)\n        \n        # Webサイト情報取得\n        website_info = extract_website_info(competitor['url'])\n        \n        # 詳細分析\n        detailed_info = {\n            '企業名': competitor['name'],\n            'URL': competitor['url'],\n            'Webサイトタイトル': website_info['title'],\n            '主要サービス': ', '.join(competitor['products']),\n            '価格情報': ', '.join([f'{k}: {v}' for k, v in competitor['prices'].items()]),\n            '特徴': ', '.join(competitor['features']),\n            '強み': ', '.join(competitor['strengths']),\n            '弱み': ', '.join(competitor['weaknesses']),\n            '分析日時': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        detailed_analysis.append(detailed_info)\n        \n        print(f'✓ 主要サービス: {len(competitor[\"products\"])}件')\n        print(f'✓ 価格帯: {basic_analysis[\"平均価格帯\"]}')\n        print(f'✓ 総合評価: {basic_analysis[\"総合評価\"]}')\n    \n    # 比較分析\n    print('\\n📈 比較分析結果:')\n    \n    # 価格比較\n    print('\\n💰 価格比較:') \n    all_products = set()\n    for competitor in competitors:\n        all_products.update(competitor['products'])\n    \n    price_comparison = {}\n    for product in all_products:\n        prices = []\n        for competitor in competitors:\n            if product in competitor['prices']:\n                prices.append(competitor['prices'][product])\n        if prices:\n            price_comparison[product] = prices\n            print(f'• {product}: {len(prices)}社で提供') \n    \n    # 特徴比較\n    print('\\n🎯 特徴比較:') \n    all_features = set()\n    for competitor in competitors:\n        all_features.update(competitor['features'])\n    \n    feature_comparison = {}\n    for feature in all_features:\n        count = sum(1 for competitor in competitors if feature in competitor['features'])\n        feature_comparison[feature] = count\n        print(f'• {feature}: {count}社で提供') \n    \n    # 強み・弱み分析\n    print('\\n💪 強み・弱み分析:') \n    all_strengths = []\n    all_weaknesses = []\n    \n    for competitor in competitors:\n        all_strengths.extend(competitor['strengths'])\n        all_weaknesses.extend(competitor['weaknesses'])\n    \n    # 頻出キーワード分析\n    from collections import Counter\n    strength_counter = Counter(all_strengths)\n    weakness_counter = Counter(all_weaknesses)\n    \n    print('\\n【主要な強み】') \n    for strength, count in strength_counter.most_common(5):\n        print(f'• {strength}: {count}社') \n    \n    print('\\n【主要な弱み】') \n    for weakness, count in weakness_counter.most_common(5):\n        print(f'• {weakness}: {count}社') \n    \n    # 結果の保存\n    print('\\n💾 結果を保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    \n    # 基本分析結果の保存\n    basic_df = pd.DataFrame(analysis_results)\n    basic_df.to_excel(f'competitor_analysis_basic_{timestamp}.xlsx', index=False)\n    \n    # 詳細分析結果の保存\n    detailed_df = pd.DataFrame(detailed_analysis)\n    detailed_df.to_excel(f'competitor_analysis_detailed_{timestamp}.xlsx', index=False)\n    \n    # 比較分析結果の保存\n    comparison_data = {\n        '分析項目': ['分析対象企業数', '主要サービス数', '価格帯の幅', '特徴の多様性'],\n        '結果': [len(competitors), len(all_products), '低〜高', '高'],\n        '分析日時': [timestamp, timestamp, timestamp, timestamp]\n    }\n    comparison_df = pd.DataFrame(comparison_data)\n    comparison_df.to_excel(f'competitor_comparison_{timestamp}.xlsx', index=False)\n    \n    print(f'✅ 競合分析完了！')\n    print(f'• 基本分析: competitor_analysis_basic_{timestamp}.xlsx')\n    print(f'• 詳細分析: competitor_analysis_detailed_{timestamp}.xlsx')\n    print(f'• 比較分析: competitor_comparison_{timestamp}.xlsx')\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 分析対象企業数: {len(competitors)}社') \n    print(f'• 主要サービス数: {len(all_products)}種類') \n    print(f'• 最も多い特徴: {max(feature_comparison.items(), key=lambda x: x[1])[0]}') \n    print(f'• 最も多い強み: {strength_counter.most_common(1)[0][0]}') \n    print(f'• 最も多い弱み: {weakness_counter.most_common(1)[0][0]}') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• Webスクレイピングは利用規約を遵守してください')\n    print('• 過度なアクセスは避けてください')\n    print('• 収集した情報は適切に管理してください')\n    print('• robots.txtを確認してください')\n    print('• 定期的に情報を更新してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• requests、BeautifulSoup、pandasライブラリがインストールされているか確認してください')\n    print('• インターネット接続を確認してください')\n    print('• URLが正しいか確認してください')\n    print('• アクセス制限がないか確認してください')\n\nprint('\\n=== 競合分析自動化完了 ===')",
        "libraries": "requests、BeautifulSoup",
        "explanation": "競合情報を自動で収集。市場分析も楽に。",
        "benefits": ["情報収集が楽", "自動化", "市場分析に活用"],
        "time_required": "1時間〜2時間",
        "difficulty": "中級",
        "ai_prompt": "Pythonで競合分析自動化のコードを作成してください。以下の条件でお願いします：\n\n1. requestsとBeautifulSoupライブラリを使う\n2. 指定した競合サイトの情報を収集する\n3. 商品情報、価格、特徴を抽出する\n4. 競合分析レポートをExcelで作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n対象サイト: 競合企業のWebサイト\n出力形式: Excelファイル（competitor_analysis.xlsx）\n分析項目: 商品情報、価格、特徴、強み・弱み\n\nコピペ用プロンプト:\nPythonで競合分析自動化のコードを作成してください。requestsとBeautifulSoupライブラリを使って指定した競合サイトの情報を収集し、商品情報、価格、特徴を抽出して競合分析レポートをExcelで作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 47,
        "category": "スタッフ管理",
        "number": "47/100",
        "title": "社員研修計画自動化",
        "desc": "社員のスキルに基づいて研修計画を自動生成",
        "how_to": "社員のスキルデータから研修計画を自動で生成します。",
        "sample_code": "import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport calendar\n\nprint('=== 社員研修計画自動化（デモ版） ===')\nprint('社員のスキルデータから研修計画を自動生成します。')\nprint('\\n📚 機能:')\nprint('• スキルレベル分析')\nprint('• 研修優先度設定')\nprint('• スケジュール自動生成')\nprint('• 研修効果予測')\nprint('\\n⚠️ 注意事項:')\nprint('• 個人情報の取り扱いには十分注意してください')\nprint('• 研修内容は社員と相談して決定してください')\nprint('• 研修効果は定期的に評価してください')\n\ntry:\n    # デモ用のサンプル社員スキルデータ\n    print('\\n📂 デモ用のサンプル社員スキルデータを作成中...')\n    \n    # 社員データ\n    employees = [\n        {'社員ID': 'E001', '氏名': '田中太郎', '部署': '営業部', '入社年': 2020, '役職': '主任'},\n        {'社員ID': 'E002', '氏名': '佐藤花子', '部署': '開発部', '入社年': 2019, '役職': '課長'},\n        {'社員ID': 'E003', '氏名': '鈴木一郎', '部署': '営業部', '入社年': 2022, '役職': '一般'},\n        {'社員ID': 'E004', '氏名': '高橋美咲', '部署': '開発部', '入社年': 2021, '役職': '一般'},\n        {'社員ID': 'E005', '氏名': '伊藤健太', '部署': '総務部', '入社年': 2020, '役職': '主任'},\n        {'社員ID': 'E006', '氏名': '渡辺恵子', '部署': '営業部', '入社年': 2023, '役職': '一般'},\n        {'社員ID': 'E007', '氏名': '山田次郎', '部署': '開発部', '入社年': 2018, '役職': '部長'},\n        {'社員ID': 'E008', '氏名': '中村由美', '部署': '総務部', '入社年': 2021, '役職': '一般'}\n    ]\n    \n    # スキルデータ\n    skills_data = [\n        # 田中太郎\n        {'社員ID': 'E001', 'スキル名': '営業スキル', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E001', 'スキル名': 'Excel', 'スキルレベル': '初級', '重要度': '中', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E001', 'スキル名': 'プレゼンテーション', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        \n        # 佐藤花子\n        {'社員ID': 'E002', 'スキル名': 'Python', 'スキルレベル': '上級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E002', 'スキル名': 'プロジェクト管理', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E002', 'スキル名': 'リーダーシップ', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        \n        # 鈴木一郎\n        {'社員ID': 'E003', 'スキル名': '営業スキル', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E003', 'スキル名': 'Excel', 'スキルレベル': '初級', '重要度': '中', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E003', 'スキル名': 'コミュニケーション', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        \n        # 高橋美咲\n        {'社員ID': 'E004', 'スキル名': 'Python', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E004', 'スキル名': 'データベース', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E004', 'スキル名': 'Git', 'スキルレベル': '初級', '重要度': '中', '最終評価日': '2024-01-15'},\n        \n        # 伊藤健太\n        {'社員ID': 'E005', 'スキル名': 'Excel', 'スキルレベル': '上級', '重要度': '中', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E005', 'スキル名': '労務管理', 'スキルレベル': '中級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E005', 'スキル名': '法務知識', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        \n        # 渡辺恵子\n        {'社員ID': 'E006', '氏名': '営業スキル', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E006', '氏名': 'Excel', 'スキルレベル': '初級', '重要度': '中', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E006', '氏名': '電話応対', 'スキルレベル': '初級', '重要度': '中', '最終評価日': '2024-01-15'},\n        \n        # 山田次郎\n        {'社員ID': 'E007', 'スキル名': 'Python', 'スキルレベル': '上級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E007', 'スキル名': 'アーキテクチャ設計', 'スキルレベル': '上級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E007', 'スキル名': 'マネジメント', 'スキルレベル': '上級', '重要度': '高', '最終評価日': '2024-01-15'},\n        \n        # 中村由美\n        {'社員ID': 'E008', 'スキル名': 'Excel', 'スキルレベル': '中級', '重要度': '中', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E008', 'スキル名': '経理', 'スキルレベル': '初級', '重要度': '高', '最終評価日': '2024-01-15'},\n        {'社員ID': 'E008', 'スキル名': '電話応対', 'スキルレベル': '中級', '重要度': '中', '最終評価日': '2024-01-15'}\n    ]\n    \n    # 研修コースデータ\n    training_courses = {\n        '営業スキル': {\n            '初級': {'コース名': '営業基礎研修', '期間': '2日間', '費用': 50000, '優先度': '高'},\n            '中級': {'コース名': '営業応用研修', '期間': '3日間', '費用': 80000, '優先度': '中'}\n        },\n        'Excel': {\n            '初級': {'コース名': 'Excel基礎研修', '期間': '1日間', '費用': 30000, '優先度': '中'},\n            '中級': {'コース名': 'Excel応用研修', '期間': '2日間', '費用': 50000, '優先度': '中'}\n        },\n        'Python': {\n            '初級': {'コース名': 'Python基礎研修', '期間': '3日間', '費用': 100000, '優先度': '高'},\n            '中級': {'コース名': 'Python応用研修', '期間': '5日間', '費用': 150000, '優先度': '高'}\n        },\n        'データベース': {\n            '初級': {'コース名': 'データベース基礎研修', '期間': '2日間', '費用': 60000, '優先度': '高'}\n        },\n        'プロジェクト管理': {\n            '中級': {'コース名': 'プロジェクト管理研修', '期間': '3日間', '費用': 80000, '優先度': '高'}\n        },\n        'リーダーシップ': {\n            '中級': {'コース名': 'リーダーシップ研修', '期間': '2日間', '費用': 70000, '優先度': '高'}\n        },\n        'コミュニケーション': {\n            '初級': {'コース名': 'コミュニケーション基礎研修', '期間': '1日間', '費用': 40000, '優先度': '中'}\n        },\n        'プレゼンテーション': {\n            '中級': {'コース名': 'プレゼンテーション研修', '期間': '2日間', '費用': 60000, '優先度': '中'}\n        },\n        '経理': {\n            '初級': {'コース名': '経理基礎研修', '期間': '2日間', '費用': 50000, '優先度': '高'}\n        },\n        '法務知識': {\n            '初級': {'コース名': '法務基礎研修', '期間': '1日間', '費用': 40000, '優先度': '高'}\n        }\n    }\n    \n    # データフレーム作成\n    employees_df = pd.DataFrame(employees)\n    skills_df = pd.DataFrame(skills_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了')\n    print(f'• 社員数: {len(employees)}名')\n    print(f'• スキル評価数: {len(skills_data)}件')\n    print(f'• 研修コース数: {len(training_courses)}種類')\n    \n    # スキル分析\n    print('\\n=== 📈 スキル分析 ===')\n    \n    # スキルレベル別集計\n    level_counts = skills_df['スキルレベル'].value_counts()\n    print('\\n【スキルレベル別集計】') \n    for level, count in level_counts.items():\n        percentage = (count / len(skills_df)) * 100\n        print(f'• {level}: {count}件 ({percentage:.1f}%)')\n    \n    # 重要度別集計\n    importance_counts = skills_df['重要度'].value_counts()\n    print('\\n【重要度別集計】') \n    for importance, count in importance_counts.items():\n        percentage = (count / len(skills_df)) * 100\n        print(f'• {importance}: {count}件 ({percentage:.1f}%)')\n    \n    # 部署別スキル分析\n    print('\\n=== 🏢 部署別スキル分析 ===')\n    \n    # 社員とスキルを結合\n    merged_df = skills_df.merge(employees_df, on='社員ID', how='left')\n    \n    dept_analysis = merged_df.groupby(['部署', 'スキルレベル']).size().unstack(fill_value=0)\n    print('\\n【部署別スキルレベル分布】') \n    print(dept_analysis)\n    \n    # 研修対象者の特定\n    print('\\n=== 🎯 研修対象者の特定 ===')\n    \n    # 初級スキルを持つ社員を特定\n    low_skill_employees = merged_df[merged_df['スキルレベル'] == '初級'].copy()\n    \n    # 重要度を数値化\n    importance_scores = {'高': 3, '中': 2, '低': 1}\n    low_skill_employees['重要度スコア'] = low_skill_employees['重要度'].map(importance_scores)\n    \n    # 研修優先度を計算（重要度 × 役職係数）\n    position_scores = {'部長': 1.5, '課長': 1.3, '主任': 1.1, '一般': 1.0}\n    low_skill_employees['役職係数'] = low_skill_employees['役職'].map(position_scores)\n    low_skill_employees['研修優先度'] = low_skill_employees['重要度スコア'] * low_skill_employees['役職係数']\n    \n    # 優先度順にソート\n    training_targets = low_skill_employees.sort_values('研修優先度', ascending=False)\n    \n    print(f'\\n研修対象者数: {len(training_targets)}名')\n    print('\\n【研修優先度上位5名】') \n    for i, (_, row) in enumerate(training_targets.head().iterrows(), 1):\n        print(f'{i}. {row[\"氏名\"]} ({row[\"部署\"]}) - {row[\"スキル名\"]} (優先度: {row[\"研修優先度\"]:.1f})')\n    \n    # 研修計画の作成\n    print('\\n=== 📅 研修計画の作成 ===')\n    \n    # 研修スケジュールを生成\n    current_date = datetime.now()\n    training_plans = []\n    \n    for _, row in training_targets.iterrows():\n        skill_name = row['スキル名']\n        skill_level = row['スキルレベル']\n        \n        # 該当する研修コースを検索\n        if skill_name in training_courses and skill_level in training_courses[skill_name]:\n            course = training_courses[skill_name][skill_level]\n            \n            # 研修日を設定（2週間後から開始）\n            training_start = current_date + timedelta(weeks=2)\n            \n            plan = {\n                '社員ID': row['社員ID'],\n                '氏名': row['氏名'],\n                '部署': row['部署'],\n                '役職': row['役職'],\n                'スキル名': skill_name,\n                '現在レベル': skill_level,\n                '目標レベル': '中級' if skill_level == '初級' else '上級',\n                '研修コース名': course['コース名'],\n                '研修期間': course['期間'],\n                '研修費用': course['費用'],\n                '研修優先度': row['研修優先度'],\n                '開始予定日': training_start.strftime('%Y-%m-%d'),\n                '終了予定日': (training_start + timedelta(days=course['期間'].split('日')[0])).strftime('%Y-%m-%d')\n            }\n            \n            training_plans.append(plan)\n    \n    # 研修計画を優先度順にソート\n    training_plans_df = pd.DataFrame(training_plans)\n    training_plans_df = training_plans_df.sort_values('研修優先度', ascending=False)\n    \n    print(f'\\n研修計画作成完了: {len(training_plans)}件')\n    \n    # 研修効果予測\n    print('\\n=== 📊 研修効果予測 ===')\n    \n    total_cost = training_plans_df['研修費用'].sum()\n    avg_priority = training_plans_df['研修優先度'].mean()\n    \n    # 効果予測（デモ用）\n    expected_improvement = len(training_plans) * 0.8  # 80%の改善率\n    roi_estimate = (expected_improvement * 100000) / total_cost  # 仮想的なROI計算\n    \n    print(f'• 総研修費用: {total_cost:,}円')\n    print(f'• 平均優先度: {avg_priority:.1f}')\n    print(f'• 期待改善スキル数: {expected_improvement:.0f}件')\n    print(f'• 推定ROI: {roi_estimate:.1f}倍')\n    \n    # 結果の保存\n    print('\\n💾 結果を保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    \n    # 研修計画の保存\n    training_plans_df.to_excel(f'training_plan_{timestamp}.xlsx', index=False)\n    \n    # スキル分析結果の保存\n    skill_analysis = {\n        '分析項目': ['総社員数', '研修対象者数', '初級スキル数', '中級スキル数', '上級スキル数', '総研修費用'],\n        '数値': [len(employees), len(training_targets), level_counts.get('初級', 0), level_counts.get('中級', 0), level_counts.get('上級', 0), total_cost],\n        '分析日時': [timestamp] * 6\n    }\n    skill_analysis_df = pd.DataFrame(skill_analysis)\n    skill_analysis_df.to_excel(f'skill_analysis_{timestamp}.xlsx', index=False)\n    \n    print(f'✅ 研修計画作成完了！')\n    print(f'• 研修計画: training_plan_{timestamp}.xlsx')\n    print(f'• スキル分析: skill_analysis_{timestamp}.xlsx')\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 最も多い初級スキル: {low_skill_employees[\"スキル名\"].mode().iloc[0]}') \n    print(f'• 最も高い優先度: {training_plans_df[\"研修優先度\"].max():.1f}') \n    print(f'• 最も高額な研修: {training_plans_df[\"研修費用\"].max():,}円') \n    print(f'• 研修対象部署: {training_plans_df[\"部署\"].nunique()}部署') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 個人情報の取り扱いには十分注意してください')\n    print('• 研修内容は社員と相談して決定してください')\n    print('• 研修効果は定期的に評価してください')\n    print('• 研修スケジュールは業務に支障がないよう調整してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、numpyライブラリがインストールされているか確認してください')\n    print('• CSVファイルの形式を確認してください')\n    print('• データの文字エンコーディングを確認してください')\n\nprint('\\n=== 社員研修計画自動化完了 ===')",
        "libraries": "pandas",
        "explanation": "研修計画を自動で生成。人材育成も効率的に。",
        "benefits": ["人材育成が楽", "Excel化", "効率的"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員研修計画自動化のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの社員スキルデータを読み込む\n3. スキルレベルが低い項目を特定する\n4. 研修優先度とスケジュールを設定する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（社員名、スキル名、スキルレベル）\n出力形式: Excelファイル（training_plan.xlsx）\n計画項目: 研修科目、対象者、優先度、スケジュール\n\nコピペ用プロンプト:\nPythonで社員研修計画自動化のコードを作成してください。pandasライブラリを使ってCSVファイルの社員スキルデータを読み込み、スキルレベルが低い項目を特定して研修優先度とスケジュールを設定するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    # ... ここにid:48〜100のツールを順次追加 ...
]

EXTRA_TOOLS += [
    {
        "id": 48,
        "category": "スタッフ管理",
        "number": "48/100",
        "title": "社員名簿自動作成",
        "desc": "社員情報を自動で名簿化・Excel保存",
        "how_to": "CSVや手入力データから社員名簿を自動でExcel化します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime\nimport os\n\nprint('=== 社員名簿自動作成（デモ版） ===')\nprint('社員情報を自動で名簿化・Excel保存します。')\nprint('\\n👥 機能:')\nprint('• 社員情報の管理')\nprint('• 部署別・役職別の整理')\nprint('• 連絡先情報の管理')\nprint('• 名簿の自動更新')\nprint('\\n⚠️ 注意事項:')\nprint('• 個人情報の取り扱いには十分注意してください')\nprint('• 名簿の配布先を適切に管理してください')\nprint('• 定期的に情報を更新してください')\n\ntry:\n    # デモ用のサンプル社員データ\n    print('\\n📂 デモ用のサンプル社員データを作成中...')\n    \n    # サンプル社員データ\n    employees_data = [\n        {\n            '社員ID': 'E001',\n            '氏名': '田中太郎',\n            'フリガナ': 'タナカタロウ',\n            '部署': '営業部',\n            '役職': '主任',\n            '入社日': '2020-04-01',\n            '生年月日': '1990-05-15',\n            'メールアドレス': 'tanaka@company.co.jp',\n            '内線番号': '1001',\n            '携帯電話': '090-1234-5678',\n            '住所': '東京都渋谷区渋谷1-1-1',\n            '緊急連絡先': '田中花子（妻）: 090-8765-4321'\n        },\n        {\n            '社員ID': 'E002',\n            '氏名': '佐藤花子',\n            'フリガナ': 'サトウハナコ',\n            '部署': '開発部',\n            '役職': '課長',\n            '入社日': '2019-04-01',\n            '生年月日': '1988-12-03',\n            'メールアドレス': 'sato@company.co.jp',\n            '内線番号': '2001',\n            '携帯電話': '080-2345-6789',\n            '住所': '神奈川県横浜市西区みなとみらい1-1-1',\n            '緊急連絡先': '佐藤一郎（夫）: 080-7654-3210'\n        },\n        {\n            '社員ID': 'E003',\n            '氏名': '鈴木一郎',\n            'フリガナ': 'スズキイチロウ',\n            '部署': '営業部',\n            '役職': '一般',\n            '入社日': '2022-04-01',\n            '生年月日': '1995-08-20',\n            'メールアドレス': 'suzuki@company.co.jp',\n            '内線番号': '1002',\n            '携帯電話': '070-3456-7890',\n            '住所': '埼玉県さいたま市大宮区大宮1-1-1',\n            '緊急連絡先': '鈴木美咲（母）: 070-6543-2109'\n        },\n        {\n            '社員ID': 'E004',\n            '氏名': '高橋美咲',\n            'フリガナ': 'タカハシミサキ',\n            '部署': '開発部',\n            '役職': '一般',\n            '入社日': '2021-04-01',\n            '生年月日': '1993-03-10',\n            'メールアドレス': 'takahashi@company.co.jp',\n            '内線番号': '2002',\n            '携帯電話': '090-4567-8901',\n            '住所': '千葉県千葉市中央区千葉1-1-1',\n            '緊急連絡先': '高橋健太（父）: 090-5432-1098'\n        },\n        {\n            '社員ID': 'E005',\n            '氏名': '伊藤健太',\n            'フリガナ': 'イトウケンタ',\n            '部署': '総務部',\n            '役職': '主任',\n            '入社日': '2020-04-01',\n            '生年月日': '1991-11-25',\n            'メールアドレス': 'ito@company.co.jp',\n            '内線番号': '3001',\n            '携帯電話': '080-5678-9012',\n            '住所': '東京都新宿区新宿1-1-1',\n            '緊急連絡先': '伊藤恵子（妻）: 080-4321-0987'\n        },\n        {\n            '社員ID': 'E006',\n            '氏名': '渡辺恵子',\n            'フリガナ': 'ワタナベケイコ',\n            '部署': '営業部',\n            '役職': '一般',\n            '入社日': '2023-04-01',\n            '生年月日': '1997-01-30',\n            'メールアドレス': 'watanabe@company.co.jp',\n            '内線番号': '1003',\n            '携帯電話': '070-6789-0123',\n            '住所': '東京都品川区品川1-1-1',\n            '緊急連絡先': '渡辺次郎（父）: 070-3210-9876'\n        },\n        {\n            '社員ID': 'E007',\n            '氏名': '山田次郎',\n            'フリガナ': 'ヤマダジロウ',\n            '部署': '開発部',\n            '役職': '部長',\n            '入社日': '2018-04-01',\n            '生年月日': '1985-07-12',\n            'メールアドレス': 'yamada@company.co.jp',\n            '内線番号': '2000',\n            '携帯電話': '090-7890-1234',\n            '住所': '東京都港区港南1-1-1',\n            '緊急連絡先': '山田由美（妻）: 090-2109-8765'\n        },\n        {\n            '社員ID': 'E008',\n            '氏名': '中村由美',\n            'フリガナ': 'ナカムラユミ',\n            '部署': '総務部',\n            '役職': '一般',\n            '入社日': '2021-04-01',\n            '生年月日': '1994-09-05',\n            'メールアドレス': 'nakamura@company.co.jp',\n            '内線番号': '3002',\n            '携帯電話': '080-8901-2345',\n            '住所': '東京都中野区中野1-1-1',\n            '緊急連絡先': '中村一郎（父）: 080-1098-7654'\n        }\n    ]\n    \n    # データフレーム作成\n    df = pd.DataFrame(employees_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(df)}名')\n    \n    # 基本統計\n    print('\\n=== 📈 基本統計 ===')\n    print(f'• 総社員数: {len(df)}名')\n    print(f'• 部署数: {df[\"部署\"].nunique()}部署')\n    print(f'• 役職数: {df[\"役職\"].nunique()}種類')\n    \n    # 部署別集計\n    print('\\n=== 🏢 部署別集計 ===')\n    dept_counts = df['部署'].value_counts()\n    for dept, count in dept_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {dept}: {count}名 ({percentage:.1f}%)')\n    \n    # 役職別集計\n    print('\\n=== 👔 役職別集計 ===')\n    position_counts = df['役職'].value_counts()\n    for position, count in position_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {position}: {count}名 ({percentage:.1f}%)')\n    \n    # 入社年別集計\n    print('\\n=== 📅 入社年別集計 ===')\n    df['入社年'] = pd.to_datetime(df['入社日']).dt.year\n    year_counts = df['入社年'].value_counts().sort_index()\n    for year, count in year_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {year}年入社: {count}名 ({percentage:.1f}%)')\n    \n    # 年齢計算\n    print('\\n=== 🎂 年齢分析 ===')\n    df['生年月日'] = pd.to_datetime(df['生年月日'])\n    current_date = datetime.now()\n    df['年齢'] = (current_date - df['生年月日']).dt.days // 365\n    \n    age_stats = df['年齢'].describe()\n    print(f'• 平均年齢: {age_stats[\"mean\"]:.1f}歳')\n    print(f'• 最年少: {age_stats[\"min\"]:.0f}歳')\n    print(f'• 最年長: {age_stats[\"max\"]:.0f}歳')\n    \n    # 年齢層別集計\n    df['年齢層'] = pd.cut(df['年齢'], \n                        bins=[0, 25, 30, 35, 40, 100], \n                        labels=['25歳以下', '26-30歳', '31-35歳', '36-40歳', '40歳以上'])\n    age_group_counts = df['年齢層'].value_counts().sort_index()\n    \n    print('\\n【年齢層別集計】') \n    for age_group, count in age_group_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {age_group}: {count}名 ({percentage:.1f}%)')\n    \n    # 名簿の作成\n    print('\\n=== 📋 名簿の作成 ===')\n    \n    # 基本名簿（全社員）\n    basic_meibo = df[['社員ID', '氏名', 'フリガナ', '部署', '役職', '内線番号', 'メールアドレス']].copy()\n    basic_meibo = basic_meibo.sort_values(['部署', '役職', '氏名'])\n    \n    # 部署別名簿\n    dept_meibo = {}\n    for dept in df['部署'].unique():\n        dept_data = df[df['部署'] == dept][['社員ID', '氏名', 'フリガナ', '役職', '内線番号', 'メールアドレス']].copy()\n        dept_data = dept_data.sort_values(['役職', '氏名'])\n        dept_meibo[dept] = dept_data\n    \n    # 緊急連絡先名簿\n    emergency_meibo = df[['氏名', '部署', '内線番号', '携帯電話', '緊急連絡先']].copy()\n    emergency_meibo = emergency_meibo.sort_values(['部署', '氏名'])\n    \n    # 結果の保存\n    print('\\n💾 名簿を保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    \n    # 基本名簿の保存\n    basic_filename = f'employee_directory_{timestamp}.xlsx'\n    with pd.ExcelWriter(basic_filename, engine='openpyxl') as writer:\n        # 基本名簿シート\n        basic_meibo.to_excel(writer, sheet_name='基本名簿', index=False)\n        \n        # 部署別名簿シート\n        for dept, dept_data in dept_meibo.items():\n            sheet_name = dept.replace('部', '')[:31]  # Excelシート名の制限\n            dept_data.to_excel(writer, sheet_name=sheet_name, index=False)\n        \n        # 緊急連絡先シート\n        emergency_meibo.to_excel(writer, sheet_name='緊急連絡先', index=False)\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総社員数', '部署数', '平均年齢', '最年少', '最年長', '作成日時'],\n            '数値': [len(df), df['部署'].nunique(), f\"{age_stats['mean']:.1f}歳\", f\"{age_stats['min']:.0f}歳\", f\"{age_stats['max']:.0f}歳\", datetime.now().strftime('%Y-%m-%d %H:%M:%S')]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ 名簿作成完了！')\n    print(f'ファイル名: {basic_filename}')\n    print(f'シート数: {len(dept_meibo) + 4}シート')  # 基本名簿 + 部署別 + 緊急連絡先 + 統計情報\n    \n    # 名簿内容の確認\n    print('\\n📊 名簿内容:')\n    print('• 基本名簿: 全社員の基本情報')\n    print('• 部署別名簿: 部署ごとの社員一覧')\n    print('• 緊急連絡先: 緊急時の連絡先情報')\n    print('• 統計情報: 社員データの統計')\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 最も多い部署: {dept_counts.index[0]} ({dept_counts.iloc[0]}名)') \n    print(f'• 最も多い役職: {position_counts.index[0]} ({position_counts.iloc[0]}名)') \n    print(f'• 最も多い年齢層: {age_group_counts.index[0]} ({age_group_counts.iloc[0]}名)') \n    print(f'• 平均年齢: {age_stats[\"mean\"]:.1f}歳') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 個人情報の取り扱いには十分注意してください')\n    print('• 名簿の配布先を適切に管理してください')\n    print('• 定期的に情報を更新してください')\n    print('• 退職者の情報は適切に削除してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、openpyxlライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 社員名簿自動作成完了 ===')",
        "libraries": "pandas",
        "explanation": "社員名簿を自動で作成。管理・配布が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員名簿自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 社員情報（氏名、部署、入社日、メールアドレス）を管理する\n3. 新しい社員を追加する機能を含める\n4. 社員情報をExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 氏名、部署、入社日、メールアドレス\n出力形式: Excelファイル（employee_list.xlsx）\n機能: 社員追加、一覧表示、Excel保存\n\nコピペ用プロンプト:\nPythonで社員名簿自動作成のコードを作成してください。pandasライブラリを使って社員情報（氏名、部署、入社日、メールアドレス）を管理し、新しい社員を追加する機能を含めてExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 49,
        "category": "スタッフ管理",
        "number": "49/100",
        "title": "勤怠打刻データ自動集計",
        "desc": "勤怠打刻データを自動で集計・レポート化",
        "how_to": "CSV勤怠データを自動で集計し、月次レポートを作成します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('kintai.csv')\nreport = df.groupby('氏名')['勤務時間'].sum()\nprint(report)\nreport.to_csv('kintai_report.csv')",
        "libraries": "pandas",
        "explanation": "勤怠集計を自動化。月次レポートも一発で。",
        "benefits": ["集計ミス防止", "時短", "自動化"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで勤怠打刻データ自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの勤怠打刻データを読み込む\n3. 社員別・日別の勤務時間を計算する\n4. 月次レポート（総勤務時間、残業時間、遅刻回数）を作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（社員ID、日付、出勤時刻、退勤時刻）\n出力形式: Excelファイル（monthly_report.xlsx）\n集計項目: 総勤務時間、残業時間、遅刻回数\n\nコピペ用プロンプト:\nPythonで勤怠打刻データ自動集計のコードを作成してください。pandasライブラリを使ってCSVファイルの勤怠打刻データを読み込み、社員別・日別の勤務時間を計算して月次レポート（総勤務時間、残業時間、遅刻回数）を作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 50,
        "category": "文書作成・管理",
        "number": "50/100",
        "title": "会議議事録自動フォーマット",
        "desc": "議事録を自動でフォーマット・保存",
        "how_to": "議事録テキストを自動でフォーマットし、ファイル保存します。",
        "sample_code": "title = '営業会議'\ndate = '2024/7/10'\ncontent = '・売上報告\n・新規案件'\nminutes = f'【{title}】\\n日付: {date}\\n内容:\\n{content}'\nwith open('minutes.txt', 'w', encoding='utf-8') as f:\n    f.write(minutes)\nprint('議事録保存完了！')",
        "libraries": "標準ライブラリのみ",
        "explanation": "議事録を自動でフォーマット。誰でもきれいな議事録が作れる。",
        "benefits": ["フォーマット統一", "時短", "誰でも使える"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで会議議事録自動フォーマットのコードを作成してください。以下の条件でお願いします：\n\n1. 標準ライブラリ（datetime、os）を使う\n2. 議事録の基本情報（会議名、日時、参加者、議題）を設定する\n3. 議事内容を自動でフォーマットする\n4. 決定事項とアクションアイテムを整理する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 会議名、日時、参加者、議題、議事内容\n出力形式: テキストファイル（minutes_YYYYMMDD.txt）\nフォーマット: 見やすい議事録形式\n\nコピペ用プロンプト:\nPythonで会議議事録自動フォーマットのコードを作成してください。標準ライブラリ（datetime、os）を使って議事録の基本情報（会議名、日時、参加者、議題）を設定し、議事内容を自動でフォーマットして決定事項とアクションアイテムを整理するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 51,
        "category": "顧客管理",
        "number": "51/100",
        "title": "顧客アンケート自動集計",
        "desc": "アンケート結果を自動で集計・グラフ化",
        "how_to": "CSVアンケートデータを自動で集計し、グラフも作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('survey.csv')\ncounts = df['満足度'].value_counts()\ncounts.plot(kind='bar')\nplt.savefig('survey_chart.png')\nprint('集計・グラフ作成完了！')",
        "libraries": "pandas、matplotlib",
        "explanation": "アンケート集計・グラフ化を自動化。報告書作成も楽に。",
        "benefits": ["集計が楽", "グラフも自動", "報告書作成時短"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客アンケート自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルのアンケート結果を読み込む\n3. 回答者数、平均評価、満足度分布を集計する\n4. 年齢別・性別の分析を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（年齢、性別、評価、コメント）\n出力形式: Excelファイル（survey_results.xlsx）とグラフ画像\n集計項目: 回答者数、平均評価、満足度分布、年齢別・性別分析\n\nコピペ用プロンプト:\nPythonで顧客アンケート自動集計のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルのアンケート結果を読み込み、回答者数、平均評価、満足度分布を集計して年齢別・性別の分析を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 52,
        "category": "在庫管理",
        "number": "52/100",
        "title": "商品在庫リスト自動更新",
        "desc": "商品在庫リストを自動で最新化",
        "how_to": "CSV在庫データを自動で更新・保存します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('zaiko.csv')\ndf['在庫数'] += 10\ndf.to_csv('zaiko_updated.csv', index=False)\nprint('在庫リスト更新完了！')",
        "libraries": "pandas",
        "explanation": "在庫リストを自動で最新化。棚卸しや発注も楽に。",
        "benefits": ["在庫管理が楽", "ミス防止", "自動化"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで商品在庫リスト自動更新のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの商品在庫データを読み込む\n3. 入荷・出荷データを反映して在庫数を更新する\n4. 在庫不足の商品を検出して警告を表示する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（商品ID、商品名、在庫数、単価）\n更新データ: 入荷・出荷情報\n出力形式: Excelファイル（updated_inventory.xlsx）\n機能: 在庫更新、不足警告、在庫レポート\n\nコピペ用プロンプト:\nPythonで商品在庫リスト自動更新のコードを作成してください。pandasライブラリを使ってCSVファイルの商品在庫データを読み込み、入荷・出荷データを反映して在庫数を更新し、在庫不足の商品を検出して警告を表示するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 53,
        "category": "顧客管理",
        "number": "53/100",
        "title": "取引先連絡先自動リスト化",
        "desc": "取引先の連絡先を自動でリスト化・Excel保存",
        "how_to": "CSV取引先データから連絡先リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('clients.csv')\ndf[['会社名', '担当者', '電話', 'メール']].to_excel('contacts.xlsx', index=False)\nprint('連絡先リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先連絡先を自動でリスト化。電話・メールもすぐ探せる。",
        "benefits": ["連絡が楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先連絡先自動リスト化のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの取引先情報を読み込む\n3. 取引先名、担当者、電話番号、メールアドレスを整理する\n4. 取引先別にグループ化してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先名、担当者、電話番号、メールアドレス）\n出力形式: Excelファイル（client_contacts.xlsx）\n整理項目: 取引先名、担当者、連絡先情報\n\nコピペ用プロンプト:\nPythonで取引先連絡先自動リスト化のコードを作成してください。pandasライブラリを使ってCSVファイルの取引先情報（取引先名、担当者、電話番号、メールアドレス）を読み込み、取引先別にグループ化してExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 54,
        "category": "在庫管理",
        "number": "54/100",
        "title": "受発注履歴自動整理",
        "desc": "受発注履歴を自動で日付・取引先別に整理",
        "how_to": "CSV受発注データを日付・取引先別に自動並べ替えします。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('orders.csv')\ndf = df.sort_values(['日付', '取引先'])\ndf.to_csv('orders_sorted.csv', index=False)\nprint('履歴整理完了！')",
        "libraries": "pandas",
        "explanation": "受発注履歴を自動で整理。検索・管理が楽に。",
        "benefits": ["管理が楽", "検索しやすい", "手作業不要"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで受発注履歴自動整理のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの受発注履歴を読み込む\n3. 日付順、取引先別に並べ替える\n4. 月別・取引先別の集計を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、取引先、商品名、数量、金額）\n出力形式: Excelファイル（order_history.xlsx）\n整理項目: 日付順、取引先別、月別集計\n\nコピペ用プロンプト:\nPythonで受発注履歴自動整理のコードを作成してください。pandasライブラリを使ってCSVファイルの受発注履歴（日付、取引先、商品名、数量、金額）を読み込み、日付順・取引先別に並べ替えて月別集計を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 55,
        "category": "スタッフ管理",
        "number": "55/100",
        "title": "研修参加者リスト自動作成",
        "desc": "研修参加者リストを自動でExcel化",
        "how_to": "CSVや手入力データから参加者リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport numpy as np\n\nprint('=== 研修参加者リスト自動作成（デモ版） ===')\nprint('研修参加者リストを自動でExcel化します。')\nprint('\\n📚 機能:')\nprint('• 研修参加者の管理')\nprint('• 研修別リスト作成')\nprint('• 参加者統計の表示')\nprint('• Excelファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 個人情報の取り扱いには十分注意してください')\nprint('• 研修内容は事前に参加者に通知してください')\nprint('• 定期的に参加者リストを更新してください')\n\ntry:\n    # デモ用のサンプル研修参加者データ\n    print('\\n📂 デモ用のサンプル研修参加者データを作成中...')\n    \n    # サンプル研修データ\n    training_courses = [\n        {\n            '研修ID': 'T001',\n            '研修名': 'Python基礎研修',\n            '開催日': '2024-02-15',\n            '開催時間': '09:00-17:00',\n            '定員': 20,\n            '講師': '山田太郎',\n            '場所': '会議室A'\n        },\n        {\n            '研修ID': 'T002',\n            '研修名': 'Excel応用研修',\n            '開催日': '2024-02-20',\n            '開催時間': '13:00-17:00',\n            '定員': 15,\n            '講師': '佐藤花子',\n            '場所': '会議室B'\n        },\n        {\n            '研修ID': 'T003',\n            '研修名': 'コミュニケーション研修',\n            '開催日': '2024-02-25',\n            '開催時間': '10:00-16:00',\n            '定員': 25,\n            '講師': '鈴木一郎',\n            '場所': '大ホール'\n        }\n    ]\n    \n    # サンプル参加者データ\n    participants_data = [\n        # Python基礎研修参加者\n        {'研修ID': 'T001', '氏名': '田中太郎', '部署': '開発部', '役職': '一般', 'メールアドレス': 'tanaka@company.co.jp', '参加日時': '2024-02-15 09:00', '参加状況': '参加予定'},\n        {'研修ID': 'T001', '氏名': '高橋美咲', '部署': '開発部', '役職': '一般', 'メールアドレス': 'takahashi@company.co.jp', '参加日時': '2024-02-15 09:00', '参加状況': '参加予定'},\n        {'研修ID': 'T001', '氏名': '伊藤健太', '部署': '営業部', '役職': '主任', 'メールアドレス': 'ito@company.co.jp', '参加日時': '2024-02-15 09:00', '参加状況': '参加予定'},\n        {'研修ID': 'T001', '氏名': '渡辺恵子', '部署': '営業部', '役職': '一般', 'メールアドレス': 'watanabe@company.co.jp', '参加日時': '2024-02-15 09:00', '参加状況': '参加予定'},\n        {'研修ID': 'T001', '氏名': '中村由美', '部署': '総務部', '役職': '一般', 'メールアドレス': 'nakamura@company.co.jp', '参加日時': '2024-02-15 09:00', '参加状況': '参加予定'},\n        \n        # Excel応用研修参加者\n        {'研修ID': 'T002', '氏名': '佐藤花子', '部署': '開発部', '役職': '課長', 'メールアドレス': 'sato@company.co.jp', '参加日時': '2024-02-20 13:00', '参加状況': '参加予定'},\n        {'研修ID': 'T002', '氏名': '山田次郎', '部署': '開発部', '役職': '部長', 'メールアドレス': 'yamada@company.co.jp', '参加日時': '2024-02-20 13:00', '参加状況': '参加予定'},\n        {'研修ID': 'T002', '氏名': '伊藤健太', '部署': '営業部', '役職': '主任', 'メールアドレス': 'ito@company.co.jp', '参加日時': '2024-02-20 13:00', '参加状況': '参加予定'},\n        {'研修ID': 'T002', '氏名': '中村由美', '部署': '総務部', '役職': '一般', 'メールアドレス': 'nakamura@company.co.jp', '参加日時': '2024-02-20 13:00', '参加状況': '参加予定'},\n        \n        # コミュニケーション研修参加者\n        {'研修ID': 'T003', '氏名': '田中太郎', '部署': '開発部', '役職': '一般', 'メールアドレス': 'tanaka@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'},\n        {'研修ID': 'T003', '氏名': '佐藤花子', '部署': '開発部', '役職': '課長', 'メールアドレス': 'sato@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'},\n        {'研修ID': 'T003', '氏名': '鈴木一郎', '部署': '営業部', '役職': '一般', 'メールアドレス': 'suzuki@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'},\n        {'研修ID': 'T003', '氏名': '高橋美咲', '部署': '開発部', '役職': '一般', 'メールアドレス': 'takahashi@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'},\n        {'研修ID': 'T003', '氏名': '渡辺恵子', '部署': '営業部', '役職': '一般', 'メールアドレス': 'watanabe@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'},\n        {'研修ID': 'T003', '氏名': '中村由美', '部署': '総務部', '役職': '一般', 'メールアドレス': 'nakamura@company.co.jp', '参加日時': '2024-02-25 10:00', '参加状況': '参加予定'}\n    ]\n    \n    # データフレーム作成\n    courses_df = pd.DataFrame(training_courses)\n    participants_df = pd.DataFrame(participants_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了')\n    print(f'• 研修数: {len(courses_df)}件')\n    print(f'• 参加者数: {len(participants_df)}名')\n    \n    # 研修別参加者統計\n    print('\\n=== 📈 研修別参加者統計 ===')\n    \n    for _, course in courses_df.iterrows():\n        course_participants = participants_df[participants_df['研修ID'] == course['研修ID']]\n        print(f'\\n【{course[\"研修名\"]}】')\n        print(f'• 開催日: {course[\"開催日\"]} {course[\"開催時間\"]}')\n        print(f'• 講師: {course[\"講師\"]}')\n        print(f'• 場所: {course[\"場所\"]}')\n        print(f'• 参加者数: {len(course_participants)}名 / 定員: {course[\"定員\"]}名')\n        print(f'• 定員充足率: {(len(course_participants) / course[\"定員\"]) * 100:.1f}%')\n        \n        # 部署別参加者\n        dept_counts = course_participants['部署'].value_counts()\n        print('• 部署別参加者: ', end='')\n        for dept, count in dept_counts.items():\n            print(f'{dept}({count}名) ', end='')\n        print()\n    \n    # 全体統計\n    print('\\n=== 📊 全体統計 ===')\n    \n    # 部署別参加者数\n    dept_participants = participants_df['部署'].value_counts()\n    print('\\n【部署別参加者数】')\n    for dept, count in dept_participants.items():\n        percentage = (count / len(participants_df)) * 100\n        print(f'• {dept}: {count}名 ({percentage:.1f}%)')\n    \n    # 役職別参加者数\n    position_participants = participants_df['役職'].value_counts()\n    print('\\n【役職別参加者数】')\n    for position, count in position_participants.items():\n        percentage = (count / len(participants_df)) * 100\n        print(f'• {position}: {count}名 ({percentage:.1f}%)')\n    \n    # 重複参加者（複数研修に参加）\n    duplicate_participants = participants_df.groupby('氏名').size()\n    duplicate_participants = duplicate_participants[duplicate_participants > 1]\n    \n    if len(duplicate_participants) > 0:\n        print('\\n【複数研修参加者】')\n        for name, count in duplicate_participants.items():\n            print(f'• {name}: {count}研修参加')\n    \n    # 研修別リストの作成\n    print('\\n=== 📋 研修別リストの作成 ===')\n    \n    # 結果の保存\n    print('\\n💾 研修参加者リストを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'training_participants_{timestamp}.xlsx'\n    \n    with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n        # 全体参加者リスト\n        all_participants = participants_df.merge(courses_df[['研修ID', '研修名', '開催日', '開催時間', '講師', '場所']], on='研修ID', how='left')\n        all_participants = all_participants.sort_values(['研修名', '部署', '氏名'])\n        all_participants.to_excel(writer, sheet_name='全体参加者リスト', index=False)\n        \n        # 研修別参加者リスト\n        for _, course in courses_df.iterrows():\n            course_participants = participants_df[participants_df['研修ID'] == course['研修ID']].copy()\n            course_participants = course_participants.sort_values(['部署', '氏名'])\n            \n            # 研修情報を追加\n            course_participants['研修名'] = course['研修名']\n            course_participants['開催日'] = course['開催日']\n            course_participants['開催時間'] = course['開催時間']\n            course_participants['講師'] = course['講師']\n            course_participants['場所'] = course['場所']\n            \n            sheet_name = course['研修名'][:31]  # Excelシート名の制限\n            course_participants.to_excel(writer, sheet_name=sheet_name, index=False)\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総研修数', '総参加者数', '平均参加者数', '最多参加者名', '最多参加研修名', '作成日時'],\n            '数値': [\n                len(courses_df),\n                len(participants_df),\n                f\"{len(participants_df) / len(courses_df):.1f}名\",\n                duplicate_participants.index[0] if len(duplicate_participants) > 0 else 'なし',\n                participants_df['研修ID'].value_counts().index[0],\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ 研修参加者リスト作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'シート数: {len(courses_df) + 2}シート')  # 全体リスト + 研修別 + 統計情報\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 最も参加者が多い研修: {participants_df[\"研修ID\"].value_counts().index[0]}') \n    print(f'• 最も参加者が多い部署: {dept_participants.index[0]}') \n    print(f'• 最も参加者が多い役職: {position_participants.index[0]}') \n    print(f'• 複数研修参加者数: {len(duplicate_participants)}名') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 個人情報の取り扱いには十分注意してください')\n    print('• 研修内容は事前に参加者に通知してください')\n    print('• 定期的に参加者リストを更新してください')\n    print('• 研修当日の参加確認も忘れずに行ってください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、openpyxlライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 研修参加者リスト自動作成完了 ===')",
        "libraries": "pandas",
        "explanation": "研修参加者リストを自動で作成。配布・管理が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで研修参加者リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 研修参加者の基本情報を管理する\n3. 氏名、部署、メールアドレス、参加日時を記録する\n4. 研修別に参加者リストを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 氏名、部署、メールアドレス、参加日時、研修名\n出力形式: Excelファイル（training_participants.xlsx）\n機能: 参加者追加、研修別リスト作成、Excel保存\n\nコピペ用プロンプト:\nPythonで研修参加者リスト自動作成のコードを作成してください。pandasライブラリを使って研修参加者の基本情報（氏名、部署、メールアドレス、参加日時、研修名）を管理し、研修別に参加者リストを作成してExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 56,
        "category": "顧客管理",
        "number": "56/100",
        "title": "年賀状宛名自動印刷用データ作成",
        "desc": "年賀状宛名リストを自動で印刷用データ化",
        "how_to": "CSV住所録から宛名印刷用データを自動で作成します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime\nimport re\n\nprint('=== 年賀状宛名自動印刷用データ作成（デモ版） ===')\nprint('年賀状宛名リストを自動で印刷用データ化します。')\nprint('\\n📮 機能:')\nprint('• 顧客情報の読み込み')\nprint('• 宛名フォーマットの自動調整')\nprint('• 印刷用レイアウトの作成')\nprint('• Excelファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 個人情報の取り扱いには十分注意してください')\nprint('• 宛名の敬称は適切に設定してください')\nprint('• 印刷前に宛名を確認してください')\n\ntry:\n    # デモ用のサンプル顧客データ\n    print('\\n📂 デモ用のサンプル顧客データを作成中...')\n    \n    # サンプル顧客データ\n    customers_data = [\n        {\n            '顧客ID': 'C001',\n            '氏名': '田中太郎',\n            'フリガナ': 'タナカタロウ',\n            '会社名': '株式会社田中商事',\n            '部署名': '営業部',\n            '役職': '部長',\n            '郵便番号': '100-0001',\n            '住所': '東京都千代田区千代田1-1-1',\n            '電話番号': '03-1234-5678',\n            'メールアドレス': 'tanaka@tanaka-shouji.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C002',\n            '氏名': '佐藤花子',\n            'フリガナ': 'サトウハナコ',\n            '会社名': '佐藤建設株式会社',\n            '部署名': '総務部',\n            '役職': '課長',\n            '郵便番号': '530-0001',\n            '住所': '大阪府大阪市北区梅田1-1-1',\n            '電話番号': '06-1234-5678',\n            'メールアドレス': 'sato@sato-kensetsu.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C003',\n            '氏名': '鈴木一郎',\n            'フリガナ': 'スズキイチロウ',\n            '会社名': '鈴木電機工業',\n            '部署名': '開発部',\n            '役職': '主任',\n            '郵便番号': '460-0001',\n            '住所': '愛知県名古屋市中区栄1-1-1',\n            '電話番号': '052-123-4567',\n            'メールアドレス': 'suzuki@suzuki-denki.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C004',\n            '氏名': '高橋美咲',\n            'フリガナ': 'タカハシミサキ',\n            '会社名': '高橋デザイン事務所',\n            '部署名': '',\n            '役職': '代表',\n            '郵便番号': '150-0001',\n            '住所': '東京都渋谷区神宮前1-1-1',\n            '電話番号': '03-9876-5432',\n            'メールアドレス': 'takahashi@takahashi-design.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C005',\n            '氏名': '伊藤健太',\n            'フリガナ': 'イトウケンタ',\n            '会社名': '伊藤法律事務所',\n            '部署名': '',\n            '役職': '弁護士',\n            '郵便番号': '104-0001',\n            '住所': '東京都中央区銀座1-1-1',\n            '電話番号': '03-5555-1234',\n            'メールアドレス': 'ito@ito-law.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C006',\n            '氏名': '渡辺恵子',\n            'フリガナ': 'ワタナベケイコ',\n            '会社名': '渡辺税理士法人',\n            '部署名': '',\n            '役職': '税理士',\n            '郵便番号': '100-0002',\n            '住所': '東京都千代田区丸の内1-1-1',\n            '電話番号': '03-3333-5678',\n            'メールアドレス': 'watanabe@watanabe-tax.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C007',\n            '氏名': '山田次郎',\n            'フリガナ': 'ヤマダジロウ',\n            '会社名': '山田運輸株式会社',\n            '部署名': '営業部',\n            '役職': '部長',\n            '郵便番号': '650-0001',\n            '住所': '兵庫県神戸市中央区三宮町1-1-1',\n            '電話番号': '078-123-4567',\n            'メールアドレス': 'yamada@yamada-unyu.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        },\n        {\n            '顧客ID': 'C008',\n            '氏名': '中村由美',\n            'フリガナ': 'ナカムラユミ',\n            '会社名': '中村コンサルティング',\n            '部署名': '',\n            '役職': '代表',\n            '郵便番号': '220-0001',\n            '住所': '神奈川県横浜市西区みなとみらい1-1-1',\n            '電話番号': '045-123-4567',\n            'メールアドレス': 'nakamura@nakamura-consulting.co.jp',\n            '敬称': '様',\n            '年賀状送付': True\n        }\n    ]\n    \n    # データフレーム作成\n    df = pd.DataFrame(customers_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(df)}件')\n    \n    # 年賀状送付対象者の抽出\n    print('\\n=== 📮 年賀状送付対象者の抽出 ===')\n    \n    # 年賀状送付対象者のみを抽出\n    newyear_targets = df[df['年賀状送付'] == True].copy()\n    \n    print(f'年賀状送付対象者数: {len(newyear_targets)}件')\n    \n    # 宛名フォーマットの作成\n    print('\\n=== 📝 宛名フォーマットの作成 ===')\n    \n    # 宛名フォーマット関数\n    def create_address_format(row):\n        \"\"\"宛名フォーマットを作成\"\"\"\n        # 会社名がある場合\n        if pd.notna(row['会社名']) and row['会社名'] != '':\n            if pd.notna(row['部署名']) and row['部署名'] != '':\n                if pd.notna(row['役職']) and row['役職'] != '':\n                    # 会社名 + 部署名 + 役職 + 氏名 + 敬称\n                    address = f\"{row['会社名']}\\n{row['部署名']}\\n{row['役職']} {row['氏名']}{row['敬称']}\"\n                else:\n                    # 会社名 + 部署名 + 氏名 + 敬称\n                    address = f\"{row['会社名']}\\n{row['部署名']}\\n{row['氏名']}{row['敬称']}\"\n            else:\n                if pd.notna(row['役職']) and row['役職'] != '':\n                    # 会社名 + 役職 + 氏名 + 敬称\n                    address = f\"{row['会社名']}\\n{row['役職']} {row['氏名']}{row['敬称']}\"\n                else:\n                    # 会社名 + 氏名 + 敬称\n                    address = f\"{row['会社名']}\\n{row['氏名']}{row['敬称']}\"\n        else:\n            # 個人の場合\n            address = f\"{row['氏名']}{row['敬称']}\"\n        \n        return address\n    \n    # 宛名フォーマットを適用\n    newyear_targets['宛名'] = newyear_targets.apply(create_address_format, axis=1)\n    \n    # 住所フォーマットの作成\n    def create_postal_format(row):\n        \"\"\"住所フォーマットを作成\"\"\"\n        return f\"〒{row['郵便番号']}\\n{row['住所']}\"\n    \n    newyear_targets['住所フォーマット'] = newyear_targets.apply(create_postal_format, axis=1)\n    \n    # 印刷用データの作成\n    print('\\n=== 🖨️ 印刷用データの作成 ===')\n    \n    # 印刷用データフレームの作成\n    print_data = []\n    \n    for _, row in newyear_targets.iterrows():\n        # 宛名部分\n        address_lines = row['宛名'].split('\\n')\n        \n        # 住所部分\n        postal_lines = row['住所フォーマット'].split('\\n')\n        \n        # 印刷用データに追加\n        print_data.append({\n            '顧客ID': row['顧客ID'],\n            '宛名1行目': address_lines[0] if len(address_lines) > 0 else '',\n            '宛名2行目': address_lines[1] if len(address_lines) > 1 else '',\n            '宛名3行目': address_lines[2] if len(address_lines) > 2 else '',\n            '宛名4行目': address_lines[3] if len(address_lines) > 3 else '',\n            '郵便番号': postal_lines[0] if len(postal_lines) > 0 else '',\n            '住所1行目': postal_lines[1] if len(postal_lines) > 1 else '',\n            '住所2行目': '',  # 必要に応じて分割\n            'フリガナ': row['フリガナ'],\n            '電話番号': row['電話番号'],\n            'メールアドレス': row['メールアドレス']\n        })\n    \n    print_df = pd.DataFrame(print_data)\n    \n    # 統計情報\n    print('\\n=== 📊 統計情報 ===')\n    \n    # 会社別集計\n    company_counts = newyear_targets['会社名'].value_counts()\n    print('\\n【会社別集計】')\n    for company, count in company_counts.head().items():\n        print(f'• {company}: {count}件')\n    \n    # 都道府県別集計\n    def extract_prefecture(address):\n        \"\"\"住所から都道府県を抽出\"\"\"\n        prefecture_pattern = r'^(東京都|北海道|[^\s]+?[都道府県])'\n        match = re.search(prefecture_pattern, address)\n        return match.group(1) if match else 'その他'\n    \n    newyear_targets['都道府県'] = newyear_targets['住所'].apply(extract_prefecture)\n    prefecture_counts = newyear_targets['都道府県'].value_counts()\n    \n    print('\\n【都道府県別集計】')\n    for prefecture, count in prefecture_counts.items():\n        percentage = (count / len(newyear_targets)) * 100\n        print(f'• {prefecture}: {count}件 ({percentage:.1f}%)')\n    \n    # 結果の保存\n    print('\\n💾 年賀状宛名データを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'newyear_address_{timestamp}.xlsx'\n    \n    with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n        # 印刷用データシート\n        print_df.to_excel(writer, sheet_name='印刷用データ', index=False)\n        \n        # 元データシート\n        newyear_targets.to_excel(writer, sheet_name='元データ', index=False)\n        \n        # 宛名サンプルシート\n        sample_data = []\n        for _, row in newyear_targets.head(5).iterrows():\n            sample_data.append({\n                'サンプル宛名': row['宛名'],\n                'サンプル住所': row['住所フォーマット'],\n                '会社名': row['会社名'],\n                '氏名': row['氏名'],\n                '敬称': row['敬称']\n            })\n        \n        sample_df = pd.DataFrame(sample_data)\n        sample_df.to_excel(writer, sheet_name='宛名サンプル', index=False)\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総送付件数', '会社宛件数', '個人宛件数', '最多都道府県', '作成日時'],\n            '数値': [\n                len(newyear_targets),\n                len(newyear_targets[newyear_targets['会社名'] != '']),\n                len(newyear_targets[newyear_targets['会社名'] == '']),\n                prefecture_counts.index[0] if len(prefecture_counts) > 0 else 'なし',\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ 年賀状宛名データ作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'シート数: 4シート')  # 印刷用データ + 元データ + サンプル + 統計情報\n    \n    # 宛名サンプルの表示\n    print('\\n=== 📝 宛名サンプル ===')\n    for i, (_, row) in enumerate(newyear_targets.head(3).iterrows(), 1):\n        print(f'\\n【サンプル{i}】')\n        print(row['宛名'])\n        print(row['住所フォーマット'])\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 総送付件数: {len(newyear_targets)}件') \n    print(f'• 会社宛件数: {len(newyear_targets[newyear_targets[\"会社名\"] != \"\"])}件') \n    print(f'• 個人宛件数: {len(newyear_targets[newyear_targets[\"会社名\"] == \"\"])}件') \n    print(f'• 最多都道府県: {prefecture_counts.index[0]} ({prefecture_counts.iloc[0]}件)') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 個人情報の取り扱いには十分注意してください')\n    print('• 宛名の敬称は適切に設定してください')\n    print('• 印刷前に宛名を確認してください')\n    print('• 郵便番号の正確性を確認してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、openpyxlライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 年賀状宛名自動印刷用データ作成完了 ===')",
        "libraries": "pandas",
        "explanation": "年賀状宛名データを自動で作成。印刷も楽に。",
        "benefits": ["印刷が楽", "手作業不要", "Excel化も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで年賀状宛名自動印刷用データ作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの顧客情報を読み込む\n3. 宛名、住所、敬称を自動でフォーマットする\n4. 印刷用のレイアウトに整える\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（氏名、住所、敬称）\n出力形式: Excelファイル（newyear_cards.xlsx）\n印刷項目: 宛名、住所、敬称\n\nコピペ用プロンプト:\nPythonで年賀状宛名自動印刷用データ作成のコードを作成してください。pandasライブラリを使ってCSVファイルの顧客情報（氏名、住所、敬称）を読み込み、宛名、住所、敬称を自動でフォーマットして印刷用のレイアウトに整えるコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 57,
        "category": "スタッフ管理",
        "number": "57/100",
        "title": "社内FAQ自動生成",
        "desc": "よくある質問と回答を自動でリスト化",
        "how_to": "Q&Aリストを自動でまとめ、社内FAQを作成します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime\nimport re\n\nprint('=== 社内FAQ自動生成（デモ版） ===')\nprint('よくある質問と回答を自動でリスト化します。')\nprint('\\n❓ 機能:')\nprint('• Q&Aリストの管理')\nprint('• カテゴリ別整理')\nprint('• 検索機能付きFAQ')\nprint('• Excelファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 情報の正確性を確認してください')\nprint('• 定期的にFAQを更新してください')\nprint('• 機密情報は含めないでください')\n\ntry:\n    # デモ用のサンプルFAQデータ\n    print('\\n📂 デモ用のサンプルFAQデータを作成中...')\n    \n    # サンプルFAQデータ\n    faq_data = [\n        # システム・IT関連\n        {'カテゴリ': 'システム・IT', '質問': 'パスワードを忘れた場合はどうすればいいですか？', '回答': 'システム管理者（IT部門）に連絡してください。新しいパスワードを発行いたします。', '重要度': '高', '更新日': '2024-01-15'},\n        {'カテゴリ': 'システム・IT', '質問': '社内Wi-Fiに接続できない場合は？', '回答': '1. パスワードが正しいか確認してください。2. デバイスを再起動してください。3. それでも解決しない場合はIT部門に連絡してください。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': 'システム・IT', '質問': 'プリンターが印刷できない場合は？', '回答': '1. プリンターの電源を確認してください。2. 用紙が残っているか確認してください。3. ドライバーの再インストールを試してください。', '重要度': '中', '更新日': '2024-01-15'},\n        \n        # 人事・労務関連\n        {'カテゴリ': '人事・労務', '質問': '有給休暇の申請方法は？', '回答': '人事システムにログインし、有給休暇申請フォームから申請してください。事前に上司の承認を得てから申請してください。', '重要度': '高', '更新日': '2024-01-15'},\n        {'カテゴリ': '人事・労務', '質問': '残業申請の締切はいつですか？', '回答': '残業申請は前日までに申請してください。緊急の場合は当日でも申請可能ですが、事前申請を推奨します。', '重要度': '高', '更新日': '2024-01-15'},\n        {'カテゴリ': '人事・労務', '質問': '健康診断の予約方法は？', '回答': '人事部に連絡して予約してください。健康診断は年1回実施されます。', '重要度': '中', '更新日': '2024-01-15'},\n        \n        # 経費・会計関連\n        {'カテゴリ': '経費・会計', '質問': '経費申請の締切はいつですか？', '回答': '経費申請の締切は毎月25日です。25日を過ぎた場合は翌月の申請となります。', '重要度': '高', '更新日': '2024-01-15'},\n        {'カテゴリ': '経費・会計', '質問': '領収書の保管期間は？', '回答': '領収書は最低3年間保管してください。税務調査に備えて、整理して保管することをお勧めします。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '経費・会計', '質問': '出張費の精算方法は？', '回答': '出張費は出張後1週間以内に精算してください。領収書と出張報告書を添付して申請してください。', '重要度': '高', '更新日': '2024-01-15'},\n        \n        # 営業・顧客関連\n        {'カテゴリ': '営業・顧客', '質問': '名刺の管理方法は？', '回答': '名刺は名刺管理システムに入力してください。顧客情報の一元管理を行っています。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '営業・顧客', '質問': '顧客からの問い合わせ対応は？', '回答': '顧客からの問い合わせは営業部に転送してください。緊急の場合は担当者に直接連絡してください。', '重要度': '高', '更新日': '2024-01-15'},\n        {'カテゴリ': '営業・顧客', '質問': '商談記録の入力方法は？', '回答': '商談記録は営業管理システムに入力してください。顧客名、日時、内容、結果を記録してください。', '重要度': '中', '更新日': '2024-01-15'},\n        \n        # 総務・施設関連\n        {'カテゴリ': '総務・施設', '質問': '会議室の予約方法は？', '回答': '会議室の予約は社内予約システムから行ってください。使用後は清掃をお願いします。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '総務・施設', '質問': '備品の修理依頼は？', '回答': '備品の修理依頼は総務部に連絡してください。故障内容を詳しく説明してください。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '総務・施設', '質問': '駐車場の利用方法は？', '回答': '駐車場の利用は事前に総務部に申請してください。駐車場は有料です。', '重要度': '低', '更新日': '2024-01-15'},\n        \n        # 研修・教育関連\n        {'カテゴリ': '研修・教育', '質問': '社内研修の申し込み方法は？', '回答': '社内研修の申し込みは人事部に連絡してください。研修カレンダーを確認してから申し込みください。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '研修・教育', '質問': '資格取得の支援制度は？', '回答': '資格取得の支援制度があります。人事部に相談してください。条件によって費用の一部を会社が負担します。', '重要度': '中', '更新日': '2024-01-15'},\n        {'カテゴリ': '研修・教育', '質問': '書籍購入の補助制度は？', '回答': '業務関連書籍の購入補助制度があります。月額5,000円まで補助されます。人事部に申請してください。', '重要度': '低', '更新日': '2024-01-15'}\n    ]\n    \n    # データフレーム作成\n    df = pd.DataFrame(faq_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(df)}件')\n    \n    # カテゴリ別統計\n    print('\\n=== 📈 カテゴリ別統計 ===')\n    \n    category_counts = df['カテゴリ'].value_counts()\n    print('\\n【カテゴリ別件数】')\n    for category, count in category_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {category}: {count}件 ({percentage:.1f}%)')\n    \n    # 重要度別統計\n    print('\\n=== ⚠️ 重要度別統計 ===')\n    \n    importance_counts = df['重要度'].value_counts()\n    print('\\n【重要度別件数】')\n    for importance, count in importance_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {importance}: {count}件 ({percentage:.1f}%)')\n    \n    # FAQ検索機能\n    print('\\n=== 🔍 FAQ検索機能 ===')\n    \n    def search_faq(keyword):\n        \"\"\"キーワードでFAQを検索\"\"\"\n        results = df[df['質問'].str.contains(keyword, case=False, na=False) | \n                    df['回答'].str.contains(keyword, case=False, na=False)]\n        return results\n    \n    # 検索例\n    search_keywords = ['パスワード', '申請', '締切']\n    \n    for keyword in search_keywords:\n        results = search_faq(keyword)\n        print(f'\\n【「{keyword}」で検索結果】: {len(results)}件')\n        for _, row in results.head(2).iterrows():\n            print(f'• {row[\"カテゴリ\"]}: {row[\"質問\"]}') \n    \n    # FAQの整理・分類\n    print('\\n=== 📋 FAQの整理・分類 ===')\n    \n    # カテゴリ別FAQリストの作成\n    category_faqs = {}\n    for category in df['カテゴリ'].unique():\n        category_data = df[df['カテゴリ'] == category].copy()\n        # 重要度順にソート（高→中→低）\n        importance_order = {'高': 3, '中': 2, '低': 1}\n        category_data['重要度順'] = category_data['重要度'].map(importance_order)\n        category_data = category_data.sort_values('重要度順', ascending=False)\n        category_faqs[category] = category_data\n    \n    # 結果の保存\n    print('\\n💾 FAQデータを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'company_faq_{timestamp}.xlsx'\n    \n    with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n        # 全体FAQシート\n        df.to_excel(writer, sheet_name='全体FAQ', index=False)\n        \n        # カテゴリ別FAQシート\n        for category, category_data in category_faqs.items():\n            sheet_name = category[:31]  # Excelシート名の制限\n            category_data[['質問', '回答', '重要度', '更新日']].to_excel(writer, sheet_name=sheet_name, index=False)\n        \n        # 重要度別FAQシート\n        high_priority = df[df['重要度'] == '高'][['カテゴリ', '質問', '回答', '更新日']]\n        high_priority.to_excel(writer, sheet_name='重要FAQ', index=False)\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総FAQ数', 'カテゴリ数', '重要FAQ数', '最終更新日', '作成日時'],\n            '数値': [\n                len(df),\n                len(df['カテゴリ'].unique()),\n                len(df[df['重要度'] == '高']),\n                df['更新日'].max(),\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ FAQデータ作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'シート数: {len(category_faqs) + 3}シート')  # 全体 + カテゴリ別 + 重要 + 統計情報\n    \n    # FAQサンプルの表示\n    print('\\n=== 📝 FAQサンプル ===')\n    \n    # 重要FAQの表示\n    important_faqs = df[df['重要度'] == '高'].head(3)\n    for i, (_, row) in enumerate(important_faqs.iterrows(), 1):\n        print(f'\\n【重要FAQ{i}】')\n        print(f'カテゴリ: {row[\"カテゴリ\"]}')\n        print(f'Q: {row[\"質問\"]}')\n        print(f'A: {row[\"回答\"]}')\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 総FAQ数: {len(df)}件') \n    print(f'• カテゴリ数: {len(df[\"カテゴリ\"].unique())}種類') \n    print(f'• 重要FAQ数: {len(df[df[\"重要度\"] == \"高\"])}件') \n    print(f'• 最多カテゴリ: {category_counts.index[0]} ({category_counts.iloc[0]}件)') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 情報の正確性を確認してください')\n    print('• 定期的にFAQを更新してください')\n    print('• 機密情報は含めないでください')\n    print('• 検索しやすいキーワードを設定してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、openpyxlライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 社内FAQ自動生成完了 ===')",
        "libraries": "pandas",
        "explanation": "社内FAQを自動で作成。新人教育や問い合わせ対応が楽に。",
        "benefits": ["教育コスト削減", "問い合わせ対応時短", "誰でも使える"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内FAQ自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルのQ&Aリストを読み込む\n3. 質問と回答を整理してFAQ形式にする\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（質問、回答の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内FAQ自動生成のコードを作成してください。pandasライブラリを使ってCSVファイルのQ&AリストからFAQを自動生成し、Excelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 58,
        "category": "顧客管理",
        "number": "58/100",
        "title": "顧客誕生日リスト自動作成",
        "desc": "顧客の誕生日リストを自動で作成・Excel保存",
        "how_to": "CSV顧客データから誕生日リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport numpy as np\n\nprint('=== 顧客誕生日リスト自動作成（デモ版） ===')\nprint('顧客の誕生日リストを自動で作成・Excel保存します。')\nprint('\\n🎂 機能:')\nprint('• 顧客誕生日の管理')\nprint('• 月別・日別の整理')\nprint('• お祝いメール送付予定リスト')\nprint('• Excelファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 個人情報の取り扱いには十分注意してください')\nprint('• 誕生日情報の正確性を確認してください')\nprint('• お祝いメールの送付時期を適切に設定してください')\n\ntry:\n    # デモ用のサンプル顧客データ\n    print('\\n📂 デモ用のサンプル顧客データを作成中...')\n    \n    # サンプル顧客データ\n    customers_data = [\n        {\n            '顧客ID': 'C001',\n            '氏名': '田中太郎',\n            'フリガナ': 'タナカタロウ',\n            '会社名': '株式会社田中商事',\n            '部署名': '営業部',\n            '役職': '部長',\n            '誕生日': '1985-03-15',\n            'メールアドレス': 'tanaka@tanaka-shouji.co.jp',\n            '電話番号': '03-1234-5678',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '3日前'\n        },\n        {\n            '顧客ID': 'C002',\n            '氏名': '佐藤花子',\n            'フリガナ': 'サトウハナコ',\n            '会社名': '佐藤建設株式会社',\n            '部署名': '総務部',\n            '役職': '課長',\n            '誕生日': '1990-07-22',\n            'メールアドレス': 'sato@sato-kensetsu.co.jp',\n            '電話番号': '06-1234-5678',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '当日'\n        },\n        {\n            '顧客ID': 'C003',\n            '氏名': '鈴木一郎',\n            'フリガナ': 'スズキイチロウ',\n            '会社名': '鈴木電機工業',\n            '部署名': '開発部',\n            '役職': '主任',\n            '誕生日': '1988-12-03',\n            'メールアドレス': 'suzuki@suzuki-denki.co.jp',\n            '電話番号': '052-123-4567',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '1週間前'\n        },\n        {\n            '顧客ID': 'C004',\n            '氏名': '高橋美咲',\n            'フリガナ': 'タカハシミサキ',\n            '会社名': '高橋デザイン事務所',\n            '部署名': '',\n            '役職': '代表',\n            '誕生日': '1992-05-10',\n            'メールアドレス': 'takahashi@takahashi-design.co.jp',\n            '電話番号': '03-9876-5432',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '当日'\n        },\n        {\n            '顧客ID': 'C005',\n            '氏名': '伊藤健太',\n            'フリガナ': 'イトウケンタ',\n            '会社名': '伊藤法律事務所',\n            '部署名': '',\n            '役職': '弁護士',\n            '誕生日': '1983-11-25',\n            'メールアドレス': 'ito@ito-law.co.jp',\n            '電話番号': '03-5555-1234',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '3日前'\n        },\n        {\n            '顧客ID': 'C006',\n            '氏名': '渡辺恵子',\n            'フリガナ': 'ワタナベケイコ',\n            '会社名': '渡辺税理士法人',\n            '部署名': '',\n            '役職': '税理士',\n            '誕生日': '1987-09-18',\n            'メールアドレス': 'watanabe@watanabe-tax.co.jp',\n            '電話番号': '03-3333-5678',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '1週間前'\n        },\n        {\n            '顧客ID': 'C007',\n            '氏名': '山田次郎',\n            'フリガナ': 'ヤマダジロウ',\n            '会社名': '山田運輸株式会社',\n            '部署名': '営業部',\n            '役職': '部長',\n            '誕生日': '1980-01-30',\n            'メールアドレス': 'yamada@yamada-unyu.co.jp',\n            '電話番号': '078-123-4567',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '当日'\n        },\n        {\n            '顧客ID': 'C008',\n            '氏名': '中村由美',\n            'フリガナ': 'ナカムラユミ',\n            '会社名': '中村コンサルティング',\n            '部署名': '',\n            '役職': '代表',\n            '誕生日': '1989-04-12',\n            'メールアドレス': 'nakamura@nakamura-consulting.co.jp',\n            '電話番号': '045-123-4567',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '3日前'\n        },\n        {\n            '顧客ID': 'C009',\n            '氏名': '小林正男',\n            'フリガナ': 'コバヤシマサオ',\n            '会社名': '小林食品株式会社',\n            '部署名': '営業部',\n            '役職': '課長',\n            '誕生日': '1986-08-05',\n            'メールアドレス': 'kobayashi@kobayashi-food.co.jp',\n            '電話番号': '03-4444-1234',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '当日'\n        },\n        {\n            '顧客ID': 'C010',\n            '氏名': '加藤雅子',\n            'フリガナ': 'カトウマサコ',\n            '会社名': '加藤美容院',\n            '部署名': '',\n            '役職': 'オーナー',\n            '誕生日': '1991-02-28',\n            'メールアドレス': 'kato@kato-beauty.co.jp',\n            '電話番号': '03-6666-5678',\n            'お祝いメール送付': True,\n            'お祝いメール送付日': '1週間前'\n        }\n    ]\n    \n    # データフレーム作成\n    df = pd.DataFrame(customers_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(df)}件')\n    \n    # 誕生日データの処理\n    print('\\n=== 🎂 誕生日データの処理 ===')\n    \n    # 誕生日を日付型に変換\n    df['誕生日'] = pd.to_datetime(df['誕生日'])\n    \n    # 年齢計算\n    current_date = datetime.now()\n    df['年齢'] = (current_date - df['誕生日']).dt.days // 365\n    \n    # 月と日を抽出\n    df['誕生月'] = df['誕生日'].dt.month\n    df['誕生日'] = df['誕生日'].dt.day\n    \n    # 星座の計算\n    def get_zodiac_sign(month, day):\n        \"\"\"誕生日から星座を計算\"\"\"\n        zodiac_dates = [\n            (1, 20, '水瓶座'), (2, 19, '魚座'), (3, 21, '牡羊座'), (4, 20, '牡牛座'),\n            (5, 21, '双子座'), (6, 22, '蟹座'), (7, 23, '獅子座'), (8, 23, '乙女座'),\n            (9, 23, '天秤座'), (10, 24, '蠍座'), (11, 22, '射手座'), (12, 22, '山羊座')\n        ]\n        \n        for i, (start_month, start_day, sign) in enumerate(zodiac_dates):\n            end_month, end_day, _ = zodiac_dates[(i + 1) % 12]\n            \n            if (month == start_month and day >= start_day) or \\\n               (month == end_month and day < end_day) or \\\n               (start_month > end_month and (month > start_month or month < end_month)):\n                return sign\n        \n        return '山羊座'  # デフォルト\n    \n    df['星座'] = df.apply(lambda row: get_zodiac_sign(row['誕生月'], row['誕生日']), axis=1)\n    \n    # お祝いメール送付予定日の計算\n    def calculate_send_date(birthday, send_timing):\n        \"\"\"お祝いメール送付予定日を計算\"\"\"\n        current_year = current_date.year\n        birthday_this_year = birthday.replace(year=current_year)\n        \n        if birthday_this_year < current_date:\n            birthday_this_year = birthday.replace(year=current_year + 1)\n        \n        if send_timing == '当日':\n            return birthday_this_year\n        elif send_timing == '3日前':\n            return birthday_this_year - timedelta(days=3)\n        elif send_timing == '1週間前':\n            return birthday_this_year - timedelta(days=7)\n        else:\n            return birthday_this_year\n    \n    df['お祝いメール送付予定日'] = df.apply(\n        lambda row: calculate_send_date(row['誕生日'], row['お祝いメール送付日']), axis=1\n    )\n    \n    # 統計情報\n    print('\\n=== 📊 統計情報 ===')\n    \n    # 月別誕生日集計\n    month_counts = df['誕生月'].value_counts().sort_index()\n    print('\\n【月別誕生日集計】')\n    month_names = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n    for month, count in month_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {month_names[month-1]}: {count}人 ({percentage:.1f}%)')\n    \n    # 星座別集計\n    zodiac_counts = df['星座'].value_counts()\n    print('\\n【星座別集計】')\n    for zodiac, count in zodiac_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {zodiac}: {count}人 ({percentage:.1f}%)')\n    \n    # 年齢層別集計\n    df['年齢層'] = pd.cut(df['年齢'], \n                        bins=[0, 30, 40, 50, 100], \n                        labels=['30歳以下', '31-40歳', '41-50歳', '50歳以上'])\n    age_group_counts = df['年齢層'].value_counts().sort_index()\n    \n    print('\\n【年齢層別集計】')\n    for age_group, count in age_group_counts.items():\n        percentage = (count / len(df)) * 100\n        print(f'• {age_group}: {count}人 ({percentage:.1f}%)')\n    \n    # 今月の誕生日者\n    print('\\n=== 🎉 今月の誕生日者 ===')\n    current_month = current_date.month\n    this_month_birthdays = df[df['誕生月'] == current_month].copy()\n    this_month_birthdays = this_month_birthdays.sort_values('誕生日')\n    \n    if len(this_month_birthdays) > 0:\n        print(f'\\n今月（{current_month}月）の誕生日者: {len(this_month_birthdays)}人')\n        for _, row in this_month_birthdays.iterrows():\n            print(f'• {row[\"誕生日\"]}日: {row[\"氏名\"]} ({row[\"会社名\"]}) - {row[\"年齢\"]}歳') \n    else:\n        print(f'\\n今月（{current_month}月）の誕生日者はいません。')\n    \n    # 来月の誕生日者\n    print('\\n=== 📅 来月の誕生日者 ===')\n    next_month = (current_month % 12) + 1\n    next_month_birthdays = df[df['誕生月'] == next_month].copy()\n    next_month_birthdays = next_month_birthdays.sort_values('誕生日')\n    \n    if len(next_month_birthdays) > 0:\n        print(f'\\n来月（{next_month}月）の誕生日者: {len(next_month_birthdays)}人')\n        for _, row in next_month_birthdays.iterrows():\n            print(f'• {row[\"誕生日\"]}日: {row[\"氏名\"]} ({row[\"会社名\"]}) - {row[\"年齢\"]}歳') \n    else:\n        print(f'\\n来月（{next_month}月）の誕生日者はいません。')\n    \n    # 結果の保存\n    print('\\n💾 誕生日リストを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'customer_birthdays_{timestamp}.xlsx'\n    \n    with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n        # 全体リストシート\n        all_data = df[['顧客ID', '氏名', 'フリガナ', '会社名', '部署名', '役職', '誕生日', '誕生月', '年齢', '星座', 'メールアドレス', '電話番号', 'お祝いメール送付', 'お祝いメール送付日', 'お祝いメール送付予定日']].copy()\n        all_data = all_data.sort_values(['誕生月', '誕生日', '氏名'])\n        all_data.to_excel(writer, sheet_name='全体リスト', index=False)\n        \n        # 月別リストシート\n        for month in range(1, 13):\n            month_data = df[df['誕生月'] == month].copy()\n            if len(month_data) > 0:\n                month_data = month_data.sort_values('誕生日')\n                sheet_name = f'{month}月'[:31]  # Excelシート名の制限\n                month_data[['氏名', 'フリガナ', '会社名', '誕生日', '年齢', '星座', 'メールアドレス', 'お祝いメール送付予定日']].to_excel(writer, sheet_name=sheet_name, index=False)\n        \n        # 今月の誕生日者シート\n        if len(this_month_birthdays) > 0:\n            this_month_birthdays[['氏名', 'フリガナ', '会社名', '誕生日', '年齢', '星座', 'メールアドレス', 'お祝いメール送付予定日']].to_excel(writer, sheet_name='今月誕生日', index=False)\n        \n        # 来月の誕生日者シート\n        if len(next_month_birthdays) > 0:\n            next_month_birthdays[['氏名', 'フリガナ', '会社名', '誕生日', '年齢', '星座', 'メールアドレス', 'お祝いメール送付予定日']].to_excel(writer, sheet_name='来月誕生日', index=False)\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総顧客数', 'お祝いメール送付対象者数', '平均年齢', '最多誕生月', '最多星座', '作成日時'],\n            '数値': [\n                len(df),\n                len(df[df['お祝いメール送付'] == True]),\n                f\"{df['年齢'].mean():.1f}歳\",\n                f\"{month_counts.index[0]}月 ({month_counts.iloc[0]}人)\",\n                f\"{zodiac_counts.index[0]} ({zodiac_counts.iloc[0]}人)\",\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ 誕生日リスト作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'シート数: {len([m for m in range(1, 13) if len(df[df[\"誕生月\"] == m]) > 0]) + 4}シート')  # 月別 + 全体 + 今月 + 来月 + 統計情報\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 総顧客数: {len(df)}人') \n    print(f'• お祝いメール送付対象者数: {len(df[df[\"お祝いメール送付\"] == True])}人') \n    print(f'• 平均年齢: {df[\"年齢\"].mean():.1f}歳') \n    print(f'• 最多誕生月: {month_counts.index[0]}月 ({month_counts.iloc[0]}人)') \n    print(f'• 最多星座: {zodiac_counts.index[0]} ({zodiac_counts.iloc[0]}人)') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 個人情報の取り扱いには十分注意してください')\n    print('• 誕生日情報の正確性を確認してください')\n    print('• お祝いメールの送付時期を適切に設定してください')\n    print('• 顧客の好みに合わせてメール内容を調整してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、openpyxlライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 顧客誕生日リスト自動作成完了 ===')",
        "libraries": "pandas",
        "explanation": "顧客の誕生日リストを自動で作成。お祝いメールやDM送付に活用。",
        "benefits": ["お祝い対応が楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客誕生日リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの顧客データを読み込む\n3. 誕生日の列を抽出して整理する\n4. 月別・日別にソートしてExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（氏名、誕生日の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで顧客誕生日リスト自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルから顧客の誕生日リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 59,
        "category": "文書作成・管理",
        "number": "59/100",
        "title": "送付状自動作成",
        "desc": "送付状の定型文を自動生成・PDF化",
        "how_to": "宛先・内容を入力するだけで送付状を自動生成しPDF化します。",
        "sample_code": "from reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import A4\nfrom reportlab.pdfbase import pdfmetrics\nfrom reportlab.pdfbase.ttfonts import TTFont\nfrom reportlab.lib.units import mm\nfrom datetime import datetime\nimport os\n\nprint('=== 送付状自動作成（デモ版） ===')\nprint('送付状の定型文を自動生成・PDF化します。')\nprint('\\n📄 機能:')\nprint('• 送付状の自動生成')\nprint('• 宛先・内容の自動設定')\nprint('• 見やすいレイアウト')\nprint('• PDFファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 宛先情報の正確性を確認してください')\nprint('• 送付内容を適切に記載してください')\nprint('• 印刷前に内容を確認してください')\n\ntry:\n    # デモ用のサンプル送付状データ\n    print('\\n📂 デモ用のサンプル送付状データを作成中...')\n    \n    # サンプル送付状データ\n    delivery_letters = [\n        {\n            '送付状番号': 'DL001',\n            '宛先会社名': '株式会社田中商事',\n            '宛先部署名': '営業部',\n            '宛先役職': '部長',\n            '宛先氏名': '田中太郎',\n            '宛先敬称': '様',\n            '送付者会社名': '株式会社サンプル',\n            '送付者部署名': '営業部',\n            '送付者氏名': '佐藤花子',\n            '送付者役職': '課長',\n            '送付日': '2024-01-15',\n            '送付内容': '契約書類一式',\n            '件名': '契約書類の送付について',\n            '本文': '平素より格別のご高配を賜り、厚く御礼申し上げます。\\n\\n下記の書類を同封いたしますので、ご査収くださいますようお願いいたします。\\n\\nご不明な点がございましたら、お気軽にお問い合わせください。',\n            '添付書類': ['契約書（原本）', '見積書', '仕様書']\n        },\n        {\n            '送付状番号': 'DL002',\n            '宛先会社名': '佐藤建設株式会社',\n            '宛先部署名': '総務部',\n            '宛先役職': '課長',\n            '宛先氏名': '佐藤花子',\n            '宛先敬称': '様',\n            '送付者会社名': '株式会社サンプル',\n            '送付者部署名': '営業部',\n            '送付者氏名': '鈴木一郎',\n            '送付者役職': '主任',\n            '送付日': '2024-01-16',\n            '送付内容': '見積書・カタログ',\n            '件名': '製品見積書の送付について',\n            '本文': 'この度はお問い合わせいただき、ありがとうございます。\\n\\nご要望に応じて、下記の書類を送付いたします。\\n\\nご検討のほど、よろしくお願いいたします。',\n            '添付書類': ['見積書', '製品カタログ', '技術資料']\n        },\n        {\n            '送付状番号': 'DL003',\n            '宛先会社名': '鈴木電機工業',\n            '宛先部署名': '開発部',\n            '宛先役職': '主任',\n            '宛先氏名': '鈴木一郎',\n            '宛先敬称': '様',\n            '送付者会社名': '株式会社サンプル',\n            '送付者部署名': '営業部',\n            '送付者氏名': '高橋美咲',\n            '送付者役職': '一般',\n            '送付日': '2024-01-17',\n            '送付内容': 'サンプル品・資料',\n            '件名': 'サンプル品の送付について',\n            '本文': 'ご依頼いただきましたサンプル品を送付いたします。\\n\\nご確認いただき、ご検討のほどよろしくお願いいたします。\\n\\nご質問等ございましたら、お気軽にご連絡ください。',\n            '添付書類': ['サンプル品', '製品仕様書', '価格表']\n        }\n    ]\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(delivery_letters)}件')\n    \n    # 送付状の作成\n    print('\\n=== 📄 送付状の作成 ===')\n    \n    def create_delivery_letter(data, filename):\n        \"\"\"送付状PDFを作成\"\"\"\n        # PDFキャンバスを作成\n        c = canvas.Canvas(filename, pagesize=A4)\n        width, height = A4\n        \n        # フォント設定（日本語対応）\n        try:\n            # 日本語フォントの設定（環境によって異なる）\n            pdfmetrics.registerFont(TTFont('IPAexGothic', 'ipaexg.ttf'))\n            font_name = 'IPAexGothic'\n        except:\n            # フォールバック\n            font_name = 'Helvetica'\n        \n        # タイトル\n        c.setFont(font_name, 16)\n        c.drawString(50*mm, height-30*mm, '送付状')\n        \n        # 送付日\n        c.setFont(font_name, 10)\n        c.drawString(width-80*mm, height-30*mm, f'送付日: {data[\"送付日\"]}')\n        \n        # 宛先\n        c.setFont(font_name, 12)\n        y_position = height - 60*mm\n        \n        # 会社名\n        c.drawString(50*mm, y_position, data['宛先会社名'])\n        y_position -= 8*mm\n        \n        # 部署名がある場合\n        if data['宛先部署名']:\n            c.drawString(50*mm, y_position, data['宛先部署名'])\n            y_position -= 8*mm\n        \n        # 役職・氏名・敬称\n        if data['宛先役職']:\n            c.drawString(50*mm, y_position, f\"{data['宛先役職']} {data['宛先氏名']}{data['宛先敬称']}\")\n        else:\n            c.drawString(50*mm, y_position, f\"{data['宛先氏名']}{data['宛先敬称']}\")\n        \n        # 件名\n        y_position -= 20*mm\n        c.setFont(font_name, 11)\n        c.drawString(50*mm, y_position, f\"件名: {data['件名']}\")\n        \n        # 本文\n        y_position -= 15*mm\n        c.setFont(font_name, 10)\n        \n        # 本文を行分割して描画\n        lines = data['本文'].split('\\n')\n        for line in lines:\n            if y_position < 50*mm:  # ページ下部に達した場合\n                c.showPage()  # 新しいページ\n                y_position = height - 30*mm\n                c.setFont(font_name, 10)\n            \n            c.drawString(50*mm, y_position, line)\n            y_position -= 6*mm\n        \n        # 添付書類\n        y_position -= 10*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '【添付書類】')\n        y_position -= 8*mm\n        \n        for i, attachment in enumerate(data['添付書類'], 1):\n            if y_position < 50*mm:  # ページ下部に達した場合\n                c.showPage()  # 新しいページ\n                y_position = height - 30*mm\n                c.setFont(font_name, 10)\n            \n            c.drawString(50*mm, y_position, f'{i}. {attachment}')\n            y_position -= 6*mm\n        \n        # 送付者情報\n        y_position -= 15*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '【送付者】')\n        y_position -= 8*mm\n        \n        c.drawString(50*mm, y_position, data['送付者会社名'])\n        y_position -= 6*mm\n        \n        if data['送付者部署名']:\n            c.drawString(50*mm, y_position, data['送付者部署名'])\n            y_position -= 6*mm\n        \n        if data['送付者役職']:\n            c.drawString(50*mm, y_position, f\"{data['送付者役職']} {data['送付者氏名']}\")\n        else:\n            c.drawString(50*mm, y_position, data['送付者氏名'])\n        \n        # 送付状番号\n        c.setFont(font_name, 8)\n        c.drawString(50*mm, 20*mm, f\"送付状番号: {data['送付状番号']}\")\n        \n        # PDFを保存\n        c.save()\n        \n        return filename\n    \n    # 送付状の作成\n    created_files = []\n    \n    for i, letter_data in enumerate(delivery_letters, 1):\n        filename = f'delivery_letter_{letter_data[\"送付状番号\"]}.pdf'\n        created_file = create_delivery_letter(letter_data, filename)\n        created_files.append(created_file)\n        print(f'✅ 送付状{i}作成完了: {filename}')\n    \n    # 送付状サンプルの表示\n    print('\\n=== 📝 送付状サンプル ===')\n    \n    for i, letter_data in enumerate(delivery_letters, 1):\n        print(f'\\n【送付状{i}】')\n        print(f'送付状番号: {letter_data[\"送付状番号\"]}')\n        print(f'宛先: {letter_data[\"宛先会社名\"]} {letter_data[\"宛先部署名\"]} {letter_data[\"宛先役職\"]} {letter_data[\"宛先氏名\"]}{letter_data[\"宛先敬称\"]}')\n        print(f'件名: {letter_data[\"件名\"]}')\n        print(f'送付内容: {letter_data[\"送付内容\"]}')\n        print(f'添付書類: {len(letter_data[\"添付書類\"])}件')\n    \n    # 統計情報\n    print('\\n=== 📊 統計情報 ===')\n    \n    # 宛先会社別集計\n    company_counts = {}\n    for letter in delivery_letters:\n        company = letter['宛先会社名']\n        company_counts[company] = company_counts.get(company, 0) + 1\n    \n    print('\\n【宛先会社別集計】')\n    for company, count in company_counts.items():\n        print(f'• {company}: {count}件')\n    \n    # 送付内容別集計\n    content_counts = {}\n    for letter in delivery_letters:\n        content = letter['送付内容']\n        content_counts[content] = content_counts.get(content, 0) + 1\n    \n    print('\\n【送付内容別集計】')\n    for content, count in content_counts.items():\n        print(f'• {content}: {count}件')\n    \n    # 添付書類の統計\n    all_attachments = []\n    for letter in delivery_letters:\n        all_attachments.extend(letter['添付書類'])\n    \n    attachment_counts = {}\n    for attachment in all_attachments:\n        attachment_counts[attachment] = attachment_counts.get(attachment, 0) + 1\n    \n    print('\\n【添付書類別集計】')\n    for attachment, count in attachment_counts.items():\n        print(f'• {attachment}: {count}件')\n    \n    # 結果の保存\n    print('\\n💾 送付状データを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    \n    # 送付状リストの作成（CSV形式）\n    import csv\n    csv_filename = f'delivery_letters_list_{timestamp}.csv'\n    \n    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:\n        fieldnames = ['送付状番号', '宛先会社名', '宛先部署名', '宛先氏名', '件名', '送付内容', '送付日', '添付書類数']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        writer.writeheader()\n        for letter in delivery_letters:\n            writer.writerow({\n                '送付状番号': letter['送付状番号'],\n                '宛先会社名': letter['宛先会社名'],\n                '宛先部署名': letter['宛先部署名'],\n                '宛先氏名': letter['宛先氏名'],\n                '件名': letter['件名'],\n                '送付内容': letter['送付内容'],\n                '送付日': letter['送付日'],\n                '添付書類数': len(letter['添付書類'])\n            })\n    \n    print(f'✅ 送付状データ作成完了！')\n    print(f'作成されたPDFファイル数: {len(created_files)}件')\n    print(f'送付状リスト: {csv_filename}')\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 総送付状数: {len(delivery_letters)}件') \n    print(f'• 宛先会社数: {len(company_counts)}社') \n    print(f'• 送付内容種類: {len(content_counts)}種類') \n    print(f'• 総添付書類数: {len(all_attachments)}件') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 宛先情報の正確性を確認してください')\n    print('• 送付内容を適切に記載してください')\n    print('• 印刷前に内容を確認してください')\n    print('• 添付書類の漏れがないか確認してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• reportlabライブラリがインストールされているか確認してください')\n    print('• 日本語フォントが利用可能か確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n\nprint('\\n=== 送付状自動作成完了 ===')",
        "libraries": "reportlab",
        "explanation": "送付状を自動でPDF化。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで送付状自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 宛先、送付者、日付、内容を設定する\n3. 見やすいレイアウトでPDFを作成する\n4. フォントサイズや位置を適切に設定する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 宛先、送付者、日付、内容\n出力形式: PDFファイル\n\nコピペ用プロンプト:\nPythonで送付状自動作成のコードを作成してください。reportlabライブラリを使って宛先・内容からPDF送付状を自動生成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 60,
        "category": "データ処理・分析",
        "number": "60/100",
        "title": "取引先別売上自動集計",
        "desc": "取引先ごとの売上を自動で集計・グラフ化",
        "how_to": "CSV売上データを取引先ごとに自動集計し、グラフも作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport numpy as np\n\nprint('=== 取引先別売上自動集計（デモ版） ===')\nprint('取引先ごとの売上を自動で集計・グラフ化します。')\nprint('\\n📊 機能:')\nprint('• 取引先別売上の集計')\nprint('• 売上推移の分析')\nprint('• グラフの自動生成')\nprint('• Excelファイルでの保存')\nprint('\\n⚠️ 注意事項:')\nprint('• 売上データの正確性を確認してください')\nprint('• 機密情報の取り扱いには十分注意してください')\nprint('• グラフは適切な形式で保存してください')\n\ntry:\n    # デモ用のサンプル売上データ\n    print('\\n📂 デモ用のサンプル売上データを作成中...')\n    \n    # サンプル売上データ\n    sales_data = [\n        # 1月の売上データ\n        {'取引先': '株式会社田中商事', '商品名': '商品A', '数量': 10, '単価': 5000, '売上日': '2024-01-05', '担当者': '佐藤花子'},\n        {'取引先': '株式会社田中商事', '商品名': '商品B', '数量': 5, '単価': 8000, '売上日': '2024-01-12', '担当者': '佐藤花子'},\n        {'取引先': '佐藤建設株式会社', '商品名': '商品A', '数量': 15, '単価': 5000, '売上日': '2024-01-08', '担当者': '鈴木一郎'},\n        {'取引先': '佐藤建設株式会社', '商品名': '商品C', '数量': 8, '単価': 12000, '売上日': '2024-01-15', '担当者': '鈴木一郎'},\n        {'取引先': '鈴木電機工業', '商品名': '商品B', '数量': 12, '単価': 8000, '売上日': '2024-01-10', '担当者': '高橋美咲'},\n        \n        # 2月の売上データ\n        {'取引先': '株式会社田中商事', '商品名': '商品A', '数量': 8, '単価': 5000, '売上日': '2024-02-03', '担当者': '佐藤花子'},\n        {'取引先': '株式会社田中商事', '商品名': '商品D', '数量': 6, '単価': 15000, '売上日': '2024-02-10', '担当者': '佐藤花子'},\n        {'取引先': '佐藤建設株式会社', '商品名': '商品A', '数量': 20, '単価': 5000, '売上日': '2024-02-07', '担当者': '鈴木一郎'},\n        {'取引先': '鈴木電機工業', '商品名': '商品B', '数量': 10, '単価': 8000, '売上日': '2024-02-14', '担当者': '高橋美咲'},\n        {'取引先': '高橋デザイン事務所', '商品名': '商品C', '数量': 4, '単価': 12000, '売上日': '2024-02-20', '担当者': '伊藤健太'},\n        \n        # 3月の売上データ\n        {'取引先': '株式会社田中商事', '商品名': '商品B', '数量': 15, '単価': 8000, '売上日': '2024-03-05', '担当者': '佐藤花子'},\n        {'取引先': '佐藤建設株式会社', '商品名': '商品A', '数量': 12, '単価': 5000, '売上日': '2024-03-12', '担当者': '鈴木一郎'},\n        {'取引先': '佐藤建設株式会社', '商品名': '商品D', '数量': 3, '単価': 15000, '売上日': '2024-03-18', '担当者': '鈴木一郎'},\n        {'取引先': '鈴木電機工業', '商品名': '商品A', '数量': 18, '単価': 5000, '売上日': '2024-03-08', '担当者': '高橋美咲'},\n        {'取引先': '高橋デザイン事務所', '商品名': '商品B', '数量': 7, '単価': 8000, '売上日': '2024-03-25', '担当者': '伊藤健太'}\n    ]\n    \n    # データフレーム作成\n    df = pd.DataFrame(sales_data)\n    \n    print(f'\\n📊 サンプルデータ作成完了: {len(df)}件')\n    \n    # 売上金額の計算\n    print('\\n=== 💰 売上金額の計算 ===')\n    \n    df['売上金額'] = df['数量'] * df['単価']\n    df['売上月'] = pd.to_datetime(df['売上日']).dt.to_period('M')\n    \n    print(f'総売上金額: {df[\"売上金額\"].sum():,}円')\n    print(f'平均単価: {df[\"単価\"].mean():,.0f}円')\n    print(f'総販売数量: {df[\"数量\"].sum()}個')\n    \n    # 取引先別売上集計\n    print('\\n=== 📈 取引先別売上集計 ===')\n    \n    # 取引先別総売上\n    client_sales = df.groupby('取引先')['売上金額'].agg(['sum', 'count', 'mean']).round(0)\n    client_sales.columns = ['総売上金額', '取引回数', '平均取引金額']\n    client_sales = client_sales.sort_values('総売上金額', ascending=False)\n    \n    print('\\n【取引先別売上ランキング】')\n    for i, (client, row) in enumerate(client_sales.iterrows(), 1):\n        print(f'{i}位: {client} - {row[\"総売上金額\"]:,}円 ({row[\"取引回数\"]}回)')\n    \n    # 月別売上推移\n    print('\\n=== 📅 月別売上推移 ===')\n    \n    monthly_sales = df.groupby('売上月')['売上金額'].sum()\n    \n    print('\\n【月別売上推移】')\n    for month, sales in monthly_sales.items():\n        print(f'• {month}: {sales:,}円')\n    \n    # 商品別売上集計\n    print('\\n=== 🛍️ 商品別売上集計 ===')\n    \n    product_sales = df.groupby('商品名')['売上金額'].agg(['sum', 'count', 'mean']).round(0)\n    product_sales.columns = ['総売上金額', '販売回数', '平均取引金額']\n    product_sales = product_sales.sort_values('総売上金額', ascending=False)\n    \n    print('\\n【商品別売上ランキング】')\n    for i, (product, row) in enumerate(product_sales.iterrows(), 1):\n        print(f'{i}位: {product} - {row[\"総売上金額\"]:,}円 ({row[\"販売回数\"]}回)')\n    \n    # 担当者別売上集計\n    print('\\n=== 👤 担当者別売上集計 ===')\n    \n    staff_sales = df.groupby('担当者')['売上金額'].agg(['sum', 'count', 'mean']).round(0)\n    staff_sales.columns = ['総売上金額', '取引回数', '平均取引金額']\n    staff_sales = staff_sales.sort_values('総売上金額', ascending=False)\n    \n    print('\\n【担当者別売上ランキング】')\n    for i, (staff, row) in enumerate(staff_sales.iterrows(), 1):\n        print(f'{i}位: {staff} - {row[\"総売上金額\"]:,}円 ({row[\"取引回数\"]}回)')\n    \n    # グラフの作成\n    print('\\n=== 📊 グラフの作成 ===')\n    \n    # 日本語フォント設定\n    plt.rcParams['font.family'] = 'DejaVu Sans'\n    \n    # 1. 取引先別売上棒グラフ\n    plt.figure(figsize=(12, 6))\n    client_sales['総売上金額'].plot(kind='bar', color='skyblue', edgecolor='navy')\n    plt.title('取引先別売上金額', fontsize=14, fontweight='bold')\n    plt.xlabel('取引先')\n    plt.ylabel('売上金額（円）')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    plt.savefig('sales_by_client.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    # 2. 月別売上推移グラフ\n    plt.figure(figsize=(10, 6))\n    monthly_sales.plot(kind='line', marker='o', linewidth=2, markersize=8, color='green')\n    plt.title('月別売上推移', fontsize=14, fontweight='bold')\n    plt.xlabel('月')\n    plt.ylabel('売上金額（円）')\n    plt.grid(True, alpha=0.3)\n    plt.tight_layout()\n    plt.savefig('monthly_sales_trend.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    # 3. 商品別売上円グラフ\n    plt.figure(figsize=(10, 8))\n    plt.pie(product_sales['総売上金額'], labels=product_sales.index, autopct='%1.1f%%', startangle=90)\n    plt.title('商品別売上構成比', fontsize=14, fontweight='bold')\n    plt.axis('equal')\n    plt.tight_layout()\n    plt.savefig('product_sales_pie.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    print('✅ グラフ作成完了！')\n    print('• sales_by_client.png - 取引先別売上棒グラフ')\n    print('• monthly_sales_trend.png - 月別売上推移グラフ')\n    print('• product_sales_pie.png - 商品別売上円グラフ')\n    \n    # 結果の保存\n    print('\\n💾 売上データを保存中...')\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    filename = f'sales_analysis_{timestamp}.xlsx'\n    \n    with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n        # 元データシート\n        df.to_excel(writer, sheet_name='元データ', index=False)\n        \n        # 取引先別集計シート\n        client_sales.to_excel(writer, sheet_name='取引先別集計')\n        \n        # 月別集計シート\n        monthly_sales.to_frame('売上金額').to_excel(writer, sheet_name='月別集計')\n        \n        # 商品別集計シート\n        product_sales.to_excel(writer, sheet_name='商品別集計')\n        \n        # 担当者別集計シート\n        staff_sales.to_excel(writer, sheet_name='担当者別集計')\n        \n        # 統計情報シート\n        stats_data = {\n            '項目': ['総売上金額', '総取引回数', '取引先数', '商品数', '担当者数', '平均取引金額', '最多売上取引先', '最多売上商品', '最多売上担当者', '作成日時'],\n            '数値': [\n                f\"{df['売上金額'].sum():,}円\",\n                len(df),\n                len(df['取引先'].unique()),\n                len(df['商品名'].unique()),\n                len(df['担当者'].unique()),\n                f\"{df['売上金額'].mean():,.0f}円\",\n                client_sales.index[0],\n                product_sales.index[0],\n                staff_sales.index[0],\n                datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            ]\n        }\n        stats_df = pd.DataFrame(stats_data)\n        stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n    \n    print(f'✅ 売上分析データ作成完了！')\n    print(f'ファイル名: {filename}')\n    print(f'シート数: 6シート')  # 元データ + 4集計 + 統計情報\n    \n    # 主要な発見\n    print('\\n=== 🔍 主要な発見 ===')\n    print(f'• 総売上金額: {df[\"売上金額\"].sum():,}円') \n    print(f'• 最多売上取引先: {client_sales.index[0]} ({client_sales.iloc[0][\"総売上金額\"]:,}円)') \n    print(f'• 最多売上商品: {product_sales.index[0]} ({product_sales.iloc[0][\"総売上金額\"]:,}円)') \n    print(f'• 最多売上担当者: {staff_sales.index[0]} ({staff_sales.iloc[0][\"総売上金額\"]:,}円)') \n    print(f'• 平均取引金額: {df[\"売上金額\"].mean():,.0f}円') \n    \n    print('\\n💡 実際の使用時の注意点:')\n    print('• 売上データの正確性を確認してください')\n    print('• 機密情報の取り扱いには十分注意してください')\n    print('• グラフは適切な形式で保存してください')\n    print('• 定期的にデータを更新してください')\n    \nexcept Exception as e:\n    print(f'\\n❌ エラーが発生しました: {e}')\n    print('\\n🔧 トラブルシューティング:')\n    print('• pandas、matplotlibライブラリがインストールされているか確認してください')\n    print('• ファイルの書き込み権限を確認してください')\n    print('• データの形式を確認してください')\n\nprint('\\n=== 取引先別売上自動集計完了 ===')",
        "libraries": "pandas、matplotlib",
        "explanation": "取引先別売上を自動で集計・グラフ化。営業戦略に活用。",
        "benefits": ["集計が楽", "グラフも自動", "戦略立案に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別売上自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルの売上データを読み込む\n3. 取引先別に売上を集計する\n4. 棒グラフや円グラフで可視化する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先、売上金額の列）\n出力形式: グラフ画像ファイル\n\nコピペ用プロンプト:\nPythonで取引先別売上自動集計のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルから取引先別に売上を集計・グラフ作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 61,
        "category": "データ処理・分析",
        "number": "61/100",
        "title": "社内アンケート自動集計",
        "desc": "社内アンケート結果を自動で集計・グラフ化",
        "how_to": "CSVアンケートデータを自動で集計し、グラフも作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfrom datetime import datetime\nimport numpy as np\n\n# エラーハンドリング付きの社内アンケート自動集計\n\ndef analyze_survey_data(input_file='survey.csv', output_file='survey_analysis.xlsx'):\n    \"\"\"\n    社内アンケート結果を自動で集計・グラフ化する関数\n    \n    Args:\n        input_file (str): 入力CSVファイル名（デフォルト: survey.csv）\n        output_file (str): 出力Excelファイル名（デフォルト: survey_analysis.xlsx）\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力ファイルの存在確認\n        if not os.path.exists(input_file):\n            print(f\"エラー: 入力ファイル '{input_file}' が見つかりません。\")\n            print(\"以下の形式でCSVファイルを作成してください:\")\n            print(\"回答者,部署,満足度,改善点,コメント\")\n            print(\"山田太郎,営業部,4,給与制度,頑張ります\")\n            print(\"佐藤花子,総務部,5,なし,とても良いです\")\n            return False\n        \n        # 2. CSVファイルの読み込み\n        print(f\"CSVファイル '{input_file}' を読み込んでいます...\")\n        df = pd.read_csv(input_file, encoding='utf-8')\n        \n        # 3. 必要な列の存在確認\n        required_columns = ['回答者', '満足度']\n        missing_columns = [col for col in required_columns if col not in df.columns]\n        if missing_columns:\n            print(f\"エラー: 必要な列が見つかりません: {missing_columns}\")\n            print(f\"現在の列: {list(df.columns)}\")\n            return False\n        \n        # 4. データの前処理\n        print(\"データを前処理しています...\")\n        \n        # 満足度を数値型に変換\n        df['満足度'] = pd.to_numeric(df['満足度'], errors='coerce')\n        \n        # 欠損値の処理\n        df = df.dropna(subset=['満足度'])\n        \n        if len(df) == 0:\n            print(\"エラー: 有効なデータがありません。\")\n            return False\n        \n        # 5. 基本統計の計算\n        print(\"基本統計を計算しています...\")\n        \n        total_responses = len(df)\n        avg_satisfaction = df['満足度'].mean()\n        satisfaction_counts = df['満足度'].value_counts().sort_index()\n        \n        # 6. 部署別分析（部署列が存在する場合）\n        dept_analysis = None\n        if '部署' in df.columns:\n            print(\"部署別分析を実行しています...\")\n            dept_analysis = df.groupby('部署')['満足度'].agg(['mean', 'count']).round(2)\n            dept_analysis.columns = ['平均満足度', '回答者数']\n            dept_analysis = dept_analysis.sort_values('平均満足度', ascending=False)\n        \n        # 7. 改善点の分析（改善点列が存在する場合）\n        improvement_analysis = None\n        if '改善点' in df.columns:\n            print(\"改善点分析を実行しています...\")\n            # 空でない改善点のみ抽出\n            valid_improvements = df[df['改善点'].notna() & (df['改善点'] != '') & (df['改善点'] != 'なし')]\n            if len(valid_improvements) > 0:\n                improvement_counts = valid_improvements['改善点'].value_counts().head(10)\n                improvement_analysis = improvement_counts.to_frame('件数')\n        \n        # 8. グラフの作成\n        print(\"グラフを作成しています...\")\n        \n        # 日本語フォント設定\n        plt.rcParams['font.family'] = 'DejaVu Sans'\n        \n        # 1. 満足度分布の円グラフ\n        plt.figure(figsize=(10, 8))\n        satisfaction_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)\n        plt.title('満足度分布', fontsize=14, fontweight='bold')\n        plt.ylabel('')\n        plt.axis('equal')\n        plt.tight_layout()\n        plt.savefig('satisfaction_distribution.png', dpi=300, bbox_inches='tight')\n        plt.close()\n        \n        # 2. 満足度分布の棒グラフ\n        plt.figure(figsize=(10, 6))\n        satisfaction_counts.plot(kind='bar', color='lightcoral', edgecolor='darkred')\n        plt.title('満足度分布（棒グラフ）', fontsize=14, fontweight='bold')\n        plt.xlabel('満足度')\n        plt.ylabel('回答者数')\n        plt.xticks(rotation=0)\n        plt.grid(True, alpha=0.3)\n        plt.tight_layout()\n        plt.savefig('satisfaction_bar.png', dpi=300, bbox_inches='tight')\n        plt.close()\n        \n        # 3. 部署別満足度（部署データがある場合）\n        if dept_analysis is not None and len(dept_analysis) > 1:\n            plt.figure(figsize=(12, 6))\n            dept_analysis['平均満足度'].plot(kind='bar', color='lightblue', edgecolor='navy')\n            plt.title('部署別平均満足度', fontsize=14, fontweight='bold')\n            plt.xlabel('部署')\n            plt.ylabel('平均満足度')\n            plt.xticks(rotation=45, ha='right')\n            plt.grid(True, alpha=0.3)\n            plt.tight_layout()\n            plt.savefig('satisfaction_by_dept.png', dpi=300, bbox_inches='tight')\n            plt.close()\n        \n        # 4. 改善点のワードクラウド風表示（改善点データがある場合）\n        if improvement_analysis is not None and len(improvement_analysis) > 0:\n            plt.figure(figsize=(12, 8))\n            improvement_analysis['件数'].plot(kind='barh', color='lightgreen', edgecolor='darkgreen')\n            plt.title('改善点トップ10', fontsize=14, fontweight='bold')\n            plt.xlabel('件数')\n            plt.ylabel('改善点')\n            plt.grid(True, alpha=0.3)\n            plt.tight_layout()\n            plt.savefig('improvement_points.png', dpi=300, bbox_inches='tight')\n            plt.close()\n        \n        # 9. Excelファイルに保存\n        print(f\"Excelファイル '{output_file}' に保存しています...\")\n        \n        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n            # 元データシート\n            df.to_excel(writer, sheet_name='元データ', index=False)\n            \n            # 基本統計シート\n            stats_data = {\n                '項目': ['総回答者数', '平均満足度', '最高満足度', '最低満足度', '満足度の標準偏差', '作成日時'],\n                '値': [\n                    total_responses,\n                    f\"{avg_satisfaction:.2f}\",\n                    df['満足度'].max(),\n                    df['満足度'].min(),\n                    f\"{df['満足度'].std():.2f}\",\n                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                ]\n            }\n            stats_df = pd.DataFrame(stats_data)\n            stats_df.to_excel(writer, sheet_name='基本統計', index=False)\n            \n            # 満足度分布シート\n            satisfaction_counts.to_frame('回答者数').to_excel(writer, sheet_name='満足度分布')\n            \n            # 部署別分析シート（データがある場合）\n            if dept_analysis is not None:\n                dept_analysis.to_excel(writer, sheet_name='部署別分析')\n            \n            # 改善点分析シート（データがある場合）\n            if improvement_analysis is not None:\n                improvement_analysis.to_excel(writer, sheet_name='改善点分析')\n        \n        # 10. 結果の表示\n        print(\"\\n=== 社内アンケート集計完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"総回答者数: {total_responses}人\")\n        print(f\"平均満足度: {avg_satisfaction:.2f}/5.0\")\n        print(f\"最高満足度: {df['満足度'].max()}/5.0\")\n        print(f\"最低満足度: {df['満足度'].min()}/5.0\")\n        \n        # 満足度分布の詳細表示\n        print(\"\\n【満足度分布】\")\n        for satisfaction, count in satisfaction_counts.items():\n            percentage = (count / total_responses) * 100\n            print(f\"満足度{satisfaction}: {count}人 ({percentage:.1f}%)\")\n        \n        # 部署別分析の表示（データがある場合）\n        if dept_analysis is not None:\n            print(\"\\n【部署別平均満足度】\")\n            for dept, row in dept_analysis.iterrows():\n                print(f\"{dept}: {row['平均満足度']:.2f}/5.0 ({row['回答者数']}人)\")\n        \n        # 改善点の表示（データがある場合）\n        if improvement_analysis is not None and len(improvement_analysis) > 0:\n            print(\"\\n【主な改善点】\")\n            for improvement, count in improvement_analysis.head(5).iterrows():\n                print(f\"• {improvement}: {count['件数']}件\")\n        \n        return True\n        \n    except FileNotFoundError:\n        print(f\"エラー: ファイル '{input_file}' が見つかりません。\")\n        return False\n    except pd.errors.EmptyDataError:\n        print(f\"エラー: ファイル '{input_file}' が空です。\")\n        return False\n    except pd.errors.ParserError as e:\n        print(f\"エラー: CSVファイルの形式が正しくありません: {e}\")\n        return False\n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        return False\n\n# サンプルデータの作成（初回実行時のみ）\ndef create_sample_survey_data():\n    \"\"\"サンプルアンケートデータを作成する関数\"\"\"\n    sample_data = {\n        '回答者': [\n            '山田太郎', '佐藤花子', '鈴木一郎', '高橋美咲', '伊藤健太',\n            '渡辺真理', '田中次郎', '中村恵子', '小林正男', '加藤由美',\n            '斎藤雅子', '山本裕子', '井上博文', '松本和子', '山口智子'\n        ],\n        '部署': [\n            '営業部', '総務部', '開発部', '営業部', '開発部',\n            '総務部', '営業部', '開発部', '営業部', '総務部',\n            '開発部', '営業部', '開発部', '総務部', '営業部'\n        ],\n        '満足度': [4, 5, 3, 4, 5, 4, 3, 5, 4, 4, 3, 4, 5, 4, 3],\n        '改善点': [\n            '給与制度', 'なし', '作業環境', '福利厚生', 'なし',\n            'なし', '評価制度', 'なし', '研修制度', 'なし',\n            'コミュニケーション', 'なし', 'なし', 'なし', '業務効率'\n        ],\n        'コメント': [\n            '頑張ります', 'とても良いです', '改善の余地あり', '満足しています', '素晴らしい職場です',\n            '良い環境です', 'もう少し改善を', '最高です', '良い会社です', '満足しています',\n            'コミュニケーションを改善して', '良い職場です', '素晴らしいです', '満足です', '効率化を期待'\n        ]\n    }\n    \n    df = pd.DataFrame(sample_data)\n    df.to_csv('survey.csv', index=False, encoding='utf-8')\n    print(\"サンプルアンケートデータ 'survey.csv' を作成しました。\")\n    return df\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプルデータが存在しない場合は作成\n    if not os.path.exists('survey.csv'):\n        print(\"サンプルアンケートデータを作成しています...\")\n        create_sample_survey_data()\n    \n    # アンケート集計の実行\n    success = analyze_survey_data()\n    \n    if success:\n        print(\"\\n✅ 社内アンケート集計が完了しました！\")\n        print(\"📁 出力ファイル: survey_analysis.xlsx\")\n        print(\"📊 作成されたグラフ:\")\n        print(\"   - satisfaction_distribution.png - 満足度分布円グラフ\")\n        print(\"   - satisfaction_bar.png - 満足度分布棒グラフ\")\n        if os.path.exists('satisfaction_by_dept.png'):\n            print(\"   - satisfaction_by_dept.png - 部署別満足度\")\n        if os.path.exists('improvement_points.png'):\n            print(\"   - improvement_points.png - 改善点分析\")\n        print(\"\\n💡 活用のポイント:\")\n        print(\"• 部署別の満足度差を分析して改善施策を検討\")\n        print(\"• 改善点の傾向を把握して優先順位を決定\")\n        print(\"• 定期的にアンケートを実施して変化を追跡\")\n    else:\n        print(\"\\n❌ 処理が失敗しました。エラーメッセージを確認してください。\")",
        "libraries": "pandas, matplotlib, openpyxl",
        "explanation": "社内アンケート集計・グラフ化を自動化。報告書作成も楽に。",
        "benefits": ["集計が楽", "グラフも自動", "報告書作成時短", "エラー耐性", "詳細分析"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内アンケート自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルのアンケート結果を読み込む\n3. 回答者数、平均評価、満足度分布を集計する\n4. 円グラフや棒グラフで可視化する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（回答者、評価、満足度の列）\n出力形式: グラフ画像ファイル\n\nコピペ用プロンプト:\nPythonで社内アンケート自動集計のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルから社内アンケートを集計・グラフ作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 62,
        "category": "データ処理・分析",
        "number": "62/100",
        "title": "交通費ICカード明細自動整理",
        "desc": "ICカード明細を自動で整理・Excel化",
        "how_to": "ICカード明細CSVを自動で整理し、Excelに保存します。",
        "sample_code": "import pandas as pd\nimport os\nfrom datetime import datetime, timedelta\nimport calendar\n\n# エラーハンドリング付きの交通費ICカード明細自動整理\n\ndef organize_ic_card_data(input_file='iccard.csv', output_file='iccard_organized.xlsx'):\n    \"\"\"\n    ICカード明細を自動で整理・Excel化する関数\n    \n    Args:\n        input_file (str): 入力CSVファイル名（デフォルト: iccard.csv）\n        output_file (str): 出力Excelファイル名（デフォルト: iccard_organized.xlsx）\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力ファイルの存在確認\n        if not os.path.exists(input_file):\n            print(f\"エラー: 入力ファイル '{input_file}' が見つかりません。\")\n            print(\"以下の形式でCSVファイルを作成してください:\")\n            print(\"利用日,利用時刻,利用駅,利用額,残高\")\n            print(\"2024-08-01,08:30,東京駅,280,1500\")\n            print(\"2024-08-01,18:15,新宿駅,280,1220\")\n            return False\n        \n        # 2. CSVファイルの読み込み\n        print(f\"CSVファイル '{input_file}' を読み込んでいます...\")\n        df = pd.read_csv(input_file, encoding='utf-8')\n        \n        # 3. 必要な列の存在確認\n        required_columns = ['利用日', '利用額']\n        missing_columns = [col for col in required_columns if col not in df.columns]\n        if missing_columns:\n            print(f\"エラー: 必要な列が見つかりません: {missing_columns}\")\n            print(f\"現在の列: {list(df.columns)}\")\n            return False\n        \n        # 4. データの前処理\n        print(\"データを前処理しています...\")\n        \n        # 利用日を日付型に変換\n        df['利用日'] = pd.to_datetime(df['利用日'], errors='coerce')\n        \n        # 利用額を数値型に変換（カンマを除去）\n        df['利用額'] = df['利用額'].astype(str).str.replace(',', '').astype(float)\n        \n        # 欠損値の処理\n        df = df.dropna(subset=['利用日', '利用額'])\n        \n        if len(df) == 0:\n            print(\"エラー: 有効なデータがありません。\")\n            return False\n        \n        # 5. 利用日順にソート\n        df_sorted = df.sort_values('利用日').reset_index(drop=True)\n        \n        # 6. 月別・日別集計の計算\n        print(\"月別・日別集計を計算しています...\")\n        \n        # 月別集計\n        df['年月'] = df['利用日'].dt.to_period('M')\n        monthly_summary = df.groupby('年月').agg({\n            '利用額': ['sum', 'count', 'mean'],\n            '利用日': ['min', 'max']\n        }).round(0)\n        \n        # 列名を整理\n        monthly_summary.columns = ['月間利用額', '利用回数', '平均利用額', '月初日', '月末日']\n        monthly_summary = monthly_summary.sort_index(ascending=False)\n        \n        # 日別集計\n        daily_summary = df.groupby('利用日').agg({\n            '利用額': ['sum', 'count']\n        }).round(0)\n        daily_summary.columns = ['日間利用額', '利用回数']\n        daily_summary = daily_summary.sort_index(ascending=False)\n        \n        # 7. 駅別集計（駅列が存在する場合）\n        station_analysis = None\n        if '利用駅' in df.columns:\n            print(\"駅別分析を実行しています...\")\n            station_summary = df.groupby('利用駅').agg({\n                '利用額': ['sum', 'count', 'mean']\n            }).round(0)\n            station_summary.columns = ['総利用額', '利用回数', '平均利用額']\n            station_summary = station_summary.sort_values('総利用額', ascending=False)\n            station_analysis = station_summary\n        \n        # 8. 統計情報の計算\n        total_amount = df['利用額'].sum()\n        total_count = len(df)\n        avg_amount = df['利用額'].mean()\n        \n        # 今月の集計\n        current_month = datetime.now().replace(day=1)\n        this_month_data = df[df['利用日'] >= current_month]\n        this_month_amount = this_month_data['利用額'].sum()\n        this_month_count = len(this_month_data)\n        \n        # 9. Excelファイルに保存\n        print(f\"Excelファイル '{output_file}' に保存しています...\")\n        \n        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n            # 元データシート（日付順）\n            df_sorted.to_excel(writer, sheet_name='明細データ', index=False)\n            \n            # 月別集計シート\n            monthly_summary.to_excel(writer, sheet_name='月別集計')\n            \n            # 日別集計シート\n            daily_summary.to_excel(writer, sheet_name='日別集計')\n            \n            # 駅別分析シート（データがある場合）\n            if station_analysis is not None:\n                station_analysis.to_excel(writer, sheet_name='駅別分析')\n            \n            # 統計情報シート\n            stats_data = {\n                '項目': [\n                    '総利用金額', '総利用回数', '平均利用金額', '利用期間',\n                    '今月利用金額', '今月利用回数', '最多利用駅', '最多利用月', '作成日時'\n                ],\n                '値': [\n                    f\"{total_amount:,.0f}円\",\n                    total_count,\n                    f\"{avg_amount:,.0f}円\",\n                    f\"{df['利用日'].min().strftime('%Y-%m-%d')} 〜 {df['利用日'].max().strftime('%Y-%m-%d')}\",\n                    f\"{this_month_amount:,.0f}円\",\n                    this_month_count,\n                    station_analysis.index[0] if station_analysis is not None else 'データなし',\n                    monthly_summary.index[0].strftime('%Y年%m月') if len(monthly_summary) > 0 else 'データなし',\n                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                ]\n            }\n            stats_df = pd.DataFrame(stats_data)\n            stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n        \n        # 10. 結果の表示\n        print(\"\\n=== ICカード明細整理完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"総利用金額: {total_amount:,.0f}円\")\n        print(f\"総利用回数: {total_count}回\")\n        print(f\"平均利用金額: {avg_amount:,.0f}円\")\n        print(f\"利用期間: {df['利用日'].min().strftime('%Y-%m-%d')} 〜 {df['利用日'].max().strftime('%Y-%m-%d')}\")\n        \n        # 今月の利用状況\n        print(f\"\\n【今月の利用状況】\")\n        print(f\"利用金額: {this_month_amount:,.0f}円\")\n        print(f\"利用回数: {this_month_count}回\")\n        \n        # 月別利用状況\n        print(f\"\\n【月別利用状況（上位5ヶ月）】\")\n        for i, (month, row) in enumerate(monthly_summary.head(5).iterrows(), 1):\n            print(f\"{i}位: {month.strftime('%Y年%m月')} - {row['月間利用額']:,.0f}円 ({row['利用回数']}回)\")\n        \n        # 駅別利用状況（データがある場合）\n        if station_analysis is not None:\n            print(f\"\\n【駅別利用状況（上位5駅）】\")\n            for i, (station, row) in enumerate(station_analysis.head(5).iterrows(), 1):\n                print(f\"{i}位: {station} - {row['総利用額']:,.0f}円 ({row['利用回数']}回)\")\n        \n        return True\n        \n    except FileNotFoundError:\n        print(f\"エラー: ファイル '{input_file}' が見つかりません。\")\n        return False\n    except pd.errors.EmptyDataError:\n        print(f\"エラー: ファイル '{input_file}' が空です。\")\n        return False\n    except pd.errors.ParserError as e:\n        print(f\"エラー: CSVファイルの形式が正しくありません: {e}\")\n        return False\n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        return False\n\n# サンプルデータの作成（初回実行時のみ）\ndef create_sample_ic_data():\n    \"\"\"サンプルICカードデータを作成する関数\"\"\"\n    # 8月のサンプルデータ\n    sample_data = {\n        '利用日': [\n            '2024-08-01', '2024-08-01', '2024-08-02', '2024-08-02', '2024-08-03',\n            '2024-08-03', '2024-08-05', '2024-08-05', '2024-08-06', '2024-08-06',\n            '2024-08-07', '2024-08-07', '2024-08-08', '2024-08-08', '2024-08-09',\n            '2024-08-09', '2024-08-12', '2024-08-12', '2024-08-13', '2024-08-13'\n        ],\n        '利用時刻': [\n            '08:30', '18:15', '08:25', '18:20', '08:35', '18:10', '08:40', '18:25',\n            '08:20', '18:30', '08:45', '18:05', '08:30', '18:15', '08:35', '18:20',\n            '08:25', '18:10', '08:40', '18:25'\n        ],\n        '利用駅': [\n            '東京駅', '新宿駅', '東京駅', '新宿駅', '東京駅', '新宿駅', '東京駅', '新宿駅',\n            '東京駅', '新宿駅', '東京駅', '新宿駅', '東京駅', '新宿駅', '東京駅', '新宿駅',\n            '東京駅', '新宿駅', '東京駅', '新宿駅'\n        ],\n        '利用額': [280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280],\n        '残高': [1500, 1220, 940, 660, 380, 100, 1500, 1220, 940, 660, 380, 100, 1500, 1220, 940, 660, 380, 100, 1500, 1220]\n    }\n    \n    df = pd.DataFrame(sample_data)\n    df.to_csv('iccard.csv', index=False, encoding='utf-8')\n    print(\"サンプルICカードデータ 'iccard.csv' を作成しました。\")\n    return df\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプルデータが存在しない場合は作成\n    if not os.path.exists('iccard.csv'):\n        print(\"サンプルICカードデータを作成しています...\")\n        create_sample_ic_data()\n    \n    # ICカード明細整理の実行\n    success = organize_ic_card_data()\n    \n    if success:\n        print(\"\\n✅ ICカード明細整理が完了しました！\")\n        print(\"📁 出力ファイル: iccard_organized.xlsx\")\n        print(\"📊 5つのシートが作成されました:\")\n        print(\"   - 明細データ: 日付順の詳細明細\")\n        print(\"   - 月別集計: 月ごとの利用金額・回数\")\n        print(\"   - 日別集計: 日ごとの利用金額・回数\")\n        print(\"   - 駅別分析: 駅ごとの利用状況\")\n        print(\"   - 統計情報: 全体の統計データ\")\n        print(\"\\n💡 経費精算での活用ポイント:\")\n        print(\"• 月別集計シートで月額交通費を確認\")\n        print(\"• 日別集計シートで出張日の交通費を抽出\")\n        print(\"• 駅別分析で通勤経路の最適化を検討\")\n    else:\n        print(\"\\n❌ 処理が失敗しました。エラーメッセージを確認してください。\")",
        "libraries": "pandas, openpyxl",
        "explanation": "ICカード明細を自動で整理。経費精算も楽に。",
        "benefits": ["整理が楽", "Excel化", "経費精算も簡単", "エラー耐性", "詳細分析"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで交通費ICカード明細自動整理のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルのICカード明細を読み込む\n3. 利用日でソートして整理する\n4. 月別・日別に集計してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（利用日、利用額、利用駅の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで交通費ICカード明細自動整理のコードを作成してください。pandasライブラリを使ってCSVファイルを日付順に並べ替えてExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 63,
        "category": "ファイル管理",
        "number": "63/100",
        "title": "画像ファイル自動圧縮",
        "desc": "画像ファイルを自動で圧縮・保存",
        "how_to": "Pillowで画像ファイルを自動で圧縮し、保存します。",
        "sample_code": "from PIL import Image\nimport os\nfrom datetime import datetime\nimport glob\n\n# エラーハンドリング付きの画像ファイル自動圧縮\n\ndef compress_images(input_folder='.', output_folder='compressed', quality=60, max_width=1920):\n    \"\"\"\n    画像ファイルを自動で圧縮・保存する関数\n    \n    Args:\n        input_folder (str): 入力フォルダ名（デフォルト: カレントディレクトリ）\n        output_folder (str): 出力フォルダ名（デフォルト: compressed）\n        quality (int): 圧縮品質（1-100、デフォルト: 60）\n        max_width (int): 最大幅（デフォルト: 1920px）\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力フォルダの存在確認\n        if not os.path.exists(input_folder):\n            print(f\"エラー: 入力フォルダ '{input_folder}' が見つかりません。\")\n            return False\n        \n        # 2. 出力フォルダの作成\n        if not os.path.exists(output_folder):\n            os.makedirs(output_folder)\n            print(f\"出力フォルダ '{output_folder}' を作成しました。\")\n        \n        # 3. 対応画像形式の定義\n        supported_formats = {\n            '.jpg': 'JPEG', '.jpeg': 'JPEG', '.png': 'PNG', \n            '.bmp': 'BMP', '.tiff': 'TIFF', '.webp': 'WEBP'\n        }\n        \n        # 4. 画像ファイルの検索\n        print(f\"フォルダ '{input_folder}' から画像ファイルを検索しています...\")\n        \n        image_files = []\n        for ext in supported_formats.keys():\n            pattern = os.path.join(input_folder, f\"*{ext}\")\n            image_files.extend(glob.glob(pattern))\n            \n            # 大文字拡張子も検索\n            pattern_upper = os.path.join(input_folder, f\"*{ext.upper()}\")\n            image_files.extend(glob.glob(pattern_upper))\n        \n        if not image_files:\n            print(f\"エラー: フォルダ '{input_folder}' に画像ファイルが見つかりません。\")\n            print(\"対応形式: JPG, JPEG, PNG, BMP, TIFF, WEBP\")\n            return False\n        \n        print(f\"{len(image_files)}個の画像ファイルが見つかりました。\")\n        \n        # 5. 画像の圧縮処理\n        print(f\"画像の圧縮を開始します（品質: {quality}%、最大幅: {max_width}px）...\")\n        \n        compressed_count = 0\n        total_original_size = 0\n        total_compressed_size = 0\n        \n        for image_path in image_files:\n            try:\n                # ファイル名と拡張子の取得\n                filename = os.path.basename(image_path)\n                name, ext = os.path.splitext(filename)\n                ext = ext.lower()\n                \n                # 対応形式かチェック\n                if ext not in supported_formats:\n                    print(f\"スキップ: {filename} (未対応形式)\")\n                    continue\n                \n                # 元ファイルサイズの取得\n                original_size = os.path.getsize(image_path)\n                total_original_size += original_size\n                \n                # 画像の読み込み\n                with Image.open(image_path) as img:\n                    # 画像形式の取得\n                    img_format = supported_formats[ext]\n                    \n                    # RGB変換（RGBAの場合は白背景で合成）\n                    if img.mode in ('RGBA', 'LA', 'P'):\n                        # 白背景で合成\n                        background = Image.new('RGB', img.size, (255, 255, 255))\n                        if img.mode == 'P':\n                            img = img.convert('RGBA')\n                        background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)\n                        img = background\n                    elif img.mode != 'RGB':\n                        img = img.convert('RGB')\n                    \n                    # リサイズ（必要に応じて）\n                    if img.width > max_width:\n                        ratio = max_width / img.width\n                        new_height = int(img.height * ratio)\n                        img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)\n                        print(f\"リサイズ: {filename} ({img.width}x{img.height})\")\n                    \n                    # 出力ファイル名の生成\n                    output_filename = f\"{name}_compressed{ext}\"\n                    output_path = os.path.join(output_folder, output_filename)\n                    \n                    # 保存設定\n                    save_kwargs = {'quality': quality, 'optimize': True}\n                    \n                    # 形式別の保存設定\n                    if img_format == 'PNG':\n                        save_kwargs = {'optimize': True, 'compress_level': 9}\n                    elif img_format == 'WEBP':\n                        save_kwargs = {'quality': quality, 'method': 6}\n                    \n                    # 画像の保存\n                    img.save(output_path, img_format, **save_kwargs)\n                    \n                    # 圧縮後サイズの取得\n                    compressed_size = os.path.getsize(output_path)\n                    total_compressed_size += compressed_size\n                    \n                    # 圧縮率の計算\n                    compression_ratio = (1 - compressed_size / original_size) * 100\n                    \n                    print(f\"圧縮完了: {filename} ({original_size:,} → {compressed_size:,} bytes, {compression_ratio:.1f}%削減)\")\n                    compressed_count += 1\n                    \n            except Exception as e:\n                print(f\"エラー: {filename} の処理中にエラーが発生しました: {e}\")\n                continue\n        \n        # 6. 結果の表示\n        if compressed_count > 0:\n            print(\"\\n=== 画像圧縮完了 ===\")\n            print(f\"処理ファイル数: {compressed_count}/{len(image_files)}個\")\n            print(f\"出力フォルダ: {output_folder}\")\n            \n            # 全体の圧縮率\n            overall_compression = (1 - total_compressed_size / total_original_size) * 100\n            print(f\"総ファイルサイズ: {total_original_size:,} → {total_compressed_size:,} bytes\")\n            print(f\"全体圧縮率: {overall_compression:.1f}%削減\")\n            \n            # 容量削減量\n            size_reduction = total_original_size - total_compressed_size\n            if size_reduction > 1024 * 1024:\n                print(f\"容量削減: {size_reduction / (1024 * 1024):.1f} MB\")\n            else:\n                print(f\"容量削減: {size_reduction / 1024:.1f} KB\")\n            \n            return True\n        else:\n            print(\"エラー: 圧縮に成功したファイルがありません。\")\n            return False\n        \n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        return False\n\n# バッチ処理用の関数\ndef batch_compress_images(input_folder='.', quality=60, max_width=1920):\n    \"\"\"\n    フォルダ内の画像を一括圧縮する関数\n    \n    Args:\n        input_folder (str): 入力フォルダ名\n        quality (int): 圧縮品質（1-100）\n        max_width (int): 最大幅\n    \"\"\"\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    output_folder = f\"compressed_{timestamp}\"\n    \n    print(f\"=== 画像一括圧縮開始 ===\")\n    print(f\"入力フォルダ: {input_folder}\")\n    print(f\"出力フォルダ: {output_folder}\")\n    print(f\"圧縮品質: {quality}%\")\n    print(f\"最大幅: {max_width}px\")\n    \n    success = compress_images(input_folder, output_folder, quality, max_width)\n    \n    if success:\n        print(\"\\n✅ 画像一括圧縮が完了しました！\")\n        print(f\"📁 圧縮された画像は '{output_folder}' フォルダに保存されました。\")\n        print(\"\\n💡 活用のポイント:\")\n        print(\"• メール添付用: 品質60-80%、最大幅1200px\")\n        print(\"• Web掲載用: 品質70-85%、最大幅1920px\")\n        print(\"• SNS投稿用: 品質80-90%、最大幅1080px\")\n        print(\"• 印刷用: 品質90-100%、最大幅3000px\")\n    else:\n        print(\"\\n❌ 処理が失敗しました。エラーメッセージを確認してください。\")\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプル画像が存在しない場合の案内\n    if not any(glob.glob(\"*.jpg\")) and not any(glob.glob(\"*.png\")) and not any(glob.glob(\"*.jpeg\")):\n        print(\"⚠️ 注意: カレントフォルダに画像ファイルが見つかりません。\")\n        print(\"以下の形式の画像ファイルを配置してから実行してください:\")\n        print(\"• JPG, JPEG, PNG, BMP, TIFF, WEBP\")\n        print(\"\\n💡 使用例:\")\n        print(\"• 単一ファイル: compress_images('photo.jpg', 'compressed', 70, 1200)\")\n        print(\"• フォルダ一括: batch_compress_images('.', 60, 1920)\")\n    else:\n        # 一括圧縮の実行\n        batch_compress_images()",
        "libraries": "Pillow",
        "explanation": "画像ファイルを自動で圧縮。メール添付やWeb掲載も楽に。",
        "benefits": ["ファイルサイズ削減", "メール添付が楽", "Web掲載も簡単", "エラー耐性", "一括処理"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで画像ファイル自動圧縮のコードを作成してください。以下の条件でお願いします：\n\n1. Pillowライブラリを使う\n2. 指定したフォルダ内の画像ファイルを読み込む\n3. 画質を調整して圧縮する\n4. 元ファイルは残して新しいファイル名で保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n対象ファイル: JPG、PNG、BMPファイル\n出力形式: 圧縮された画像ファイル\n\nコピペ用プロンプト:\nPythonで画像ファイル自動圧縮のコードを作成してください。Pillowライブラリを使って画像ファイルを自動圧縮して保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 64,
        "category": "文書作成・管理",
        "number": "64/100",
        "title": "取引先別請求書自動作成",
        "desc": "取引先ごとの請求書を自動でPDF化",
        "how_to": "取引先名・金額を入力するだけで請求書PDFを自動作成します。",
        "sample_code": "from reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import A4\nfrom reportlab.lib.units import mm\nfrom reportlab.pdfbase import pdfmetrics\nfrom reportlab.pdfbase.ttfonts import TTFont\nfrom datetime import datetime\nimport os\n\n# エラーハンドリング付きの取引先別請求書自動作成\n\ndef create_invoice(client_name, items, invoice_number=None, output_file='invoice.pdf'):\n    \"\"\"\n    取引先別請求書を自動作成する関数\n    \n    Args:\n        client_name (str): 取引先名\n        items (list): 商品リスト [{'name': '商品名', 'quantity': 数量, 'unit_price': 単価}]\n        invoice_number (str): 請求書番号（自動生成する場合はNone）\n        output_file (str): 出力PDFファイル名\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力値の検証\n        if not client_name or not items:\n            print(\"エラー: 取引先名と商品リストは必須です。\")\n            return False\n        \n        # 2. 請求書番号の自動生成\n        if invoice_number is None:\n            timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n            invoice_number = f\"INV-{timestamp}\"\n        \n        # 3. 金額計算\n        subtotal = 0\n        for item in items:\n            quantity = item.get('quantity', 0)\n            unit_price = item.get('unit_price', 0)\n            item_total = quantity * unit_price\n            item['total'] = item_total\n            subtotal += item_total\n        \n        # 消費税計算（10%）\n        tax_rate = 0.10\n        tax_amount = int(subtotal * tax_rate)\n        total_amount = subtotal + tax_amount\n        \n        # 4. PDFの作成\n        print(f\"請求書PDFを作成しています: {output_file}\")\n        \n        # A4サイズでキャンバス作成\n        c = canvas.Canvas(output_file, pagesize=A4)\n        width, height = A4\n        \n        # フォント設定（日本語対応）\n        try:\n            # 日本語フォントの設定（利用可能な場合）\n            pdfmetrics.registerFont(TTFont('IPAexGothic', 'ipaexg.ttf'))\n            font_name = 'IPAexGothic'\n        except:\n            # フォールバック\n            font_name = 'Helvetica'\n        \n        # 5. ヘッダー部分\n        y_position = height - 50*mm\n        \n        # 会社情報\n        c.setFont(font_name, 16)\n        c.drawString(50*mm, y_position, '株式会社サンプル')\n        \n        y_position -= 10*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '〒100-0001 東京都千代田区千代田1-1-1')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, 'TEL: 03-1234-5678')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, 'FAX: 03-1234-5679')\n        \n        # 請求書タイトル\n        y_position -= 20*mm\n        c.setFont(font_name, 20)\n        c.drawString(width/2 - 30*mm, y_position, '請 求 書')\n        \n        # 請求書番号と日付\n        y_position -= 15*mm\n        c.setFont(font_name, 12)\n        c.drawString(50*mm, y_position, f'請求書番号: {invoice_number}')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, f'請求日: {datetime.now().strftime(\"%Y年%m月%d日\")}')\n        \n        # 取引先情報\n        y_position -= 15*mm\n        c.setFont(font_name, 14)\n        c.drawString(50*mm, y_position, f'{client_name} 御中')\n        \n        # 6. 商品明細表\n        y_position -= 20*mm\n        \n        # 表のヘッダー\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '商品名')\n        c.drawString(120*mm, y_position, '数量')\n        c.drawString(140*mm, y_position, '単価')\n        c.drawString(160*mm, y_position, '金額')\n        \n        # 区切り線\n        y_position -= 2*mm\n        c.line(50*mm, y_position, 180*mm, y_position)\n        \n        # 商品明細\n        for item in items:\n            y_position -= 8*mm\n            \n            # 商品名（長い場合は省略）\n            name = item['name']\n            if len(name) > 15:\n                name = name[:15] + '...'\n            c.drawString(50*mm, y_position, name)\n            \n            # 数量\n            c.drawString(120*mm, y_position, f\"{item['quantity']:,}\")\n            \n            # 単価\n            c.drawString(140*mm, y_position, f\"{item['unit_price']:,}円\")\n            \n            # 金額\n            c.drawString(160*mm, y_position, f\"{item['total']:,}円\")\n        \n        # 区切り線\n        y_position -= 5*mm\n        c.line(50*mm, y_position, 180*mm, y_position)\n        \n        # 7. 合計金額\n        y_position -= 10*mm\n        c.setFont(font_name, 12)\n        c.drawString(120*mm, y_position, '小計:')\n        c.drawString(160*mm, y_position, f'{subtotal:,}円')\n        \n        y_position -= 5*mm\n        c.drawString(120*mm, y_position, '消費税:')\n        c.drawString(160*mm, y_position, f'{tax_amount:,}円')\n        \n        y_position -= 5*mm\n        c.setFont(font_name, 14)\n        c.drawString(120*mm, y_position, '合計:')\n        c.drawString(160*mm, y_position, f'{total_amount:,}円')\n        \n        # 8. 支払条件\n        y_position -= 20*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '支払条件: 月末締め翌月末払い')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '支払方法: 銀行振込')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '振込先: サンプル銀行 本店 普通 1234567')\n        \n        # 9. 備考\n        y_position -= 15*mm\n        c.drawString(50*mm, y_position, '備考:')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• この請求書は自動生成されています')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• ご不明な点がございましたらお問い合わせください')\n        \n        # 10. PDFの保存\n        c.save()\n        \n        # 11. 結果の表示\n        print(\"\\n=== 請求書作成完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"請求書番号: {invoice_number}\")\n        print(f\"取引先: {client_name}\")\n        print(f\"商品数: {len(items)}点\")\n        print(f\"小計: {subtotal:,}円\")\n        print(f\"消費税: {tax_amount:,}円\")\n        print(f\"合計: {total_amount:,}円\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n        return False\n\n# サンプル請求書の作成\ndef create_sample_invoice():\n    \"\"\"サンプル請求書を作成する関数\"\"\"\n    # サンプル商品データ\n    sample_items = [\n        {'name': 'Webサイト制作', 'quantity': 1, 'unit_price': 500000},\n        {'name': 'ドメイン取得費', 'quantity': 1, 'unit_price': 3000},\n        {'name': 'サーバー利用料（月額）', 'quantity': 12, 'unit_price': 5000}\n    ]\n    \n    success = create_invoice(\n        client_name='株式会社サンプルクライアント',\n        items=sample_items,\n        output_file='sample_invoice.pdf'\n    )\n    \n    if success:\n        print(\"\\n✅ サンプル請求書が作成されました！\")\n        print(\"📁 ファイル名: sample_invoice.pdf\")\n        print(\"\\n💡 使用方法:\")\n        print(\"• 商品リストを変更して独自の請求書を作成\")\n        print(\"• 取引先名を変更して複数の請求書を作成\")\n        print(\"• 請求書番号を指定して管理しやすくする\")\n    else:\n        print(\"\\n❌ サンプル請求書の作成に失敗しました。\")\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプル請求書の作成\n    create_sample_invoice()",
        "libraries": "reportlab",
        "explanation": "請求書を自動でPDF化。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短", "エラー耐性", "自動計算"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別請求書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 取引先名、商品名、数量、単価を設定する\n3. 小計、消費税、合計金額を計算する\n4. 見やすいレイアウトでPDFを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 取引先名、商品名、数量、単価\n出力形式: PDFファイル\n\nコピペ用プロンプト:\nPythonで取引先別請求書自動作成のコードを作成してください。reportlabライブラリを使って取引先名・金額からPDF請求書を自動生成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 65,
        "category": "スタッフ管理",
        "number": "65/100",
        "title": "社員連絡網自動生成",
        "desc": "社員連絡網を自動でExcel化",
        "how_to": "CSVや手入力データから社員連絡網を自動でExcel化します。",
        "sample_code": "import pandas as pd\nimport os\nfrom datetime import datetime\n\n# エラーハンドリング付きの社員連絡網自動生成\n\ndef create_contact_list(input_file='employees.csv', output_file='contact_list.xlsx'):\n    \"\"\"\n    社員連絡網を自動でExcel化する関数\n    \n    Args:\n        input_file (str): 入力CSVファイル名（デフォルト: employees.csv）\n        output_file (str): 出力Excelファイル名（デフォルト: contact_list.xlsx）\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力ファイルの存在確認\n        if not os.path.exists(input_file):\n            print(f\"エラー: 入力ファイル '{input_file}' が見つかりません。\")\n            print(\"以下の形式でCSVファイルを作成してください:\")\n            print(\"氏名,部署,役職,内線番号,携帯電話,メールアドレス,緊急連絡先\")\n            print(\"山田太郎,営業部,主任,1001,090-1234-5678,yamada@example.com,080-9876-5432\")\n            print(\"佐藤花子,総務部,課長,2001,080-2345-6789,sato@example.com,090-8765-4321\")\n            return False\n        \n        # 2. CSVファイルの読み込み\n        print(f\"CSVファイル '{input_file}' を読み込んでいます...\")\n        df = pd.read_csv(input_file, encoding='utf-8')\n        \n        # 3. 必要な列の存在確認\n        required_columns = ['氏名']\n        missing_columns = [col for col in required_columns if col not in df.columns]\n        if missing_columns:\n            print(f\"エラー: 必要な列が見つかりません: {missing_columns}\")\n            print(f\"現在の列: {list(df.columns)}\")\n            return False\n        \n        # 4. データの前処理\n        print(\"データを前処理しています...\")\n        \n        # 欠損値の処理\n        df = df.fillna('')\n        \n        # 氏名順にソート\n        df_sorted = df.sort_values('氏名').reset_index(drop=True)\n        \n        # 5. 部署別集計の計算\n        print(\"部署別集計を計算しています...\")\n        \n        dept_summary = None\n        if '部署' in df.columns:\n            dept_counts = df['部署'].value_counts().sort_index()\n            dept_summary = dept_counts.to_frame('人数')\n            dept_summary['部署名'] = dept_summary.index\n            dept_summary = dept_summary[['部署名', '人数']].reset_index(drop=True)\n        \n        # 6. 役職別集計の計算\n        position_summary = None\n        if '役職' in df.columns:\n            position_counts = df['役職'].value_counts()\n            position_summary = position_counts.to_frame('人数')\n            position_summary['役職名'] = position_summary.index\n            position_summary = position_summary[['役職名', '人数']].reset_index(drop=True)\n        \n        # 7. 統計情報の計算\n        total_employees = len(df)\n        departments_count = len(df['部署'].unique()) if '部署' in df.columns else 0\n        positions_count = len(df['役職'].unique()) if '役職' in df.columns else 0\n        \n        # 連絡手段の統計\n        contact_stats = {\n            '内線番号あり': len(df[df['内線番号'] != '']) if '内線番号' in df.columns else 0,\n            '携帯電話あり': len(df[df['携帯電話'] != '']) if '携帯電話' in df.columns else 0,\n            'メールアドレスあり': len(df[df['メールアドレス'] != '']) if 'メールアドレス' in df.columns else 0,\n            '緊急連絡先あり': len(df[df['緊急連絡先'] != '']) if '緊急連絡先' in df.columns else 0\n        }\n        \n        # 8. Excelファイルに保存\n        print(f\"Excelファイル '{output_file}' に保存しています...\")\n        \n        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n            # 全社員連絡網シート\n            df_sorted.to_excel(writer, sheet_name='全社員連絡網', index=False)\n            \n            # 部署別連絡網シート（部署データがある場合）\n            if '部署' in df.columns and dept_summary is not None:\n                for dept in df['部署'].unique():\n                    if dept:  # 空でない部署のみ\n                        dept_data = df[df['部署'] == dept].sort_values('氏名').reset_index(drop=True)\n                        sheet_name = f'{dept}連絡網'[:31]  # Excelシート名は31文字まで\n                        dept_data.to_excel(writer, sheet_name=sheet_name, index=False)\n            \n            # 部署別集計シート\n            if dept_summary is not None:\n                dept_summary.to_excel(writer, sheet_name='部署別集計', index=False)\n            \n            # 役職別集計シート\n            if position_summary is not None:\n                position_summary.to_excel(writer, sheet_name='役職別集計', index=False)\n            \n            # 統計情報シート\n            stats_data = {\n                '項目': [\n                    '総社員数', '部署数', '役職数', '作成日時',\n                    '内線番号登録者数', '携帯電話登録者数', 'メールアドレス登録者数', '緊急連絡先登録者数'\n                ],\n                '数値': [\n                    total_employees,\n                    departments_count,\n                    positions_count,\n                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n                    contact_stats['内線番号あり'],\n                    contact_stats['携帯電話あり'],\n                    contact_stats['メールアドレスあり'],\n                    contact_stats['緊急連絡先あり']\n                ]\n            }\n            stats_df = pd.DataFrame(stats_data)\n            stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n        \n        # 9. 結果の表示\n        print(\"\\n=== 社員連絡網作成完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"総社員数: {total_employees}人\")\n        print(f\"部署数: {departments_count}部署\")\n        print(f\"役職数: {positions_count}役職\")\n        \n        # 部署別人数の表示\n        if dept_summary is not None:\n            print(\"\\n【部署別人数】\")\n            for _, row in dept_summary.iterrows():\n                print(f\"• {row['部署名']}: {row['人数']}人\")\n        \n        # 連絡手段の登録状況\n        print(\"\\n【連絡手段登録状況】\")\n        for method, count in contact_stats.items():\n            percentage = (count / total_employees) * 100 if total_employees > 0 else 0\n            print(f\"• {method}: {count}人 ({percentage:.1f}%)\")\n        \n        return True\n        \n    except FileNotFoundError:\n        print(f\"エラー: ファイル '{input_file}' が見つかりません。\")\n        return False\n    except pd.errors.EmptyDataError:\n        print(f\"エラー: ファイル '{input_file}' が空です。\")\n        return False\n    except pd.errors.ParserError as e:\n        print(f\"エラー: CSVファイルの形式が正しくありません: {e}\")\n        return False\n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        return False\n\n# サンプルデータの作成（初回実行時のみ）\ndef create_sample_employee_data():\n    \"\"\"サンプル社員データを作成する関数\"\"\"\n    sample_data = {\n        '氏名': [\n            '山田太郎', '佐藤花子', '鈴木一郎', '高橋美咲', '伊藤健太',\n            '渡辺真理', '田中次郎', '中村恵子', '小林正男', '加藤由美',\n            '斎藤雅子', '山本裕子', '井上博文', '松本和子', '山口智子'\n        ],\n        '部署': [\n            '営業部', '総務部', '開発部', '営業部', '開発部',\n            '総務部', '営業部', '開発部', '営業部', '総務部',\n            '開発部', '営業部', '開発部', '総務部', '営業部'\n        ],\n        '役職': [\n            '主任', '課長', '主任', '部長', '主任',\n            '課長', '主任', '主任', '部長', '主任',\n            '課長', '主任', '主任', '課長', '主任'\n        ],\n        '内線番号': [\n            '1001', '2001', '3001', '1002', '3002',\n            '2002', '1003', '3003', '1004', '2003',\n            '3004', '1005', '3005', '2004', '1006'\n        ],\n        '携帯電話': [\n            '090-1234-5678', '080-2345-6789', '090-3456-7890', '080-4567-8901', '090-5678-9012',\n            '080-6789-0123', '090-7890-1234', '080-8901-2345', '090-9012-3456', '080-0123-4567',\n            '090-1234-5678', '080-2345-6789', '090-3456-7890', '080-4567-8901', '090-5678-9012'\n        ],\n        'メールアドレス': [\n            'yamada@example.com', 'sato@example.com', 'suzuki@example.com', 'takahashi@example.com', 'ito@example.com',\n            'watanabe@example.com', 'tanaka@example.com', 'nakamura@example.com', 'kobayashi@example.com', 'kato@example.com',\n            'saito@example.com', 'yamamoto@example.com', 'inoue@example.com', 'matsumoto@example.com', 'yamaguchi@example.com'\n        ],\n        '緊急連絡先': [\n            '080-9876-5432', '090-8765-4321', '080-7654-3210', '090-6543-2109', '080-5432-1098',\n            '090-4321-0987', '080-3210-9876', '090-2109-8765', '080-1098-7654', '090-0987-6543',\n            '080-9876-5432', '090-8765-4321', '080-7654-3210', '090-6543-2109', '080-5432-1098'\n        ]\n    }\n    \n    df = pd.DataFrame(sample_data)\n    df.to_csv('employees.csv', index=False, encoding='utf-8')\n    print(\"サンプル社員データ 'employees.csv' を作成しました。\")\n    return df\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプルデータが存在しない場合は作成\n    if not os.path.exists('employees.csv'):\n        print(\"サンプル社員データを作成しています...\")\n        create_sample_employee_data()\n    \n    # 社員連絡網の作成\n    success = create_contact_list()\n    \n    if success:\n        print(\"\\n✅ 社員連絡網が作成されました！\")\n        print(\"📁 出力ファイル: contact_list.xlsx\")\n        print(\"📊 作成されたシート:\")\n        print(\"   - 全社員連絡網: 全社員の連絡先一覧\")\n        print(\"   - 部署別連絡網: 部署ごとの連絡先一覧\")\n        print(\"   - 部署別集計: 部署ごとの人数\")\n        print(\"   - 役職別集計: 役職ごとの人数\")\n        print(\"   - 統計情報: 全体の統計データ\")\n        print(\"\\n💡 活用のポイント:\")\n        print(\"• 部署別シートで部署内の連絡先を確認\")\n        print(\"• 緊急時は緊急連絡先を使用\")\n        print(\"• 定期的に連絡先情報を更新\")\n    else:\n        print(\"\\n❌ 処理が失敗しました。エラーメッセージを確認してください。\")",
        "libraries": "pandas, openpyxl",
        "explanation": "社員連絡網を自動で作成。配布・管理が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽", "エラー耐性", "部署別整理"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員連絡網自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 社員の基本情報（氏名、部署、電話番号、メールアドレス）を管理する\n3. 部署別にグループ化して整理する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 氏名、部署、電話番号、メールアドレス\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社員連絡網自動生成のコードを作成してください。pandasライブラリを使って社員情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 66,
        "category": "文書作成・管理",
        "number": "66/100",
        "title": "取引先別納品書自動作成",
        "desc": "取引先ごとの納品書を自動でPDF化",
        "how_to": "取引先名・商品名・数量を入力するだけで納品書PDFを自動作成します。",
        "sample_code": "from reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import A4\nfrom reportlab.lib.units import mm\nfrom reportlab.pdfbase import pdfmetrics\nfrom reportlab.pdfbase.ttfonts import TTFont\nfrom datetime import datetime\nimport os\n\n# エラーハンドリング付きの取引先別納品書自動作成\n\ndef create_delivery_note(client_name, items, delivery_date=None, delivery_number=None, output_file='delivery_note.pdf'):\n    \"\"\"\n    取引先別納品書を自動作成する関数\n    \n    Args:\n        client_name (str): 取引先名\n        items (list): 商品リスト [{'name': '商品名', 'quantity': 数量, 'unit': '単位'}]\n        delivery_date (str): 納品日（デフォルト: 今日）\n        delivery_number (str): 納品書番号（自動生成する場合はNone）\n        output_file (str): 出力PDFファイル名\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力値の検証\n        if not client_name or not items:\n            print(\"エラー: 取引先名と商品リストは必須です。\")\n            return False\n        \n        # 2. 納品日の設定\n        if delivery_date is None:\n            delivery_date = datetime.now().strftime('%Y年%m月%d日')\n        \n        # 3. 納品書番号の自動生成\n        if delivery_number is None:\n            timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n            delivery_number = f\"DEL-{timestamp}\"\n        \n        # 4. 商品数の計算\n        total_items = sum(item.get('quantity', 0) for item in items)\n        \n        # 5. PDFの作成\n        print(f\"納品書PDFを作成しています: {output_file}\")\n        \n        # A4サイズでキャンバス作成\n        c = canvas.Canvas(output_file, pagesize=A4)\n        width, height = A4\n        \n        # フォント設定（日本語対応）\n        try:\n            # 日本語フォントの設定（利用可能な場合）\n            pdfmetrics.registerFont(TTFont('IPAexGothic', 'ipaexg.ttf'))\n            font_name = 'IPAexGothic'\n        except:\n            # フォールバック\n            font_name = 'Helvetica'\n        \n        # 6. ヘッダー部分\n        y_position = height - 50*mm\n        \n        # 会社情報\n        c.setFont(font_name, 16)\n        c.drawString(50*mm, y_position, '株式会社サンプル')\n        \n        y_position -= 10*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '〒100-0001 東京都千代田区千代田1-1-1')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, 'TEL: 03-1234-5678')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, 'FAX: 03-1234-5679')\n        \n        # 納品書タイトル\n        y_position -= 20*mm\n        c.setFont(font_name, 20)\n        c.drawString(width/2 - 30*mm, y_position, '納 品 書')\n        \n        # 納品書番号と日付\n        y_position -= 15*mm\n        c.setFont(font_name, 12)\n        c.drawString(50*mm, y_position, f'納品書番号: {delivery_number}')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, f'納品日: {delivery_date}')\n        \n        # 取引先情報\n        y_position -= 15*mm\n        c.setFont(font_name, 14)\n        c.drawString(50*mm, y_position, f'{client_name} 御中')\n        \n        # 7. 商品明細表\n        y_position -= 20*mm\n        \n        # 表のヘッダー\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '商品名')\n        c.drawString(120*mm, y_position, '数量')\n        c.drawString(140*mm, y_position, '単位')\n        c.drawString(160*mm, y_position, '備考')\n        \n        # 区切り線\n        y_position -= 2*mm\n        c.line(50*mm, y_position, 180*mm, y_position)\n        \n        # 商品明細\n        for item in items:\n            y_position -= 8*mm\n            \n            # 商品名（長い場合は省略）\n            name = item['name']\n            if len(name) > 15:\n                name = name[:15] + '...'\n            c.drawString(50*mm, y_position, name)\n            \n            # 数量\n            c.drawString(120*mm, y_position, f\"{item['quantity']:,}\")\n            \n            # 単位\n            unit = item.get('unit', '個')\n            c.drawString(140*mm, y_position, unit)\n            \n            # 備考\n            note = item.get('note', '')\n            if len(note) > 10:\n                note = note[:10] + '...'\n            c.drawString(160*mm, y_position, note)\n        \n        # 区切り線\n        y_position -= 5*mm\n        c.line(50*mm, y_position, 180*mm, y_position)\n        \n        # 8. 合計\n        y_position -= 10*mm\n        c.setFont(font_name, 12)\n        c.drawString(120*mm, y_position, '合計:')\n        c.drawString(140*mm, y_position, f'{total_items:,}点')\n        \n        # 9. 納品条件\n        y_position -= 20*mm\n        c.setFont(font_name, 10)\n        c.drawString(50*mm, y_position, '納品条件:')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• 商品は指定された納品日までに納品いたします')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• 納品後、検収書のご提出をお願いいたします')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• ご不明な点がございましたらお問い合わせください')\n        \n        # 10. 検収欄\n        y_position -= 20*mm\n        c.drawString(50*mm, y_position, '検収欄:')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '検収日: ___________ 年 ___ 月 ___ 日')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '検収者: ________________________________')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '印: ________________________________')\n        \n        # 11. 備考\n        y_position -= 15*mm\n        c.drawString(50*mm, y_position, '備考:')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• この納品書は自動生成されています')\n        \n        y_position -= 5*mm\n        c.drawString(50*mm, y_position, '• 商品の品質・数量をご確認の上、検収をお願いいたします')\n        \n        # 12. PDFの保存\n        c.save()\n        \n        # 13. 結果の表示\n        print(\"\\n=== 納品書作成完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"納品書番号: {delivery_number}\")\n        print(f\"取引先: {client_name}\")\n        print(f\"納品日: {delivery_date}\")\n        print(f\"商品数: {len(items)}点\")\n        print(f\"総数量: {total_items:,}点\")\n        \n        # 商品明細の表示\n        print(\"\\n【納品商品明細】\")\n        for i, item in enumerate(items, 1):\n            print(f\"{i}. {item['name']}: {item['quantity']:,}{item.get('unit', '個')}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n        return False\n\n# サンプル納品書の作成\ndef create_sample_delivery_note():\n    \"\"\"サンプル納品書を作成する関数\"\"\"\n    # サンプル商品データ\n    sample_items = [\n        {'name': 'ノートPC', 'quantity': 5, 'unit': '台', 'note': '最新モデル'},\n        {'name': 'プリンター', 'quantity': 2, 'unit': '台', 'note': 'カラー対応'},\n        {'name': 'USBメモリ', 'quantity': 20, 'unit': '個', 'note': '32GB'},\n        {'name': 'マウス', 'quantity': 10, 'unit': '個', 'note': 'ワイヤレス'}\n    ]\n    \n    success = create_delivery_note(\n        client_name='株式会社サンプルクライアント',\n        items=sample_items,\n        delivery_date='2024年8月15日',\n        output_file='sample_delivery_note.pdf'\n    )\n    \n    if success:\n        print(\"\\n✅ サンプル納品書が作成されました！\")\n        print(\"📁 ファイル名: sample_delivery_note.pdf\")\n        print(\"\\n💡 使用方法:\")\n        print(\"• 商品リストを変更して独自の納品書を作成\")\n        print(\"• 取引先名を変更して複数の納品書を作成\")\n        print(\"• 納品書番号を指定して管理しやすくする\")\n        print(\"• 検収欄に印鑑を押して正式な納品書として使用\")\n    else:\n        print(\"\\n❌ サンプル納品書の作成に失敗しました。\")\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプル納品書の作成\n    create_sample_delivery_note()",
        "libraries": "reportlab",
        "explanation": "納品書を自動でPDF化。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短", "エラー耐性", "自動番号生成"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別納品書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 取引先名、商品名、数量、納品日を設定する\n3. 納品書番号を自動生成する\n4. 見やすいレイアウトでPDFを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 取引先名、商品名、数量、納品日\n出力形式: PDFファイル\n\nコピペ用プロンプト:\nPythonで取引先別納品書自動作成のコードを作成してください。reportlabライブラリを使って取引先名・商品名・数量からPDF納品書を自動生成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 67,
        "category": "スタッフ管理",
        "number": "67/100",
        "title": "社内イベント出欠リスト自動作成",
        "desc": "社内イベントの出欠リストを自動でExcel化",
        "how_to": "CSVや手入力データから出欠リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\nimport os\nfrom datetime import datetime\n\n# エラーハンドリング付きの社内イベント出欠リスト自動作成\n\ndef create_event_attendance_list(input_file='event_attendance.csv', output_file='event_attendance.xlsx'):\n    \"\"\"\n    社内イベントの出欠リストを自動でExcel化する関数\n    \n    Args:\n        input_file (str): 入力CSVファイル名（デフォルト: event_attendance.csv）\n        output_file (str): 出力Excelファイル名（デフォルト: event_attendance.xlsx）\n    \n    Returns:\n        bool: 処理成功時True、失敗時False\n    \"\"\"\n    try:\n        # 1. 入力ファイルの存在確認\n        if not os.path.exists(input_file):\n            print(f\"エラー: 入力ファイル '{input_file}' が見つかりません。\")\n            print(\"以下の形式でCSVファイルを作成してください:\")\n            print(\"イベント名,開催日,氏名,部署,出欠状況,参加費,備考\")\n            print(\"忘年会,2024-12-20,山田太郎,営業部,出席,5000,アルコール不可\")\n            print(\"忘年会,2024-12-20,佐藤花子,総務部,欠席,0,体調不良\")\n            return False\n        \n        # 2. CSVファイルの読み込み\n        print(f\"CSVファイル '{input_file}' を読み込んでいます...\")\n        df = pd.read_csv(input_file, encoding='utf-8')\n        \n        # 3. 必要な列の存在確認\n        required_columns = ['イベント名', '氏名', '出欠状況']\n        missing_columns = [col for col in required_columns if col not in df.columns]\n        if missing_columns:\n            print(f\"エラー: 必要な列が見つかりません: {missing_columns}\")\n            print(f\"現在の列: {list(df.columns)}\")\n            return False\n        \n        # 4. データの前処理\n        print(\"データを前処理しています...\")\n        \n        # 欠損値の処理\n        df = df.fillna('')\n        \n        # 出欠状況の正規化\n        df['出欠状況'] = df['出欠状況'].str.strip()\n        \n        # 5. イベント別集計の計算\n        print(\"イベント別集計を計算しています...\")\n        \n        # イベント別出欠集計\n        event_summary = df.groupby('イベント名').agg({\n            '氏名': 'count',\n            '出欠状況': lambda x: (x == '出席').sum()\n        }).rename(columns={'氏名': '総参加者数', '出欠状況': '出席者数'})\n        \n        event_summary['欠席者数'] = event_summary['総参加者数'] - event_summary['出席者数']\n        event_summary['出席率'] = (event_summary['出席者数'] / event_summary['総参加者数'] * 100).round(1)\n        \n        # 6. 部署別集計の計算\n        dept_summary = None\n        if '部署' in df.columns:\n            print(\"部署別集計を計算しています...\")\n            dept_attendance = df.groupby(['部署', '出欠状況']).size().unstack(fill_value=0)\n            if '出席' in dept_attendance.columns:\n                dept_attendance['出席率'] = (dept_attendance['出席'] / dept_attendance.sum(axis=1) * 100).round(1)\n            dept_summary = dept_attendance\n        \n        # 7. 参加費集計の計算\n        fee_summary = None\n        if '参加費' in df.columns:\n            print(\"参加費集計を計算しています...\")\n            # 参加費を数値型に変換\n            df['参加費'] = pd.to_numeric(df['参加費'], errors='coerce').fillna(0)\n            \n            fee_by_event = df.groupby('イベント名')['参加費'].agg(['sum', 'mean', 'count']).round(0)\n            fee_by_event.columns = ['総参加費', '平均参加費', '参加者数']\n            fee_summary = fee_by_event\n        \n        # 8. 統計情報の計算\n        total_events = len(event_summary)\n        total_participants = len(df)\n        total_attendees = len(df[df['出欠状況'] == '出席'])\n        overall_attendance_rate = (total_attendees / total_participants * 100) if total_participants > 0 else 0\n        \n        # 9. Excelファイルに保存\n        print(f\"Excelファイル '{output_file}' に保存しています...\")\n        \n        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n            # 全出欠リストシート\n            df_sorted = df.sort_values(['イベント名', '氏名']).reset_index(drop=True)\n            df_sorted.to_excel(writer, sheet_name='全出欠リスト', index=False)\n            \n            # イベント別出欠リストシート\n            for event_name in df['イベント名'].unique():\n                if event_name:  # 空でないイベント名のみ\n                    event_data = df[df['イベント名'] == event_name].sort_values('氏名').reset_index(drop=True)\n                    sheet_name = f'{event_name}出欠'[:31]  # Excelシート名は31文字まで\n                    event_data.to_excel(writer, sheet_name=sheet_name, index=False)\n            \n            # イベント別集計シート\n            event_summary.to_excel(writer, sheet_name='イベント別集計')\n            \n            # 部署別集計シート\n            if dept_summary is not None:\n                dept_summary.to_excel(writer, sheet_name='部署別集計')\n            \n            # 参加費集計シート\n            if fee_summary is not None:\n                fee_summary.to_excel(writer, sheet_name='参加費集計')\n            \n            # 統計情報シート\n            stats_data = {\n                '項目': [\n                    '総イベント数', '総参加者数', '総出席者数', '全体出席率', '作成日時',\n                    '最多参加イベント', '最高出席率イベント', '最低出席率イベント'\n                ],\n                '数値': [\n                    total_events,\n                    total_participants,\n                    total_attendees,\n                    f\"{overall_attendance_rate:.1f}%\",\n                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n                    event_summary['総参加者数'].idxmax() if len(event_summary) > 0 else 'データなし',\n                    event_summary['出席率'].idxmax() if len(event_summary) > 0 else 'データなし',\n                    event_summary['出席率'].idxmin() if len(event_summary) > 0 else 'データなし'\n                ]\n            }\n            stats_df = pd.DataFrame(stats_data)\n            stats_df.to_excel(writer, sheet_name='統計情報', index=False)\n        \n        # 10. 結果の表示\n        print(\"\\n=== イベント出欠リスト作成完了 ===\")\n        print(f\"出力ファイル: {output_file}\")\n        print(f\"総イベント数: {total_events}件\")\n        print(f\"総参加者数: {total_participants}人\")\n        print(f\"総出席者数: {total_attendees}人\")\n        print(f\"全体出席率: {overall_attendance_rate:.1f}%\")\n        \n        # イベント別出席率の表示\n        print(\"\\n【イベント別出席率】\")\n        for event_name, row in event_summary.iterrows():\n            print(f\"• {event_name}: {row['出席者数']}/{row['総参加者数']}人 ({row['出席率']:.1f}%)\")\n        \n        # 参加費の表示（データがある場合）\n        if fee_summary is not None:\n            print(\"\\n【参加費集計】\")\n            for event_name, row in fee_summary.iterrows():\n                print(f\"• {event_name}: 総額{row['総参加費']:,}円 (平均{row['平均参加費']:,}円)\")\n        \n        return True\n        \n    except FileNotFoundError:\n        print(f\"エラー: ファイル '{input_file}' が見つかりません。\")\n        return False\n    except pd.errors.EmptyDataError:\n        print(f\"エラー: ファイル '{input_file}' が空です。\")\n        return False\n    except pd.errors.ParserError as e:\n        print(f\"エラー: CSVファイルの形式が正しくありません: {e}\")\n        return False\n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        return False\n\n# サンプルデータの作成（初回実行時のみ）\ndef create_sample_event_data():\n    \"\"\"サンプルイベント出欠データを作成する関数\"\"\"\n    sample_data = {\n        'イベント名': [\n            '忘年会', '忘年会', '忘年会', '忘年会', '忘年会',\n            '新年会', '新年会', '新年会', '新年会', '新年会',\n            '社員旅行', '社員旅行', '社員旅行', '社員旅行', '社員旅行'\n        ],\n        '開催日': [\n            '2024-12-20', '2024-12-20', '2024-12-20', '2024-12-20', '2024-12-20',\n            '2025-01-15', '2025-01-15', '2025-01-15', '2025-01-15', '2025-01-15',\n            '2024-07-20', '2024-07-20', '2024-07-20', '2024-07-20', '2024-07-20'\n        ],\n        '氏名': [\n            '山田太郎', '佐藤花子', '鈴木一郎', '高橋美咲', '伊藤健太',\n            '渡辺真理', '田中次郎', '中村恵子', '小林正男', '加藤由美',\n            '斎藤雅子', '山本裕子', '井上博文', '松本和子', '山口智子'\n        ],\n        '部署': [\n            '営業部', '総務部', '開発部', '営業部', '開発部',\n            '総務部', '営業部', '開発部', '営業部', '総務部',\n            '開発部', '営業部', '開発部', '総務部', '営業部'\n        ],\n        '出欠状況': [\n            '出席', '欠席', '出席', '出席', '欠席',\n            '出席', '出席', '出席', '欠席', '出席',\n            '出席', '出席', '欠席', '出席', '出席'\n        ],\n        '参加費': [\n            5000, 0, 5000, 5000, 0,\n            3000, 3000, 3000, 0, 3000,\n            15000, 15000, 0, 15000, 15000\n        ],\n        '備考': [\n            'アルコール不可', '体調不良', '', '', '家庭の事情',\n            '', '', '', '体調不良', '',\n            '', '', '家庭の事情', '', ''\n        ]\n    }\n    \n    df = pd.DataFrame(sample_data)\n    df.to_csv('event_attendance.csv', index=False, encoding='utf-8')\n    print(\"サンプルイベント出欠データ 'event_attendance.csv' を作成しました。\")\n    return df\n\n# メイン実行部分\nif __name__ == \"__main__\":\n    # サンプルデータが存在しない場合は作成\n    if not os.path.exists('event_attendance.csv'):\n        print(\"サンプルイベント出欠データを作成しています...\")\n        create_sample_event_data()\n    \n    # イベント出欠リストの作成\n    success = create_event_attendance_list()\n    \n    if success:\n        print(\"\\n✅ イベント出欠リストが作成されました！\")\n        print(\"📁 出力ファイル: event_attendance.xlsx\")\n        print(\"📊 作成されたシート:\")\n        print(\"   - 全出欠リスト: 全イベントの出欠一覧\")\n        print(\"   - イベント別出欠: イベントごとの出欠一覧\")\n        print(\"   - イベント別集計: イベントごとの出席率\")\n        print(\"   - 部署別集計: 部署ごとの出席率\")\n        print(\"   - 参加費集計: イベントごとの参加費\")\n        print(\"   - 統計情報: 全体の統計データ\")\n        print(\"\\n💡 活用のポイント:\")\n        print(\"• イベント別シートで出席者を確認\")\n        print(\"• 出席率の低いイベントを分析して改善\")\n        print(\"• 参加費の集計で予算管理に活用\")\n    else:\n        print(\"\\n❌ 処理が失敗しました。エラーメッセージを確認してください。\")",
        "libraries": "pandas, openpyxl",
        "explanation": "社内イベントの出欠リストを自動で作成。配布・管理が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽", "エラー耐性", "出席率分析"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内イベント出欠リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. イベント名、参加者名、出欠状況を管理する\n3. 出欠状況を集計して統計を表示する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: イベント名、参加者名、出欠状況\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内イベント出欠リスト自動作成のコードを作成してください。pandasライブラリを使って出欠情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
]

EXTRA_TOOLS += [
    {
        "id": 68,
        "category": "顧客管理",
        "number": "68/100",
        "title": "顧客来店履歴自動集計",
        "desc": "顧客の来店履歴を自動で集計・Excel保存",
        "how_to": "CSV来店データから顧客ごとの来店回数を自動集計しExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('visit.csv')\ncounts = df['氏名'].value_counts()\ncounts.to_excel('visit_counts.xlsx')\nprint('来店履歴集計完了！')",
        "libraries": "pandas",
        "explanation": "顧客の来店履歴を自動で集計。リピーター分析や販促に活用。",
        "benefits": ["リピーター分析", "Excel化", "販促に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客来店履歴自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの来店データを読み込む\n3. 顧客別に来店回数を集計する\n4. 来店頻度で顧客をランク付けする\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客名、来店日の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで顧客来店履歴自動集計のコードを作成してください。pandasライブラリを使ってCSVファイルから顧客来店履歴を集計してExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 69,
        "category": "スタッフ管理",
        "number": "69/100",
        "title": "社内備品管理リスト自動作成",
        "desc": "社内備品の管理リストを自動でExcel化",
        "how_to": "CSVや手入力データから備品管理リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'備品名': 'ノートPC', '台数': 10, '管理者': '山田'},\n    {'備品名': 'プロジェクター', '台数': 2, '管理者': '佐藤'}\n]\npd.DataFrame(data).to_excel('bihin.xlsx', index=False)\nprint('備品リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "社内備品の管理リストを自動で作成。棚卸しや管理が楽に。",
        "benefits": ["棚卸しが楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内備品管理リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 備品名、台数、管理者、購入日を管理する\n3. 備品別に在庫状況を表示する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 備品名、台数、管理者、購入日\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内備品管理リスト自動作成のコードを作成してください。pandasライブラリを使って備品情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 70,
        "category": "データ処理・分析",
        "number": "70/100",
        "title": "取引先別支払予定表自動作成",
        "desc": "取引先ごとの支払予定表を自動でExcel化",
        "how_to": "CSV支払データから取引先別の支払予定表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('payments.csv')\ndf = df.sort_values(['取引先', '支払日'])\ndf.to_excel('payments_schedule.xlsx', index=False)\nprint('支払予定表作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先別の支払予定表を自動で作成。資金繰り管理も楽に。",
        "benefits": ["資金繰り管理", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別支払予定表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの支払データを読み込む\n3. 取引先別に支払予定を整理する\n4. 支払日順にソートしてExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先、支払日、金額の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで取引先別支払予定表自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルから取引先別支払予定表をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 71,
        "category": "スタッフ管理",
        "number": "71/100",
        "title": "社員健康診断リスト自動整理",
        "desc": "社員健康診断リストを自動で整理・Excel化",
        "how_to": "CSV健康診断データを自動で整理しExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('health.csv')\ndf = df.sort_values('氏名')\ndf.to_excel('health_sorted.xlsx', index=False)\nprint('健康診断リスト整理完了！')",
        "libraries": "pandas",
        "explanation": "社員健康診断リストを自動で整理。管理・配布が簡単に。",
        "benefits": ["管理が楽", "Excel化", "配布も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員健康診断リスト自動整理のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの健康診断データを読み込む\n3. 氏名順にソートして整理する\n4. 部署別にグループ化してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（氏名、部署、健康診断日の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社員健康診断リスト自動整理のコードを作成してください。pandasライブラリを使ってCSVファイルを氏名順に並べ替えてExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 72,
        "category": "文書作成・管理",
        "number": "72/100",
        "title": "取引先別契約書リスト自動生成",
        "desc": "取引先ごとの契約書リストを自動でExcel化",
        "how_to": "CSV契約書データから取引先別の契約書リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('contracts.csv')\ndf = df.sort_values(['取引先', '契約日'])\ndf.to_excel('contracts_list.xlsx', index=False)\nprint('契約書リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先別契約書リストを自動で作成。管理・検索が楽に。",
        "benefits": ["管理が楽", "Excel化", "検索も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別契約書リスト自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの契約書データを読み込む\n3. 取引先別に契約書を整理する\n4. 契約日順にソートしてExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先、契約日、契約内容の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで取引先別契約書リスト自動生成のコードを作成してください。pandasライブラリを使ってCSVファイルから取引先別契約書リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 73,
        "category": "スタッフ管理",
        "number": "73/100",
        "title": "社内回覧板自動作成",
        "desc": "社内回覧板を自動でExcel化",
        "how_to": "CSVや手入力データから回覧板リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '山田太郎', '確認日': '2024/7/10'},\n    {'氏名': '佐藤花子', '確認日': '2024/7/11'}\n]\npd.DataFrame(data).to_excel('kairan.xlsx', index=False)\nprint('回覧板作成完了！')",
        "libraries": "pandas",
        "explanation": "社内回覧板を自動で作成。配布・管理が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内回覧板自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 回覧文書名、確認者、確認日を管理する\n3. 確認状況を集計して統計を表示する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 回覧文書名、確認者、確認日\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内回覧板自動作成のコードを作成してください。pandasライブラリを使って回覧情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 74,
        "category": "顧客管理",
        "number": "74/100",
        "title": "顧客問い合わせ履歴自動整理",
        "desc": "顧客問い合わせ履歴を自動で整理・Excel化",
        "how_to": "CSV問い合わせデータを自動で整理しExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('inquiry.csv')\ndf = df.sort_values(['氏名', '日付'])\ndf.to_excel('inquiry_sorted.xlsx', index=False)\nprint('問い合わせ履歴整理完了！')",
        "libraries": "pandas",
        "explanation": "顧客問い合わせ履歴を自動で整理。対応漏れ防止や分析に活用。",
        "benefits": ["対応漏れ防止", "Excel化", "分析に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客問い合わせ履歴自動整理のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの問い合わせデータを読み込む\n3. 氏名・日付順にソートして整理する\n4. 問い合わせ内容別に分類してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（氏名、日付、問い合わせ内容の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで顧客問い合わせ履歴自動整理のコードを作成してください。pandasライブラリを使ってCSVファイルを氏名・日付順に並べ替えてExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 75,
        "category": "スタッフ管理",
        "number": "75/100",
        "title": "社員スキルマップ自動作成",
        "desc": "社員スキルマップを自動でExcel化",
        "how_to": "CSVや手入力データからスキルマップを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '山田太郎', 'スキル': 'Python, Excel'},\n    {'氏名': '佐藤花子', 'スキル': '営業, PowerPoint'}\n]\npd.DataFrame(data).to_excel('skillmap.xlsx', index=False)\nprint('スキルマップ作成完了！')",
        "libraries": "pandas",
        "explanation": "社員スキルマップを自動で作成。人材配置や教育に活用。",
        "benefits": ["人材配置に活用", "Excel化", "教育計画も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員スキルマップ自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 社員名、スキル名、レベル、取得日を管理する\n3. スキル別・レベル別に集計する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 社員名、スキル名、レベル、取得日\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社員スキルマップ自動作成のコードを作成してください。pandasライブラリを使ってスキル情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 76,
        "category": "文書作成・管理",
        "number": "76/100",
        "title": "取引先別見積書自動作成",
        "desc": "取引先ごとの見積書を自動でPDF化",
        "how_to": "取引先名・商品名・金額を入力するだけで見積書PDFを自動作成します。",
        "sample_code": "from reportlab.pdfgen import canvas\nc = canvas.Canvas('estimate.pdf')\nc.drawString(100, 750, '見積書')\nc.drawString(100, 700, '株式会社サンプル 御中')\nc.drawString(100, 650, '商品: 商品A 金額: 50,000円')\nc.save()\nprint('PDF作成完了！')",
        "libraries": "reportlab",
        "explanation": "見積書を自動でPDF化。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別見積書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 取引先名、商品名、数量、単価を設定する\n3. 小計、消費税、合計金額を計算する\n4. 見積書番号を自動生成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 取引先名、商品名、数量、単価\n出力形式: PDFファイル\n\nコピペ用プロンプト:\nPythonで取引先別見積書自動作成のコードを作成してください。reportlabライブラリを使って取引先名・商品名・金額からPDF見積書を自動生成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 77,
        "category": "スタッフ管理",
        "number": "77/100",
        "title": "社内プロジェクト進捗表自動作成",
        "desc": "社内プロジェクト進捗表を自動でExcel化",
        "how_to": "CSVや手入力データから進捗表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'プロジェクト名': '新商品開発', '進捗': '50%'},\n    {'プロジェクト名': 'Webリニューアル', '進捗': '80%'}\n]\npd.DataFrame(data).to_excel('progress.xlsx', index=False)\nprint('進捗表作成完了！')",
        "libraries": "pandas",
        "explanation": "社内プロジェクト進捗表を自動で作成。進捗管理や報告が楽に。",
        "benefits": ["進捗管理が楽", "Excel化", "報告も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内プロジェクト進捗表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. プロジェクト名、担当者、進捗率、期限を管理する\n3. 進捗率でプロジェクトを分類する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: プロジェクト名、担当者、進捗率、期限\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内プロジェクト進捗表自動作成のコードを作成してください。pandasライブラリを使って進捗情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 78,
        "category": "スタッフ管理",
        "number": "78/100",
        "title": "社内イベント出欠管理表自動作成",
        "desc": "社内イベントの出欠管理表を自動でExcel化",
        "how_to": "CSVや手入力データから出欠管理表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '山田太郎', '出欠': '出席'},\n    {'氏名': '佐藤花子', '出欠': '未定'}\n]\npd.DataFrame(data).to_excel('event_attendance.xlsx', index=False)\nprint('出欠管理表作成完了！')",
        "libraries": "pandas",
        "explanation": "社内イベントの出欠管理表を自動で作成。配布・管理が簡単に。",
        "benefits": ["手入力不要", "Excel化", "管理が楽"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内イベント出欠管理表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. イベント名、参加者名、出欠状況、回答日を管理する\n3. 出欠状況を集計して統計を表示する\n4. 見やすいレイアウトでExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: イベント名、参加者名、出欠状況、回答日\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社内イベント出欠管理表自動作成のコードを作成してください。pandasライブラリを使って出欠情報をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 79,
        "category": "顧客管理",
        "number": "79/100",
        "title": "顧客アンケート集計",
        "desc": "顧客アンケート結果を自動で集計・グラフ化",
        "how_to": "CSVアンケートデータを自動で集計し、グラフも作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('customer_survey.csv')\ncounts = df['評価'].value_counts()\ncounts.plot(kind='bar')\nplt.savefig('customer_survey_chart.png')\nprint('集計・グラフ作成完了！')",
        "libraries": "pandas、matplotlib",
        "explanation": "顧客アンケート集計・グラフ化を自動化。報告書作成も楽に。",
        "benefits": ["集計が楽", "グラフも自動", "報告書作成時短"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客アンケート集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルの顧客アンケート結果を読み込む\n3. 回答者数、平均評価、満足度分布を集計する\n4. 年齢別・性別の分析を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（年齢、性別、評価、満足度の列）\n出力形式: グラフ画像ファイル\n\nコピペ用プロンプト:\nPythonで顧客アンケート集計のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルから顧客アンケートを集計・グラフ作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 80,
        "category": "データ処理・分析",
        "number": "80/100",
        "title": "交通費精算書自動作成",
        "desc": "交通費精算書を自動でExcel化",
        "how_to": "CSV交通費データから精算書を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('transport.csv')\ndf.to_excel('transport_expense.xlsx', index=False)\nprint('交通費精算書作成完了！')",
        "libraries": "pandas",
        "explanation": "交通費精算書を自動で作成。経費精算が楽に。",
        "benefits": ["経費精算が楽", "Excel化", "手作業不要"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで交通費精算書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの交通費データを読み込む\n3. 日付別・路線別に集計する\n4. 合計金額を計算してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、路線、金額の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで交通費精算書自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルからExcel精算書を作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 81,
        "category": "顧客管理",
        "number": "81/100",
        "title": "取引先連絡先リスト自動生成",
        "desc": "取引先の連絡先リストを自動でExcel化",
        "how_to": "CSV取引先データから連絡先リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('partners.csv')\ndf[['会社名', '担当者', '電話', 'メール']].to_excel('partner_contacts.xlsx', index=False)\nprint('連絡先リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先連絡先を自動でリスト化。電話・メールもすぐ探せる。",
        "benefits": ["連絡が楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先連絡先リスト自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの取引先データを読み込む\n3. 会社名、担当者、電話番号、メールアドレスを整理する\n4. 取引先別にグループ化してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（会社名、担当者、電話番号、メールアドレスの列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで取引先連絡先リスト自動生成のコードを作成してください。pandasライブラリを使ってCSVファイルから取引先連絡先リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 82,
        "category": "スタッフ管理",
        "number": "82/100",
        "title": "社員研修履歴リスト自動作成",
        "desc": "社員の研修履歴リストを自動でExcel化",
        "how_to": "CSV研修データから研修履歴リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('training.csv')\ndf.to_excel('training_history.xlsx', index=False)\nprint('研修履歴リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "社員研修履歴リストを自動で作成。教育管理や人事評価に活用。",
        "benefits": ["教育管理が楽", "Excel化", "人事評価に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員研修履歴リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの研修データを読み込む\n3. 社員別・研修別に履歴を整理する\n4. 研修日順にソートしてExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（社員名、研修名、研修日の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで社員研修履歴リスト自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルから社員研修履歴リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 83,
        "category": "在庫管理",
        "number": "83/100",
        "title": "商品在庫リスト自動更新",
        "desc": "商品在庫リストを自動で最新化",
        "how_to": "CSV在庫データを自動で更新・保存します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('stock.csv')\ndf['在庫数'] += 5\ndf.to_csv('stock_updated.csv', index=False)\nprint('在庫リスト更新完了！')",
        "libraries": "pandas",
        "explanation": "在庫リストを自動で最新化。棚卸しや発注も楽に。",
        "benefits": ["在庫管理が楽", "ミス防止", "自動化"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで商品在庫リスト自動更新のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの在庫データを読み込む\n3. 入荷・出荷データを反映して在庫数を更新する\n4. 在庫不足の商品を検出して警告を表示する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（商品名、現在在庫数、入荷数、出荷数の列）\n出力形式: 更新されたCSVファイル\n\nコピペ用プロンプト:\nPythonで商品在庫リスト自動更新のコードを作成してください。pandasライブラリを使ってCSVファイルの在庫数を自動更新するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 84,
        "category": "在庫管理",
        "number": "84/100",
        "title": "受発注管理表自動作成",
        "desc": "受発注管理表を自動でExcel化",
        "how_to": "CSV受発注データから管理表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('orders.csv')\ndf.to_excel('order_management.xlsx', index=False)\nprint('受発注管理表作成完了！')",
        "libraries": "pandas",
        "explanation": "受発注管理表を自動で作成。業務効率化・管理が楽に。",
        "benefits": ["業務効率化", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで受発注管理表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの受発注データを読み込む\n3. 日付順・取引先別に整理する\n4. 受注・発注の状況を集計してExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（日付、取引先、商品名、数量、金額の列）\n出力形式: Excelファイル\n\nコピペ用プロンプト:\nPythonで受発注管理表自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルから受発注管理表をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 85,
        "category": "スタッフ管理",
        "number": "85/100",
        "title": "社内FAQ自動生成",
        "desc": "よくある質問と回答を自動でリスト化",
        "how_to": "Q&Aリストを自動でまとめ、社内FAQを作成します。",
        "sample_code": "faq = [\n    {'質問': 'パスワードを忘れたら？', '回答': 'システム管理者に連絡してください。'},\n    {'質問': '経費申請の締切は？', '回答': '毎月25日です。'}\n]\nfor qa in faq:\n    print(f\"Q: {qa['質問']}\\nA: {qa['回答']}\\n\")",
        "libraries": "標準ライブラリのみ",
        "explanation": "社内FAQを自動で作成。新人教育や問い合わせ対応が楽に。",
        "benefits": ["教育コスト削減", "問い合わせ対応時短", "誰でも使える"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内FAQ自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. 標準ライブラリ（辞書、リスト）を使う\n2. Q&Aリストを辞書形式で管理する\n3. 質問と回答を整理してFAQ形式にする\n4. 見やすい形式でテキストファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力データ: Q&Aリスト（質問、回答のペア）\n出力形式: テキストファイル\n\nコピペ用プロンプト:\nPythonで社内FAQ自動生成のコードを作成してください。Q&AリストからFAQを自動生成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 86,
        "category": "スタッフ管理",
        "number": "86/100",
        "title": "休暇申請書自動作成",
        "desc": "休暇申請書を自動でExcel化",
        "how_to": "申請者名・日付・理由を入力するだけで休暇申請書を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '山田太郎', '日付': '2024/7/20', '理由': '私用'}\n]\npd.DataFrame(data).to_excel('leave_application.xlsx', index=False)\nprint('休暇申請書作成完了！')",
        "libraries": "pandas",
        "explanation": "休暇申請書を自動で作成。申請・管理が楽に。",
        "benefits": ["申請が楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで休暇申請書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 申請者情報（氏名、日付、理由）を管理する\n3. 申請書の基本情報を設定する\n4. 申請書をExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 申請者名、申請日、休暇期間、理由\n出力形式: Excelファイル（leave_application.xlsx）\n管理項目: 氏名、申請日、休暇期間、理由、承認状況\n\nコピペ用プロンプト:\nPythonで休暇申請書自動作成のコードを作成してください。pandasライブラリを使って申請者情報（氏名、日付、理由）を管理し、申請書の基本情報を設定して申請書をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 87,
        "category": "顧客管理",
        "number": "87/100",
        "title": "取引先評価リスト自動作成",
        "desc": "取引先の評価リストを自動でExcel化",
        "how_to": "CSV評価データから取引先評価リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('partner_evaluation.csv')\ndf.to_excel('partner_evaluation_list.xlsx', index=False)\nprint('評価リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先評価リストを自動で作成。取引先管理や選定に活用。",
        "benefits": ["取引先管理が楽", "Excel化", "選定に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先評価リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの取引先評価データを読み込む\n3. 評価項目（品質、納期、価格、対応）を設定する\n4. 評価リストをExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先名、評価項目、評価点）\n出力形式: Excelファイル（partner_evaluation_list.xlsx）\n評価項目: 品質、納期、価格、対応、総合評価\n\nコピペ用プロンプト:\nPythonで取引先評価リスト自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルの取引先評価データを読み込み、評価項目（品質、納期、価格、対応）を設定して評価リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 88,
        "category": "スタッフ管理",
        "number": "88/100",
        "title": "社内備品貸出管理表自動作成",
        "desc": "社内備品の貸出管理表を自動でExcel化",
        "how_to": "CSVや手入力データから備品貸出管理表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'備品名': 'プロジェクター', '貸出者': '山田太郎', '貸出日': '2024/7/10'},\n    {'備品名': 'ノートPC', '貸出者': '佐藤花子', '貸出日': '2024/7/11'}\n]\npd.DataFrame(data).to_excel('equipment_loan.xlsx', index=False)\nprint('貸出管理表作成完了！')",
        "libraries": "pandas",
        "explanation": "社内備品の貸出管理表を自動で作成。備品管理・追跡が楽に。",
        "benefits": ["備品管理が楽", "Excel化", "追跡も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内備品貸出管理表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 備品貸出情報（備品名、貸出者、貸出日、返却予定日）を管理する\n3. 貸出状況の追跡機能を実装する\n4. 貸出管理表をExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 備品名、貸出者、貸出日、返却予定日、返却日、状況\n出力形式: Excelファイル（equipment_loan.xlsx）\n機能: 貸出登録、返却登録、状況確認\n\nコピペ用プロンプト:\nPythonで社内備品貸出管理表自動作成のコードを作成してください。pandasライブラリを使って備品貸出情報（備品名、貸出者、貸出日、返却予定日）を管理し、貸出状況の追跡機能を実装して貸出管理表をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 89,
        "category": "顧客管理",
        "number": "89/100",
        "title": "顧客フォローアップリスト自動生成",
        "desc": "顧客フォローアップリストを自動でExcel化",
        "how_to": "CSV顧客データからフォローアップリストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('customers.csv')\ndf[['氏名', '最終連絡日', '次回連絡予定']].to_excel('followup_list.xlsx', index=False)\nprint('フォローアップリスト作成完了！')",
        "libraries": "pandas",
        "explanation": "顧客フォローアップリストを自動で作成。営業活動や顧客管理に活用。",
        "benefits": ["営業活動が楽", "Excel化", "顧客管理に活用"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客フォローアップリスト自動生成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの顧客データを読み込む\n3. フォローアップ予定日を自動計算する\n4. 優先度を設定する（重要度、最終連絡日による）\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客名、最終連絡日、重要度）\n出力形式: Excelファイル（followup_list.xlsx）\n管理項目: 顧客名、最終連絡日、次回連絡予定日、優先度、状況\n\nコピペ用プロンプト:\nPythonで顧客フォローアップリスト自動生成のコードを作成してください。pandasライブラリを使ってCSVファイルの顧客データを読み込み、フォローアップ予定日を自動計算して優先度を設定するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 90,
        "category": "スタッフ管理",
        "number": "90/100",
        "title": "社員勤務時間自動集計",
        "desc": "社員の勤務時間を自動で集計・レポート化",
        "how_to": "CSV勤務データから社員ごとの勤務時間を自動集計しExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('work_hours.csv')\nsummary = df.groupby('氏名')['勤務時間'].sum()\nsummary.to_excel('work_hours_summary.xlsx')\nprint('勤務時間集計完了！')",
        "libraries": "pandas",
        "explanation": "社員勤務時間を自動で集計。給与計算や勤怠管理に活用。",
        "benefits": ["給与計算が楽", "Excel化", "勤怠管理に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員勤務時間自動集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの勤務データを読み込む\n3. 社員別・日別の勤務時間を計算する\n4. 月次集計レポートを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（社員名、日付、出勤時間、退勤時間）\n出力形式: Excelファイル（work_hours_summary.xlsx）\n集計項目: 総勤務時間、残業時間、遅刻回数、月次集計\n\nコピペ用プロンプト:\nPythonで社員勤務時間自動集計のコードを作成してください。pandasライブラリを使ってCSVファイルの勤務データを読み込み、社員別・日別の勤務時間を計算して月次集計レポートを作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 91,
        "category": "データ処理・分析",
        "number": "91/100",
        "title": "取引先別売上レポート自動作成",
        "desc": "取引先別の売上レポートを自動でExcel化",
        "how_to": "CSV売上データから取引先別の売上レポートを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('sales.csv')\nreport = df.groupby('取引先')['売上'].sum()\nreport.to_excel('sales_report.xlsx')\nprint('売上レポート作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先別売上レポートを自動で作成。営業戦略や分析に活用。",
        "benefits": ["営業戦略に活用", "Excel化", "分析も簡単"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別売上レポート自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの売上データを読み込む\n3. 取引先別の売上を集計する\n4. 月次・年次レポートを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先名、日付、売上金額、商品名）\n出力形式: Excelファイル（sales_report.xlsx）\n集計項目: 取引先別売上、月次売上、年次売上、成長率\n\nコピペ用プロンプト:\nPythonで取引先別売上レポート自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルの売上データを読み込み、取引先別の売上を集計して月次・年次レポートを作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 92,
        "category": "データ処理・分析",
        "number": "92/100",
        "title": "社内研修アンケート集計",
        "desc": "社内研修アンケート結果を自動で集計・グラフ化",
        "how_to": "CSVアンケートデータを自動で集計し、グラフも作成します。",
        "sample_code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('training_survey.csv')\ncounts = df['満足度'].value_counts()\ncounts.plot(kind='pie', autopct='%1.1f%%')\nplt.savefig('training_survey_chart.png')\nprint('集計・グラフ作成完了！')",
        "libraries": "pandas、matplotlib",
        "explanation": "社内研修アンケート集計・グラフ化を自動化。研修改善に活用。",
        "benefits": ["研修改善に活用", "グラフも自動", "報告書作成時短"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内研修アンケート集計のコードを作成してください。以下の条件でお願いします：\n\n1. pandasとmatplotlibライブラリを使う\n2. CSVファイルのアンケートデータを読み込む\n3. 満足度の集計・分析を行う\n4. 円グラフと棒グラフを作成する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（回答者、満足度、改善点、研修内容）\n出力形式: Excelファイル（集計結果）+ PNGファイル（グラフ）\n分析項目: 満足度分布、改善点分析、研修効果測定\n\nコピペ用プロンプト:\nPythonで社内研修アンケート集計のコードを作成してください。pandasとmatplotlibライブラリを使ってCSVファイルのアンケートデータを読み込み、満足度の集計・分析を行って円グラフと棒グラフを作成するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 93,
        "category": "文書作成・管理",
        "number": "93/100",
        "title": "商品発注書自動作成",
        "desc": "商品発注書を自動でPDF化",
        "how_to": "商品名・数量・金額を入力するだけで発注書PDFを自動作成します。",
        "sample_code": "from reportlab.pdfgen import canvas\nc = canvas.Canvas('order_form.pdf')\nc.drawString(100, 750, '発注書')\nc.drawString(100, 700, '株式会社サプライヤー 御中')\nc.drawString(100, 650, '商品: 商品A 数量: 100個 金額: 50,000円')\nc.save()\nprint('PDF作成完了！')",
        "libraries": "reportlab",
        "explanation": "商品発注書を自動でPDF化。手書き・転記不要。",
        "benefits": ["手書き不要", "PDF化", "時短"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで商品発注書自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. reportlabライブラリを使う\n2. 発注書の基本情報を設定する（会社名、日付、発注番号）\n3. 商品情報（商品名、数量、単価、金額）を管理する\n4. 合計金額を自動計算する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力情報: 発注先、商品リスト、数量、単価\n出力形式: PDFファイル（order_form.pdf）\n管理項目: 発注番号、発注日、納期、支払条件、商品詳細\n\nコピペ用プロンプト:\nPythonで商品発注書自動作成のコードを作成してください。reportlabライブラリを使って発注書の基本情報を設定し、商品情報（商品名、数量、単価、金額）を管理して合計金額を自動計算するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 94,
        "category": "スタッフ管理",
        "number": "94/100",
        "title": "社員名刺管理リスト自動作成",
        "desc": "社員の名刺管理リストを自動でExcel化",
        "how_to": "CSVや手入力データから名刺管理リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'氏名': '山田太郎', '部署': '営業', '名刺枚数': 500},\n    {'氏名': '佐藤花子', '部署': '総務', '名刺枚数': 300}\n]\npd.DataFrame(data).to_excel('business_card.xlsx', index=False)\nprint('名刺管理リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "社員名刺管理リストを自動で作成。名刺発注・管理が楽に。",
        "benefits": ["名刺発注が楽", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社員名刺管理リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 社員別の名刺情報を管理する（氏名、部署、名刺枚数）\n3. 名刺発注予定を自動計算する\n4. 名刺管理リストをExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 氏名、部署、現在の名刺枚数、発注予定枚数、最終発注日\n出力形式: Excelファイル（business_card.xlsx）\n機能: 名刺在庫管理、発注予定管理、部署別集計\n\nコピペ用プロンプト:\nPythonで社員名刺管理リスト自動作成のコードを作成してください。pandasライブラリを使って社員別の名刺情報を管理し、名刺発注予定を自動計算して名刺管理リストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 95,
        "category": "データ処理・分析",
        "number": "95/100",
        "title": "取引先別支払条件リスト自動作成",
        "desc": "取引先ごとの支払条件リストを自動でExcel化",
        "how_to": "CSV支払条件データから取引先別の支払条件リストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('payment_terms.csv')\ndf.to_excel('payment_terms_list.xlsx', index=False)\nprint('支払条件リスト作成完了！')",
        "libraries": "pandas",
        "explanation": "取引先別支払条件リストを自動で作成。資金繰り管理に活用。",
        "benefits": ["資金繰り管理", "Excel化", "管理が簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで取引先別支払条件リスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの支払条件データを読み込む\n3. 取引先別の支払条件を管理する\n4. 支払予定日を自動計算する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（取引先名、支払条件、取引金額）\n出力形式: Excelファイル（payment_terms_list.xlsx）\n管理項目: 取引先名、支払条件、支払予定日、支払状況、取引金額\n\nコピペ用プロンプト:\nPythonで取引先別支払条件リスト自動作成のコードを作成してください。pandasライブラリを使ってCSVファイルの支払条件データを読み込み、取引先別の支払条件を管理して支払予定日を自動計算するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 96,
        "category": "スタッフ管理",
        "number": "96/100",
        "title": "社内イベント予算管理表自動作成",
        "desc": "社内イベントの予算管理表を自動でExcel化",
        "how_to": "CSVや手入力データからイベント予算管理表を自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'項目': '会場費', '予算': 100000, '実績': 95000},\n    {'項目': '飲食費', '予算': 50000, '実績': 48000}\n]\npd.DataFrame(data).to_excel('event_budget.xlsx', index=False)\nprint('予算管理表作成完了！')",
        "libraries": "pandas",
        "explanation": "社内イベント予算管理表を自動で作成。予算管理・分析が楽に。",
        "benefits": ["予算管理が楽", "Excel化", "分析も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内イベント予算管理表自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. イベント予算項目を管理する（会場費、飲食費、備品費など）\n3. 予算と実績を比較分析する\n4. 予算管理表をExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 予算項目、予算金額、実績金額、差異、進捗率\n出力形式: Excelファイル（event_budget.xlsx）\n機能: 予算管理、実績管理、差異分析、進捗管理\n\nコピペ用プロンプト:\nPythonで社内イベント予算管理表自動作成のコードを作成してください。pandasライブラリを使ってイベント予算項目を管理し、予算と実績を比較分析して予算管理表をExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 97,
        "category": "顧客管理",
        "number": "97/100",
        "title": "顧客別購入履歴分析",
        "desc": "顧客の購入履歴を自動で分析・レポート化",
        "how_to": "CSV購入履歴データから顧客別の購入分析を自動で行いExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('purchase_history.csv')\nanalysis = df.groupby('顧客名')['購入金額'].agg(['sum', 'count', 'mean'])\nanalysis.to_excel('purchase_analysis.xlsx')\nprint('購入履歴分析完了！')",
        "libraries": "pandas",
        "explanation": "顧客別購入履歴を自動で分析。マーケティング戦略に活用。",
        "benefits": ["マーケティング戦略", "Excel化", "分析に活用"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客別購入履歴分析のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの購入履歴データを読み込む\n3. 顧客別の購入パターンを分析する\n4. 購買頻度と金額の分析を行う\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客名、購入日、商品名、購入金額）\n出力形式: Excelファイル（purchase_analysis.xlsx）\n分析項目: 総購入金額、購入回数、平均購入金額、最終購入日、購買傾向\n\nコピペ用プロンプト:\nPythonで顧客別購入履歴分析のコードを作成してください。pandasライブラリを使ってCSVファイルの購入履歴データを読み込み、顧客別の購入パターンを分析して購買頻度と金額の分析を行うコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 98,
        "category": "スタッフ管理",
        "number": "98/100",
        "title": "社内備品棚卸しリスト自動作成",
        "desc": "社内備品の棚卸しリストを自動でExcel化",
        "how_to": "CSVや手入力データから備品棚卸しリストを自動でExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'備品名': 'ノートPC', '台数': 10, '状態': '良好'},\n    {'備品名': 'プロジェクター', '台数': 2, '状態': '要修理'}\n]\npd.DataFrame(data).to_excel('inventory_check.xlsx', index=False)\nprint('棚卸しリスト作成完了！')",
        "libraries": "pandas",
        "explanation": "社内備品の棚卸しリストを自動で作成。資産管理・点検が楽に。",
        "benefits": ["資産管理が楽", "Excel化", "点検も簡単"],
        "time_required": "10分〜30分",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内備品棚卸しリスト自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 備品の棚卸し情報を管理する（備品名、台数、状態、購入日）\n3. 棚卸し結果を記録・分析する\n4. 棚卸しリストをExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 備品名、台数、状態、購入日、棚卸し日、備考\n出力形式: Excelファイル（inventory_check.xlsx）\n機能: 備品管理、状態管理、棚卸し記録、資産管理\n\nコピペ用プロンプト:\nPythonで社内備品棚卸しリスト自動作成のコードを作成してください。pandasライブラリを使って備品の棚卸し情報を管理し、棚卸し結果を記録・分析して棚卸しリストをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 99,
        "category": "データ処理・分析",
        "number": "99/100",
        "title": "顧客別売上予測分析",
        "desc": "顧客の売上予測を自動で分析・レポート化",
        "how_to": "CSV売上データから顧客別の売上予測を自動で行いExcel化します。",
        "sample_code": "import pandas as pd\ndf = pd.read_csv('sales_history.csv')\nprediction = df.groupby('顧客名')['売上'].mean() * 1.1\nprediction.to_excel('sales_prediction.xlsx')\nprint('売上予測分析完了！')",
        "libraries": "pandas",
        "explanation": "顧客別売上予測を自動で分析。営業戦略や予算策定に活用。",
        "benefits": ["営業戦略に活用", "Excel化", "予算策定も簡単"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで顧客別売上予測分析のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. CSVファイルの売上履歴データを読み込む\n3. 顧客別の売上傾向を分析する\n4. 過去データから売上予測を算出する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n入力ファイル: CSVファイル（顧客名、売上日、売上金額、商品名）\n出力形式: Excelファイル（sales_prediction.xlsx）\n分析項目: 過去売上、売上傾向、予測売上、成長率、信頼度\n\nコピペ用プロンプト:\nPythonで顧客別売上予測分析のコードを作成してください。pandasライブラリを使ってCSVファイルの売上履歴データを読み込み、顧客別の売上傾向を分析して過去データから売上予測を算出するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    },
    {
        "id": 100,
        "category": "データ処理・分析",
        "number": "100/100",
        "title": "社内業務効率化レポート自動作成",
        "desc": "社内業務の効率化レポートを自動でExcel化",
        "how_to": "CSV業務データから効率化レポートを自動で作成しExcel化します。",
        "sample_code": "import pandas as pd\ndata = [\n    {'業務名': 'データ入力', '改善前': '2時間', '改善後': '30分'},\n    {'業務名': 'レポート作成', '改善前': '3時間', '改善後': '1時間'}\n]\npd.DataFrame(data).to_excel('efficiency_report.xlsx', index=False)\nprint('効率化レポート作成完了！')",
        "libraries": "pandas",
        "explanation": "社内業務効率化レポートを自動で作成。業務改善・分析に活用。",
        "benefits": ["業務改善に活用", "Excel化", "分析も簡単"],
        "time_required": "30分〜1時間",
        "difficulty": "初級",
        "ai_prompt": "Pythonで社内業務効率化レポート自動作成のコードを作成してください。以下の条件でお願いします：\n\n1. pandasライブラリを使う\n2. 業務効率化の前後データを管理する\n3. 改善効果を数値化・分析する\n4. 効率化レポートをExcelファイルに保存する\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n管理項目: 業務名、改善前時間、改善後時間、改善率、効果測定\n出力形式: Excelファイル（efficiency_report.xlsx）\n分析項目: 時間短縮効果、コスト削減効果、生産性向上率\n\nコピペ用プロンプト:\nPythonで社内業務効率化レポート自動作成のコードを作成してください。pandasライブラリを使って業務効率化の前後データを管理し、改善効果を数値化・分析して効率化レポートをExcelファイルに保存するコードを書いてください。初心者でも理解できるようにコメントを詳しく書いてください。"
    }
] 